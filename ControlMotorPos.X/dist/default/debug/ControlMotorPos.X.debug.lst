

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Nov 12 23:36:46 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC18F4431 Definitions
    37                           ; 
    38  0000                     fsr0 equ 0FE9h
    39  0000                     fsr0h equ 0FEAh
    40  0000                     fsr0l equ 0FE9h
    41  0000                     fsr1 equ 0FE1h
    42  0000                     fsr1h equ 0FE2h
    43  0000                     fsr1l equ 0FE1h
    44  0000                     fsr2 equ 0FD9h
    45  0000                     fsr2h equ 0FDAh
    46  0000                     fsr2l equ 0FD9h
    47  0000                     indf0 equ 0FEFh
    48  0000                     indf1 equ 0FE7h
    49  0000                     indf2 equ 0FDFh
    50  0000                     intcon equ 0FF2h
    51  0000                     nvmcon equ 00h
    52  0000                     pcl equ 0FF9h
    53  0000                     pclath equ 0FFAh
    54  0000                     pclatu equ 0FFBh
    55  0000                     plusw0 equ 0FEBh
    56  0000                     plusw1 equ 0FE3h
    57  0000                     plusw2 equ 0FDBh
    58  0000                     postdec0 equ 0FEDh
    59  0000                     postdec1 equ 0FE5h
    60  0000                     postdec2 equ 0FDDh
    61  0000                     postinc0 equ 0FEEh
    62  0000                     postinc1 equ 0FE6h
    63  0000                     postinc2 equ 0FDEh
    64  0000                     preinc0 equ 0FECh
    65  0000                     preinc1 equ 0FE4h
    66  0000                     preinc2 equ 0FDCh
    67  0000                     prod equ 0FF3h
    68  0000                     prodh equ 0FF4h
    69  0000                     prodl equ 0FF3h
    70  0000                     status equ 0FD8h
    71  0000                     tablat equ 0FF5h
    72  0000                     tblptr equ 0FF6h
    73  0000                     tblptrh equ 0FF7h
    74  0000                     tblptrl equ 0FF6h
    75  0000                     tblptru equ 0FF8h
    76  0000                     tosl equ 0FFDh
    77  0000                     wreg equ 0FE8h
    78  0000                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc   macro
    64                           	bcf	status,0
    65                           endm
    66  0000                     setc   macro
    67                           	bsf	status,0
    68                           endm
    69  0000                     clrz   macro
    70                           	bcf	status,2
    71                           endm
    72  0000                     setz   macro
    73                           	bsf	status,2
    74                           endm
    75  0000                     skipnz macro
    76                           	btfsc	status,2
    77                           endm
    78  0000                     skipz  macro
    79                           	btfss	status,2
    80                           endm
    81  0000                     skipnc macro
    82                           	btfsc	status,0
    83                           endm
    84  0000                     skipc  macro
    85                           	btfss	status,0
    86                           endm
    87  0000                     pushw macro
    88                           	movwf postinc1
    89                           endm
    90  0000                     pushf macro arg1
    91                           	movff arg1, postinc1
    92                           endm
    93  0000                     popw macro
    94                           	movf postdec1,f
    95                           	movf indf1,w
    96                           endm
    97  0000                     popf macro arg1
    98                           	movf postdec1,f
    99                           	movff indf1,arg1
   100                           endm
   101  0000                     popfc macro arg1
   102                           	movff plusw1,arg1
   103                           	decfsz fsr1,f
   104                           endm
   105  0000                     	global	__ramtop
   106                           	global	__accesstop
   107                           # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   108                           DFLTCON equ 0F60h ;# 
   109  0000                     # 118 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   110                           CAP3CON equ 0F61h ;# 
   111  0000                     # 177 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   112                           CAP2CON equ 0F62h ;# 
   113  0000                     # 236 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   114                           CAP1CON equ 0F63h ;# 
   115  0000                     # 295 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   116                           CAP3BUFL equ 0F64h ;# 
   117  0000                     # 300 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   118                           MAXCNTL equ 0F64h ;# 
   119  0000                     # 307 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   120                           CAP3BUFH equ 0F65h ;# 
   121  0000                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   122                           MAXCNTH equ 0F65h ;# 
   123  0000                     # 319 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   124                           CAP2BUFL equ 0F66h ;# 
   125  0000                     # 324 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   126                           POSCNTL equ 0F66h ;# 
   127  0000                     # 331 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   128                           CAP2BUFH equ 0F67h ;# 
   129  0000                     # 336 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   130                           POSCNTH equ 0F67h ;# 
   131  0000                     # 343 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   132                           CAP1BUFL equ 0F68h ;# 
   133  0000                     # 348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   134                           VELRL equ 0F68h ;# 
   135  0000                     # 355 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   136                           CAP1BUFH equ 0F69h ;# 
   137  0000                     # 360 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   138                           VELRH equ 0F69h ;# 
   139  0000                     # 367 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   140                           OVDCONS equ 0F6Ah ;# 
   141  0000                     # 437 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   142                           OVDCOND equ 0F6Bh ;# 
   143  0000                     # 507 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   144                           FLTCONFIG equ 0F6Ch ;# 
   145  0000                     # 569 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   146                           DTCON equ 0F6Dh ;# 
   147  0000                     # 695 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   148                           PWMCON1 equ 0F6Eh ;# 
   149  0000                     # 761 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   150                           PWMCON0 equ 0F6Fh ;# 
   151  0000                     # 831 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   152                           SEVTCMPH equ 0F70h ;# 
   153  0000                     # 838 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   154                           SEVTCMPL equ 0F71h ;# 
   155  0000                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   156                           PDC3H equ 0F72h ;# 
   157  0000                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   158                           PDC3L equ 0F73h ;# 
   159  0000                     # 859 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   160                           PDC2H equ 0F74h ;# 
   161  0000                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   162                           PDC2L equ 0F75h ;# 
   163  0000                     # 873 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   164                           PDC1H equ 0F76h ;# 
   165  0000                     # 880 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   166                           PDC1L equ 0F77h ;# 
   167  0000                     # 887 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   168                           PDC0H equ 0F78h ;# 
   169  0000                     # 894 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   170                           PDC0L equ 0F79h ;# 
   171  0000                     # 901 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   172                           PTPERH equ 0F7Ah ;# 
   173  0000                     # 908 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   174                           PTPERL equ 0F7Bh ;# 
   175  0000                     # 915 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   176                           PTMRH equ 0F7Ch ;# 
   177  0000                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   178                           PTMRL equ 0F7Dh ;# 
   179  0000                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   180                           PTCON1 equ 0F7Eh ;# 
   181  0000                     # 956 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   182                           PTCON0 equ 0F7Fh ;# 
   183  0000                     # 1038 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   184                           PORTA equ 0F80h ;# 
   185  0000                     # 1199 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   186                           PORTB equ 0F81h ;# 
   187  0000                     # 1270 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   188                           PORTC equ 0F82h ;# 
   189  0000                     # 1536 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   190                           PORTD equ 0F83h ;# 
   191  0000                     # 1607 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   192                           PORTE equ 0F84h ;# 
   193  0000                     # 1733 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   194                           TMR5 equ 0F87h ;# 
   195  0000                     # 1740 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   196                           TMR5L equ 0F87h ;# 
   197  0000                     # 1747 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   198                           TMR5H equ 0F88h ;# 
   199  0000                     # 1754 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   200                           LATA equ 0F89h ;# 
   201  0000                     # 1866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   202                           LATB equ 0F8Ah ;# 
   203  0000                     # 1978 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   204                           LATC equ 0F8Bh ;# 
   205  0000                     # 2090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   206                           LATD equ 0F8Ch ;# 
   207  0000                     # 2202 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   208                           LATE equ 0F8Dh ;# 
   209  0000                     # 2254 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   210                           PR5 equ 0F90h ;# 
   211  0000                     # 2261 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   212                           PR5L equ 0F90h ;# 
   213  0000                     # 2268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   214                           PR5H equ 0F91h ;# 
   215  0000                     # 2275 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   216                           TRISA equ 0F92h ;# 
   217  0000                     # 2280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   218                           DDRA equ 0F92h ;# 
   219  0000                     # 2497 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   220                           TRISB equ 0F93h ;# 
   221  0000                     # 2502 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   222                           DDRB equ 0F93h ;# 
   223  0000                     # 2719 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   224                           TRISC equ 0F94h ;# 
   225  0000                     # 2724 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   226                           DDRC equ 0F94h ;# 
   227  0000                     # 2941 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   228                           TRISD equ 0F95h ;# 
   229  0000                     # 2946 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   230                           DDRD equ 0F95h ;# 
   231  0000                     # 3163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   232                           TRISE equ 0F96h ;# 
   233  0000                     # 3168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   234                           DDRE equ 0F96h ;# 
   235  0000                     # 3265 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   236                           ADCHS equ 0F99h ;# 
   237  0000                     # 3403 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   238                           ADCON3 equ 0F9Ah ;# 
   239  0000                     # 3475 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   240                           OSCTUNE equ 0F9Bh ;# 
   241  0000                     # 3533 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   242                           PIE1 equ 0F9Dh ;# 
   243  0000                     # 3613 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   244                           PIR1 equ 0F9Eh ;# 
   245  0000                     # 3693 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   246                           IPR1 equ 0F9Fh ;# 
   247  0000                     # 3773 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   248                           PIE2 equ 0FA0h ;# 
   249  0000                     # 3814 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   250                           PIR2 equ 0FA1h ;# 
   251  0000                     # 3855 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   252                           IPR2 equ 0FA2h ;# 
   253  0000                     # 3896 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   254                           PIE3 equ 0FA3h ;# 
   255  0000                     # 3988 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   256                           PIR3 equ 0FA4h ;# 
   257  0000                     # 4048 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   258                           IPR3 equ 0FA5h ;# 
   259  0000                     # 4108 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   260                           EECON1 equ 0FA6h ;# 
   261  0000                     # 4174 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   262                           EECON2 equ 0FA7h ;# 
   263  0000                     # 4181 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   264                           EEDATA equ 0FA8h ;# 
   265  0000                     # 4188 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   266                           EEADR equ 0FA9h ;# 
   267  0000                     # 4195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   268                           BAUDCON equ 0FAAh ;# 
   269  0000                     # 4200 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   270                           BAUDCTL equ 0FAAh ;# 
   271  0000                     # 4375 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   272                           RCSTA equ 0FABh ;# 
   273  0000                     # 4380 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   274                           RCSTA1 equ 0FABh ;# 
   275  0000                     # 4585 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   276                           TXSTA equ 0FACh ;# 
   277  0000                     # 4590 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   278                           TXSTA1 equ 0FACh ;# 
   279  0000                     # 4841 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   280                           TXREG equ 0FADh ;# 
   281  0000                     # 4846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   282                           TXREG1 equ 0FADh ;# 
   283  0000                     # 4853 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   284                           RCREG equ 0FAEh ;# 
   285  0000                     # 4858 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   286                           RCREG1 equ 0FAEh ;# 
   287  0000                     # 4865 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   288                           SPBRG equ 0FAFh ;# 
   289  0000                     # 4870 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   290                           SPBRG1 equ 0FAFh ;# 
   291  0000                     # 4877 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   292                           SPBRGH equ 0FB0h ;# 
   293  0000                     # 4884 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   294                           QEICON equ 0FB6h ;# 
   295  0000                     # 5036 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   296                           T5CON equ 0FB7h ;# 
   297  0000                     # 5154 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   298                           ANSEL0 equ 0FB8h ;# 
   299  0000                     # 5216 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   300                           ANSEL1 equ 0FB9h ;# 
   301  0000                     # 5236 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   302                           CCP2CON equ 0FBAh ;# 
   303  0000                     # 5315 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   304                           CCPR2 equ 0FBBh ;# 
   305  0000                     # 5322 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   306                           CCPR2L equ 0FBBh ;# 
   307  0000                     # 5329 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   308                           CCPR2H equ 0FBCh ;# 
   309  0000                     # 5336 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   310                           CCP1CON equ 0FBDh ;# 
   311  0000                     # 5415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   312                           CCPR1 equ 0FBEh ;# 
   313  0000                     # 5422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   314                           CCPR1L equ 0FBEh ;# 
   315  0000                     # 5429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   316                           CCPR1H equ 0FBFh ;# 
   317  0000                     # 5436 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   318                           ADCON2 equ 0FC0h ;# 
   319  0000                     # 5512 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   320                           ADCON1 equ 0FC1h ;# 
   321  0000                     # 5608 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   322                           ADCON0 equ 0FC2h ;# 
   323  0000                     # 5727 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   324                           ADRES equ 0FC3h ;# 
   325  0000                     # 5734 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   326                           ADRESL equ 0FC3h ;# 
   327  0000                     # 5741 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   328                           ADRESH equ 0FC4h ;# 
   329  0000                     # 5748 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   330                           SSPCON equ 0FC6h ;# 
   331  0000                     # 5753 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   332                           SSPCON1 equ 0FC6h ;# 
   333  0000                     # 5886 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   334                           SSPSTAT equ 0FC7h ;# 
   335  0000                     # 6107 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   336                           SSPADD equ 0FC8h ;# 
   337  0000                     # 6114 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   338                           SSPBUF equ 0FC9h ;# 
   339  0000                     # 6121 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   340                           T2CON equ 0FCAh ;# 
   341  0000                     # 6219 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   342                           PR2 equ 0FCBh ;# 
   343  0000                     # 6224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   344                           MEMCON equ 0FCBh ;# 
   345  0000                     # 6329 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   346                           TMR2 equ 0FCCh ;# 
   347  0000                     # 6336 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   348                           T1CON equ 0FCDh ;# 
   349  0000                     # 6448 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   350                           TMR1 equ 0FCEh ;# 
   351  0000                     # 6455 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   352                           TMR1L equ 0FCEh ;# 
   353  0000                     # 6462 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   354                           TMR1H equ 0FCFh ;# 
   355  0000                     # 6469 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   356                           RCON equ 0FD0h ;# 
   357  0000                     # 6612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   358                           WDTCON equ 0FD1h ;# 
   359  0000                     # 6639 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   360                           LVDCON equ 0FD2h ;# 
   361  0000                     # 6704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   362                           OSCCON equ 0FD3h ;# 
   363  0000                     # 6790 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   364                           T0CON equ 0FD5h ;# 
   365  0000                     # 6866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   366                           TMR0 equ 0FD6h ;# 
   367  0000                     # 6873 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   368                           TMR0L equ 0FD6h ;# 
   369  0000                     # 6880 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   370                           TMR0H equ 0FD7h ;# 
   371  0000                     # 6887 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   372                           STATUS equ 0FD8h ;# 
   373  0000                     # 6958 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   374                           FSR2 equ 0FD9h ;# 
   375  0000                     # 6965 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   376                           FSR2L equ 0FD9h ;# 
   377  0000                     # 6972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   378                           FSR2H equ 0FDAh ;# 
   379  0000                     # 6979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   380                           PLUSW2 equ 0FDBh ;# 
   381  0000                     # 6986 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   382                           PREINC2 equ 0FDCh ;# 
   383  0000                     # 6993 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   384                           POSTDEC2 equ 0FDDh ;# 
   385  0000                     # 7000 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   386                           POSTINC2 equ 0FDEh ;# 
   387  0000                     # 7007 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   388                           INDF2 equ 0FDFh ;# 
   389  0000                     # 7014 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   390                           BSR equ 0FE0h ;# 
   391  0000                     # 7021 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   392                           FSR1 equ 0FE1h ;# 
   393  0000                     # 7028 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   394                           FSR1L equ 0FE1h ;# 
   395  0000                     # 7035 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   396                           FSR1H equ 0FE2h ;# 
   397  0000                     # 7042 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   398                           PLUSW1 equ 0FE3h ;# 
   399  0000                     # 7049 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   400                           PREINC1 equ 0FE4h ;# 
   401  0000                     # 7056 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   402                           POSTDEC1 equ 0FE5h ;# 
   403  0000                     # 7063 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   404                           POSTINC1 equ 0FE6h ;# 
   405  0000                     # 7070 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   406                           INDF1 equ 0FE7h ;# 
   407  0000                     # 7077 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   408                           WREG equ 0FE8h ;# 
   409  0000                     # 7084 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   410                           FSR0 equ 0FE9h ;# 
   411  0000                     # 7091 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   412                           FSR0L equ 0FE9h ;# 
   413  0000                     # 7098 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   414                           FSR0H equ 0FEAh ;# 
   415  0000                     # 7105 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   416                           PLUSW0 equ 0FEBh ;# 
   417  0000                     # 7112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   418                           PREINC0 equ 0FECh ;# 
   419  0000                     # 7119 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   420                           POSTDEC0 equ 0FEDh ;# 
   421  0000                     # 7126 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   422                           POSTINC0 equ 0FEEh ;# 
   423  0000                     # 7133 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   424                           INDF0 equ 0FEFh ;# 
   425  0000                     # 7140 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   426                           INTCON3 equ 0FF0h ;# 
   427  0000                     # 7232 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   428                           INTCON2 equ 0FF1h ;# 
   429  0000                     # 7309 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   430                           INTCON equ 0FF2h ;# 
   431  0000                     # 7426 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   432                           PROD equ 0FF3h ;# 
   433  0000                     # 7433 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   434                           PRODL equ 0FF3h ;# 
   435  0000                     # 7440 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   436                           PRODH equ 0FF4h ;# 
   437  0000                     # 7447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   438                           TABLAT equ 0FF5h ;# 
   439  0000                     # 7456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   440                           TBLPTR equ 0FF6h ;# 
   441  0000                     # 7463 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   442                           TBLPTRL equ 0FF6h ;# 
   443  0000                     # 7470 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   444                           TBLPTRH equ 0FF7h ;# 
   445  0000                     # 7477 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   446                           TBLPTRU equ 0FF8h ;# 
   447  0000                     # 7486 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   448                           PCLAT equ 0FF9h ;# 
   449  0000                     # 7493 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   450                           PC equ 0FF9h ;# 
   451  0000                     # 7500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   452                           PCL equ 0FF9h ;# 
   453  0000                     # 7507 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   454                           PCLATH equ 0FFAh ;# 
   455  0000                     # 7514 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   456                           PCLATU equ 0FFBh ;# 
   457  0000                     # 7521 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   458                           STKPTR equ 0FFCh ;# 
   459  0000                     # 7595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   460                           TOS equ 0FFDh ;# 
   461  0000                     # 7602 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   462                           TOSL equ 0FFDh ;# 
   463  0000                     # 7609 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   464                           TOSH equ 0FFEh ;# 
   465  0000                     # 7616 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   466                           TOSU equ 0FFFh ;# 
   467  0000                     	FNCALL	_main,_angleToCounts
   468                           	FNCALL	_main,_calculatePWM
   469                           	FNCALL	_main,_init_I2C
   470                           	FNCALL	_main,_init_ISR
   471                           	FNCALL	_main,_init_PWM
   472                           	FNCALL	_main,_init_QEI
   473                           	FNCALL	_main,_init_TMR1
   474                           	FNCALL	_main,_init_UART
   475                           	FNCALL	_main,_init_VNHIO
   476                           	FNCALL	_main,_int2char
   477                           	FNCALL	_main,_write_PWM
   478                           	FNCALL	_int2char,___lwdiv
   479                           	FNCALL	_int2char,___lwmod
   480                           	FNCALL	_init_PWM,_write_PWM
   481                           	FNCALL	_calculatePWM,___aldiv
   482                           	FNCALL	_calculatePWM,___lmul
   483                           	FNCALL	_calculatePWM,___wmul
   484                           	FNCALL	_angleToCounts,___awdiv
   485                           	FNCALL	_angleToCounts,___awmod
   486                           	FNCALL	_angleToCounts,___lldiv
   487                           	FNCALL	_angleToCounts,___lmul
   488                           	FNROOT	_main
   489                           	FNCALL	intlevel2,_ISR_high
   490                           	global	intlevel2
   491                           	FNROOT	intlevel2
   492                           	global	_PID
   493                           	global	_velocity
   494                           	global	_volt
   495                           	global	_suma_error
   496                           	global	_string_pos
   497                           	global	_error_ant
   498                           	global	_error
   499                           	global	_i2cData
   500                           	global	_cursor
   501                           	global	_GPREG
   502                           	global	int2char@string
   503                           	global	_pos
   504                           psect	nvCOMRAM,class=COMRAM,space=1,noexec
   505                           global __pnvCOMRAM
   506                           __pnvCOMRAM:
   507  000056                     	global	_pos
   508                           _pos:
   509  000056                            ds      2
   510  000056                     	global	_ref_pos
   511                           	global	_ref_pos
   512                           _ref_pos:
   513  000058                            ds      2
   514  000058                     	global	_MAXCNTH
   515                           _MAXCNTH	set	0xF65
   516  0000                     	global	_MAXCNTL
   517                           _MAXCNTL	set	0xF64
   518  0000                     	global	_POSCNTL
   519                           _POSCNTL	set	0xF66
   520  0000                     	global	_POSCNTH
   521                           _POSCNTH	set	0xF67
   522  0000                     	global	_TRISC4
   523                           _TRISC4	set	0x7CA4
   524  0000                     	global	_TRISC5
   525                           _TRISC5	set	0x7CA5
   526  0000                     	global	_TRISC6
   527                           _TRISC6	set	0x7CA6
   528  0000                     	global	_TRISA5
   529                           _TRISA5	set	0x7C95
   530  0000                     	global	_TRISA4
   531                           _TRISA4	set	0x7C94
   532  0000                     	global	_LATC2
   533                           _LATC2	set	0x7C5A
   534  0000                     	global	_TRISC2
   535                           _TRISC2	set	0x7CA2
   536  0000                     	global	_TRISA1
   537                           _TRISA1	set	0x7C91
   538  0000                     	global	_TRISA0
   539                           _TRISA0	set	0x7C90
   540  0000                     	global	_LATA1
   541                           _LATA1	set	0x7C49
   542  0000                     	global	_LATA0
   543                           _LATA0	set	0x7C48
   544  0000                     	global	_TMR1
   545                           _TMR1	set	0xFCE
   546  0000                     	global	_SSPCON
   547                           _SSPCON	set	0xFC6
   548  0000                     	global	_SPBRG
   549                           _SPBRG	set	0xFAF
   550  0000                     	global	_BAUDCON
   551                           _BAUDCON	set	0xFAA
   552  0000                     	global	_RCSTA
   553                           _RCSTA	set	0xFAB
   554  0000                     	global	_TXSTA
   555                           _TXSTA	set	0xFAC
   556  0000                     	global	_QEICON
   557                           _QEICON	set	0xFB6
   558  0000                     	global	_CCPR1L
   559                           _CCPR1L	set	0xFBE
   560  0000                     	global	_CCP1CONbits
   561                           _CCP1CONbits	set	0xFBD
   562  0000                     	global	_PR2
   563                           _PR2	set	0xFCB
   564  0000                     	global	_T2CON
   565                           _T2CON	set	0xFCA
   566  0000                     	global	_CCP1CON
   567                           _CCP1CON	set	0xFBD
   568  0000                     	global	_ANSEL1
   569                           _ANSEL1	set	0xFB9
   570  0000                     	global	_ANSEL0
   571                           _ANSEL0	set	0xFB8
   572  0000                     	global	_T1CON
   573                           _T1CON	set	0xFCD
   574  0000                     	global	_OSCCON
   575                           _OSCCON	set	0xFD3
   576  0000                     	global	_TXREG
   577                           _TXREG	set	0xFAD
   578  0000                     	global	_SSPADD
   579                           _SSPADD	set	0xFC8
   580  0000                     	global	_SSPBUF
   581                           _SSPBUF	set	0xFC9
   582  0000                     	global	_IPEN
   583                           _IPEN	set	0x7E87
   584  0000                     	global	_TXIP
   585                           _TXIP	set	0x7CFC
   586  0000                     	global	_SSPIP
   587                           _SSPIP	set	0x7CFB
   588  0000                     	global	_TMR1IP
   589                           _TMR1IP	set	0x7CF8
   590  0000                     	global	_TXIF
   591                           _TXIF	set	0x7CF4
   592  0000                     	global	_TXIE
   593                           _TXIE	set	0x7CEC
   594  0000                     	global	_TMR1ON
   595                           _TMR1ON	set	0x7E68
   596  0000                     	global	_TMR1IF
   597                           _TMR1IF	set	0x7CF0
   598  0000                     	global	_TMR1IE
   599                           _TMR1IE	set	0x7CE8
   600  0000                     	global	_BF
   601                           _BF	set	0x7E38
   602  0000                     	global	_CKP
   603                           _CKP	set	0x7E34
   604  0000                     	global	_WCOL
   605                           _WCOL	set	0x7E37
   606  0000                     	global	_SSPOV
   607                           _SSPOV	set	0x7E36
   608  0000                     	global	_SSPIF
   609                           _SSPIF	set	0x7CF3
   610  0000                     	global	_SSPIE
   611                           _SSPIE	set	0x7CEB
   612  0000                     	global	_GIE
   613                           _GIE	set	0x7F97
   614  0000                     ; #config settings
   615                           global __CFG_OSC$RC
   616                           __CFG_OSC$RC equ 0x0
   617  0000                     global __CFG_FCMEN$ON
   618                           __CFG_FCMEN$ON equ 0x0
   619  0000                     global __CFG_IESO$ON
   620                           __CFG_IESO$ON equ 0x0
   621  0000                     global __CFG_PWRTEN$OFF
   622                           __CFG_PWRTEN$OFF equ 0x0
   623  0000                     global __CFG_BOREN$ON
   624                           __CFG_BOREN$ON equ 0x0
   625  0000                     global __CFG_WDTEN$OFF
   626                           __CFG_WDTEN$OFF equ 0x0
   627  0000                     global __CFG_WDPS$32768
   628                           __CFG_WDPS$32768 equ 0x0
   629  0000                     global __CFG_WINEN$OFF
   630                           __CFG_WINEN$OFF equ 0x0
   631  0000                     global __CFG_PWMPIN$OFF
   632                           __CFG_PWMPIN$OFF equ 0x0
   633  0000                     global __CFG_LPOL$HIGH
   634                           __CFG_LPOL$HIGH equ 0x0
   635  0000                     global __CFG_HPOL$HIGH
   636                           __CFG_HPOL$HIGH equ 0x0
   637  0000                     global __CFG_T1OSCMX$ON
   638                           __CFG_T1OSCMX$ON equ 0x0
   639  0000                     global __CFG_FLTAMX$RC1
   640                           __CFG_FLTAMX$RC1 equ 0x0
   641  0000                     global __CFG_SSPMX$RD1
   642                           __CFG_SSPMX$RD1 equ 0x0
   643  0000                     global __CFG_PWM4MX$RB5
   644                           __CFG_PWM4MX$RB5 equ 0x0
   645  0000                     global __CFG_EXCLKMX$RC3
   646                           __CFG_EXCLKMX$RC3 equ 0x0
   647  0000                     global __CFG_MCLRE$ON
   648                           __CFG_MCLRE$ON equ 0x0
   649  0000                     global __CFG_STVREN$ON
   650                           __CFG_STVREN$ON equ 0x0
   651  0000                     global __CFG_LVP$OFF
   652                           __CFG_LVP$OFF equ 0x0
   653  0000                     global __CFG_CP0$OFF
   654                           __CFG_CP0$OFF equ 0x0
   655  0000                     global __CFG_CP1$OFF
   656                           __CFG_CP1$OFF equ 0x0
   657  0000                     global __CFG_CP2$OFF
   658                           __CFG_CP2$OFF equ 0x0
   659  0000                     global __CFG_CP3$OFF
   660                           __CFG_CP3$OFF equ 0x0
   661  0000                     global __CFG_CPB$OFF
   662                           __CFG_CPB$OFF equ 0x0
   663  0000                     global __CFG_CPD$OFF
   664                           __CFG_CPD$OFF equ 0x0
   665  0000                     global __CFG_WRT0$OFF
   666                           __CFG_WRT0$OFF equ 0x0
   667  0000                     global __CFG_WRT1$OFF
   668                           __CFG_WRT1$OFF equ 0x0
   669  0000                     global __CFG_WRT2$OFF
   670                           __CFG_WRT2$OFF equ 0x0
   671  0000                     global __CFG_WRT3$OFF
   672                           __CFG_WRT3$OFF equ 0x0
   673  0000                     global __CFG_WRTC$OFF
   674                           __CFG_WRTC$OFF equ 0x0
   675  0000                     global __CFG_WRTB$OFF
   676                           __CFG_WRTB$OFF equ 0x0
   677  0000                     global __CFG_WRTD$OFF
   678                           __CFG_WRTD$OFF equ 0x0
   679  0000                     global __CFG_EBTR0$OFF
   680                           __CFG_EBTR0$OFF equ 0x0
   681  0000                     global __CFG_EBTR1$OFF
   682                           __CFG_EBTR1$OFF equ 0x0
   683  0000                     global __CFG_EBTR2$OFF
   684                           __CFG_EBTR2$OFF equ 0x0
   685  0000                     global __CFG_EBTR3$OFF
   686                           __CFG_EBTR3$OFF equ 0x0
   687  0000                     global __CFG_EBTRB$OFF
   688                           __CFG_EBTRB$OFF equ 0x0
   689  0000                     	file	"C:\Users\MarioVL\AppData\Local\Temp\sboc."
   690                           	line	#
   691                           psect	cinit,class=CODE,delta=1,reloc=2
   692                           global __pcinit
   693                           __pcinit:
   694  000BE4                     global start_initialization
   695                           start_initialization:
   696  000BE4                     
   697                           global __initialization
   698                           __initialization:
   699  000BE4                     psect	bssCOMRAM,class=COMRAM,space=1,noexec
   700                           global __pbssCOMRAM
   701                           __pbssCOMRAM:
   702  00002E                     	global	_PID
   703                           _PID:
   704  00002E                            ds      12
   705  00002E                     	global	_velocity
   706                           _velocity:
   707  00003A                            ds      4
   708  00003A                     	global	_volt
   709                           _volt:
   710  00003E                            ds      4
   711  00003E                     	global	_suma_error
   712                           _suma_error:
   713  000042                            ds      4
   714  000042                     	global	_string_pos
   715                           _string_pos:
   716  000046                            ds      2
   717  000046                     	global	_pos_ant
   718                           	global	_pos_ant
   719                           _pos_ant:
   720  000048                            ds      2
   721  000048                     	global	_error_ant
   722                           _error_ant:
   723  00004A                            ds      2
   724  00004A                     	global	_error
   725                           _error:
   726  00004C                            ds      2
   727  00004C                     	global	_i2cData
   728                           _i2cData:
   729  00004E                            ds      1
   730  00004E                     	global	_cursor
   731                           _cursor:
   732  00004F                            ds      1
   733  00004F                     	global	_GPREG
   734                           _GPREG:
   735  000050                            ds      1
   736  000050                     int2char@string:
   737  000051                            ds      5
   738  000051                     	file	"C:\Users\MarioVL\AppData\Local\Temp\sboc."
   739                           	line	#
   740                           psect	cinit
   741                           ; Clear objects allocated to COMRAM (40 bytes)
   742                           	global __pbssCOMRAM
   743                           lfsr	0,__pbssCOMRAM
   744  000BE4  EE00  F02E         movlw	40
   745  000BE8  0E28               clear_0:
   746  000BEA                     clrf	postinc0,c
   747  000BEA  6AEE               decf	wreg
   748  000BEC  06E8               bnz	clear_0
   749  000BEE  E1FD               psect cinit,class=CODE,delta=1
   750                           global end_of_initialization,__end_of__initialization
   751                           
   752                           ;End of C runtime variable initialization code
   753                           
   754                           end_of_initialization:
   755  000BF0                     __end_of__initialization:
   756  000BF0                     	bcf int$flags,0,c ;clear compiler interrupt flag (level 1)
   757  000BF0  905A               	bcf int$flags,1,c ;clear compiler interrupt flag (level 2)
   758  000BF2  925A               movlb 0
   759  000BF4  0100               goto _main	;jump to C main() function
   760  000BF6  EFF4  F003         psect	cstackCOMRAM,class=COMRAM,space=1,noexec
   761                           global __pcstackCOMRAM
   762                           __pcstackCOMRAM:
   763  000001                     ?_init_VNHIO:	; 1 bytes @ 0x0
   764  000001                     ?_init_I2C:	; 1 bytes @ 0x0
   765  000001                     ?_init_TMR1:	; 1 bytes @ 0x0
   766  000001                     ?_init_PWM:	; 1 bytes @ 0x0
   767  000001                     ?_init_QEI:	; 1 bytes @ 0x0
   768  000001                     ?_init_UART:	; 1 bytes @ 0x0
   769  000001                     ?_init_ISR:	; 1 bytes @ 0x0
   770  000001                     ?_ISR_high:	; 1 bytes @ 0x0
   771  000001                     ??_ISR_high:	; 1 bytes @ 0x0
   772  000001                     ?_main:	; 1 bytes @ 0x0
   773  000001                     calculatePWM@setpoint:	; 1 bytes @ 0x0
   774  000001                     	ds   4
   775  000001                     ??_init_VNHIO:	; 1 bytes @ 0x4
   776  000005                     ??_init_I2C:	; 1 bytes @ 0x4
   777  000005                     ??_init_TMR1:	; 1 bytes @ 0x4
   778  000005                     ??_init_QEI:	; 1 bytes @ 0x4
   779  000005                     ??_init_UART:	; 1 bytes @ 0x4
   780  000005                     ??_init_ISR:	; 1 bytes @ 0x4
   781  000005                     	global	?___wmul
   782                           ?___wmul:	; 2 bytes @ 0x4
   783  000005                     	global	?___awdiv
   784                           ?___awdiv:	; 2 bytes @ 0x4
   785  000005                     	global	?___awmod
   786                           ?___awmod:	; 2 bytes @ 0x4
   787  000005                     	global	?___lwdiv
   788                           ?___lwdiv:	; 2 bytes @ 0x4
   789  000005                     	global	?___lwmod
   790                           ?___lwmod:	; 2 bytes @ 0x4
   791  000005                     	global	?___lmul
   792                           ?___lmul:	; 4 bytes @ 0x4
   793  000005                     	global	___wmul@multiplier
   794                           ___wmul@multiplier:	; 2 bytes @ 0x4
   795  000005                     	global	___awdiv@dividend
   796                           ___awdiv@dividend:	; 2 bytes @ 0x4
   797  000005                     	global	___awmod@dividend
   798                           ___awmod@dividend:	; 2 bytes @ 0x4
   799  000005                     	global	___lwdiv@dividend
   800                           ___lwdiv@dividend:	; 2 bytes @ 0x4
   801  000005                     	global	___lwmod@dividend
   802                           ___lwmod@dividend:	; 2 bytes @ 0x4
   803  000005                     	global	___lmul@multiplier
   804                           ___lmul@multiplier:	; 4 bytes @ 0x4
   805  000005                     	ds   2
   806  000005                     	global	___wmul@multiplicand
   807                           ___wmul@multiplicand:	; 2 bytes @ 0x6
   808  000007                     	global	___awdiv@divisor
   809                           ___awdiv@divisor:	; 2 bytes @ 0x6
   810  000007                     	global	___awmod@divisor
   811                           ___awmod@divisor:	; 2 bytes @ 0x6
   812  000007                     	global	___lwdiv@divisor
   813                           ___lwdiv@divisor:	; 2 bytes @ 0x6
   814  000007                     	global	___lwmod@divisor
   815                           ___lwmod@divisor:	; 2 bytes @ 0x6
   816  000007                     	ds   2
   817  000007                     ??___wmul:	; 1 bytes @ 0x8
   818  000009                     ??___awdiv:	; 1 bytes @ 0x8
   819  000009                     ??___awmod:	; 1 bytes @ 0x8
   820  000009                     ??___lwdiv:	; 1 bytes @ 0x8
   821  000009                     ??___lwmod:	; 1 bytes @ 0x8
   822  000009                     	global	___awdiv@counter
   823                           ___awdiv@counter:	; 1 bytes @ 0x8
   824  000009                     	global	___awmod@counter
   825                           ___awmod@counter:	; 1 bytes @ 0x8
   826  000009                     	global	___lwmod@counter
   827                           ___lwmod@counter:	; 1 bytes @ 0x8
   828  000009                     	global	___wmul@product
   829                           ___wmul@product:	; 2 bytes @ 0x8
   830  000009                     	global	___lwdiv@quotient
   831                           ___lwdiv@quotient:	; 2 bytes @ 0x8
   832  000009                     	global	___lmul@multiplicand
   833                           ___lmul@multiplicand:	; 4 bytes @ 0x8
   834  000009                     	ds   1
   835  000009                     	global	___awdiv@sign
   836                           ___awdiv@sign:	; 1 bytes @ 0x9
   837  00000A                     	global	___awmod@sign
   838                           ___awmod@sign:	; 1 bytes @ 0x9
   839  00000A                     	ds   1
   840  00000A                     	global	___lwdiv@counter
   841                           ___lwdiv@counter:	; 1 bytes @ 0xA
   842  00000B                     	global	___awdiv@quotient
   843                           ___awdiv@quotient:	; 2 bytes @ 0xA
   844  00000B                     	ds   1
   845  00000B                     	global	?_int2char
   846                           ?_int2char:	; 2 bytes @ 0xB
   847  00000C                     	global	int2char@number
   848                           int2char@number:	; 2 bytes @ 0xB
   849  00000C                     	ds   1
   850  00000C                     ??___lmul:	; 1 bytes @ 0xC
   851  00000D                     	global	___lmul@product
   852                           ___lmul@product:	; 4 bytes @ 0xC
   853  00000D                     	ds   1
   854  00000D                     ??_int2char:	; 1 bytes @ 0xD
   855  00000E                     	global	int2char@num
   856                           int2char@num:	; 2 bytes @ 0xD
   857  00000E                     	ds   2
   858  00000E                     	global	int2char@digit
   859                           int2char@digit:	; 1 bytes @ 0xF
   860  000010                     	ds   1
   861  000010                     	global	?___lldiv
   862                           ?___lldiv:	; 4 bytes @ 0x10
   863  000011                     	global	?___aldiv
   864                           ?___aldiv:	; 4 bytes @ 0x10
   865  000011                     	global	___lldiv@dividend
   866                           ___lldiv@dividend:	; 4 bytes @ 0x10
   867  000011                     	global	___aldiv@dividend
   868                           ___aldiv@dividend:	; 4 bytes @ 0x10
   869  000011                     	ds   4
   870  000011                     	global	___lldiv@divisor
   871                           ___lldiv@divisor:	; 4 bytes @ 0x14
   872  000015                     	global	___aldiv@divisor
   873                           ___aldiv@divisor:	; 4 bytes @ 0x14
   874  000015                     	ds   4
   875  000015                     ??___lldiv:	; 1 bytes @ 0x18
   876  000019                     ??___aldiv:	; 1 bytes @ 0x18
   877  000019                     	global	___aldiv@counter
   878                           ___aldiv@counter:	; 1 bytes @ 0x18
   879  000019                     	global	___lldiv@quotient
   880                           ___lldiv@quotient:	; 4 bytes @ 0x18
   881  000019                     	ds   1
   882  000019                     	global	___aldiv@sign
   883                           ___aldiv@sign:	; 1 bytes @ 0x19
   884  00001A                     	ds   1
   885  00001A                     	global	___aldiv@quotient
   886                           ___aldiv@quotient:	; 4 bytes @ 0x1A
   887  00001B                     	ds   2
   888  00001B                     	global	___lldiv@counter
   889                           ___lldiv@counter:	; 1 bytes @ 0x1C
   890  00001D                     	ds   1
   891  00001D                     	global	?_angleToCounts
   892                           ?_angleToCounts:	; 2 bytes @ 0x1D
   893  00001E                     	ds   1
   894  00001E                     	global	?_calculatePWM
   895                           ?_calculatePWM:	; 4 bytes @ 0x1E
   896  00001F                     	ds   1
   897  00001F                     ??_angleToCounts:	; 1 bytes @ 0x1F
   898  000020                     	ds   2
   899  000020                     	global	angleToCounts@angle
   900                           angleToCounts@angle:	; 1 bytes @ 0x21
   901  000022                     	ds   1
   902  000022                     ??_calculatePWM:	; 1 bytes @ 0x22
   903  000023                     	global	angleToCounts@data
   904                           angleToCounts@data:	; 1 bytes @ 0x22
   905  000023                     	ds   1
   906  000023                     	global	angleToCounts@counts
   907                           angleToCounts@counts:	; 2 bytes @ 0x23
   908  000024                     	ds   7
   909  000024                     ?_write_PWM:	; 1 bytes @ 0x2A
   910  00002B                     	global	write_PWM@dutyCycle
   911                           write_PWM@dutyCycle:	; 2 bytes @ 0x2A
   912  00002B                     	ds   2
   913  00002B                     ??_write_PWM:	; 1 bytes @ 0x2C
   914  00002D                     	ds   1
   915  00002D                     ??_init_PWM:	; 1 bytes @ 0x2D
   916  00002E                     ??_main:	; 1 bytes @ 0x2D
   917  00002E                     ;!
   918                           ;!Data Sizes:
   919                           ;!    Strings     0
   920                           ;!    Constant    0
   921                           ;!    Data        0
   922                           ;!    BSS         40
   923                           ;!    Persistent  4
   924                           ;!    Stack       0
   925                           ;!
   926                           ;!Auto Spaces:
   927                           ;!    Space          Size  Autos    Used
   928                           ;!    COMRAM           94     45      89
   929                           ;!    BANK0           160      0       0
   930                           ;!    BANK1           256      0       0
   931                           ;!    BANK2           244      0       0
   932                           
   933                           ;!
   934                           ;!Pointer List with Targets:
   935                           ;!
   936                           ;!    sp__int2char	PTR unsigned char  size(2) Largest target is 5
   937                           ;!		 -> int2char@string(COMRAM[5]), 
   938                           ;!
   939                           ;!    string_pos	PTR unsigned char  size(2) Largest target is 5
   940                           ;!		 -> NULL(NULL[0]), int2char@string(COMRAM[5]), 
   941                           ;!
   942                           
   943                           
   944                           ;!
   945                           ;!Critical Paths under _main in COMRAM
   946                           ;!
   947                           ;!    _main->_write_PWM
   948                           ;!    _int2char->___lwdiv
   949                           ;!    _init_PWM->_write_PWM
   950                           ;!    _write_PWM->_calculatePWM
   951                           ;!    _calculatePWM->___aldiv
   952                           ;!    ___aldiv->___lmul
   953                           ;!    _angleToCounts->___lldiv
   954                           ;!    ___lldiv->___lmul
   955                           ;!
   956                           ;!Critical Paths under _ISR_high in COMRAM
   957                           ;!
   958                           ;!    None.
   959                           ;!
   960                           ;!Critical Paths under _main in BANK0
   961                           ;!
   962                           ;!    None.
   963                           ;!
   964                           ;!Critical Paths under _ISR_high in BANK0
   965                           ;!
   966                           ;!    None.
   967                           ;!
   968                           ;!Critical Paths under _main in BANK1
   969                           ;!
   970                           ;!    None.
   971                           ;!
   972                           ;!Critical Paths under _ISR_high in BANK1
   973                           ;!
   974                           ;!    None.
   975                           ;!
   976                           ;!Critical Paths under _main in BANK2
   977                           ;!
   978                           ;!    None.
   979                           ;!
   980                           ;!Critical Paths under _ISR_high in BANK2
   981                           ;!
   982                           ;!    None.
   983                           
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   986 ;;
   987                           
   988                           ;!
   989                           ;!Call Graph Tables:
   990                           ;!
   991                           ;! ---------------------------------------------------------------------------------
   992                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   993                           ;! ---------------------------------------------------------------------------------
   994                           ;! (0) _main                                                 0     0      0    5909
   995                           ;!                      _angleToCounts
   996                           ;!                       _calculatePWM
   997                           ;!                           _init_I2C
   998                           ;!                           _init_ISR
   999                           ;!                           _init_PWM
  1000                           ;!                           _init_QEI
  1001                           ;!                          _init_TMR1
  1002                           ;!                          _init_UART
  1003                           ;!                         _init_VNHIO
  1004                           ;!                           _int2char
  1005                           ;!                          _write_PWM
  1006                           ;! ---------------------------------------------------------------------------------
  1007                           ;! (1) _int2char                                             5     3      2     815
  1008                           ;!                                             11 COMRAM     5     3      2
  1009                           ;!                            ___lwdiv
  1010                           ;!                            ___lwmod
  1011                           ;! ---------------------------------------------------------------------------------
  1012                           ;! (2) ___lwmod                                              5     1      4     311
  1013                           ;!                                              4 COMRAM     5     1      4
  1014                           ;! ---------------------------------------------------------------------------------
  1015                           ;! (2) ___lwdiv                                              7     3      4     314
  1016                           ;!                                              4 COMRAM     7     3      4
  1017                           ;! ---------------------------------------------------------------------------------
  1018                           ;! (1) _init_VNHIO                                           0     0      0       0
  1019                           ;! ---------------------------------------------------------------------------------
  1020                           ;! (1) _init_UART                                            0     0      0       0
  1021                           ;! ---------------------------------------------------------------------------------
  1022                           ;! (1) _init_TMR1                                            0     0      0       0
  1023                           ;! ---------------------------------------------------------------------------------
  1024                           ;! (1) _init_QEI                                             0     0      0       0
  1025                           ;! ---------------------------------------------------------------------------------
  1026                           ;! (1) _init_PWM                                             0     0      0     197
  1027                           ;!                          _write_PWM
  1028                           ;! ---------------------------------------------------------------------------------
  1029                           ;! (1) _write_PWM                                            3     1      2     197
  1030                           ;!                                             42 COMRAM     3     1      2
  1031                           ;!                       _calculatePWM (ARG)
  1032                           ;! ---------------------------------------------------------------------------------
  1033                           ;! (1) _init_ISR                                             0     0      0       0
  1034                           ;! ---------------------------------------------------------------------------------
  1035                           ;! (1) _init_I2C                                             0     0      0       0
  1036                           ;! ---------------------------------------------------------------------------------
  1037                           ;! (1) _calculatePWM                                        13     9      4    2197
  1038                           ;!                                             30 COMRAM    12     8      4
  1039                           ;!                            ___aldiv
  1040                           ;!                             ___lmul
  1041                           ;!                             ___wmul
  1042                           ;! ---------------------------------------------------------------------------------
  1043                           ;! (2) ___wmul                                               6     2      4     311
  1044                           ;!                                              4 COMRAM     6     2      4
  1045                           ;! ---------------------------------------------------------------------------------
  1046                           ;! (2) ___aldiv                                             14     6      8     756
  1047                           ;!                                             16 COMRAM    14     6      8
  1048                           ;!                             ___lmul (ARG)
  1049                           ;! ---------------------------------------------------------------------------------
  1050                           ;! (1) _angleToCounts                                        8     6      2    2503
  1051                           ;!                                             29 COMRAM     8     6      2
  1052                           ;!                            ___awdiv
  1053                           ;!                            ___awmod
  1054                           ;!                            ___lldiv
  1055                           ;!                             ___lmul
  1056                           ;! ---------------------------------------------------------------------------------
  1057                           ;! (2) ___lmul                                              12     4      8    1130
  1058                           ;!                                              4 COMRAM    12     4      8
  1059                           ;! ---------------------------------------------------------------------------------
  1060                           ;! (2) ___lldiv                                             13     5      8     314
  1061                           ;!                                             16 COMRAM    13     5      8
  1062                           ;!                             ___lmul (ARG)
  1063                           ;! ---------------------------------------------------------------------------------
  1064                           ;! (2) ___awmod                                              6     2      4     448
  1065                           ;!                                              4 COMRAM     6     2      4
  1066                           ;! ---------------------------------------------------------------------------------
  1067                           ;! (2) ___awdiv                                              8     4      4     452
  1068                           ;!                                              4 COMRAM     8     4      4
  1069                           ;! ---------------------------------------------------------------------------------
  1070                           ;! Estimated maximum stack depth 2
  1071                           ;! ---------------------------------------------------------------------------------
  1072                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1073                           ;! ---------------------------------------------------------------------------------
  1074                           ;! (3) _ISR_high                                             4     4      0       0
  1075                           ;!                                              0 COMRAM     4     4      0
  1076                           ;! ---------------------------------------------------------------------------------
  1077                           ;! Estimated maximum stack depth 3
  1078                           ;! ---------------------------------------------------------------------------------
  1079                           ;!
  1080                           ;! Call Graph Graphs:
  1081                           ;!
  1082                           ;! _main (ROOT)
  1083                           ;!   _angleToCounts
  1084                           ;!     ___awdiv
  1085                           ;!     ___awmod
  1086                           ;!     ___lldiv
  1087                           ;!       ___lmul (ARG)
  1088                           ;!     ___lmul
  1089                           ;!   _calculatePWM
  1090                           ;!     ___aldiv
  1091                           ;!       ___lmul (ARG)
  1092                           ;!     ___lmul
  1093                           ;!     ___wmul
  1094                           ;!   _init_I2C
  1095                           ;!   _init_ISR
  1096                           ;!   _init_PWM
  1097                           ;!     _write_PWM
  1098                           ;!       _calculatePWM (ARG)
  1099                           ;!         ___aldiv
  1100                           ;!           ___lmul (ARG)
  1101                           ;!         ___lmul
  1102                           ;!         ___wmul
  1103                           ;!   _init_QEI
  1104                           ;!   _init_TMR1
  1105                           ;!   _init_UART
  1106                           ;!   _init_VNHIO
  1107                           ;!   _int2char
  1108                           ;!     ___lwdiv
  1109                           ;!     ___lwmod
  1110                           ;!   _write_PWM
  1111                           ;!     _calculatePWM (ARG)
  1112                           ;!       ___aldiv
  1113                           ;!         ___lmul (ARG)
  1114                           ;!       ___lmul
  1115                           ;!       ___wmul
  1116                           ;!
  1117                           ;! _ISR_high (ROOT)
  1118                           ;!
  1119                           
  1120                           ;! Address spaces:
  1121                           
  1122                           ;!Name               Size   Autos  Total    Cost      Usage
  1123                           ;!BIGRAM             2F3      0       0      10        0.0%
  1124                           ;!EEDATA             100      0       0       0        0.0%
  1125                           ;!BITBANK1           100      0       0       6        0.0%
  1126                           ;!BANK1              100      0       0       7        0.0%
  1127                           ;!BITBANK2            F4      0       0       8        0.0%
  1128                           ;!BANK2               F4      0       0       9        0.0%
  1129                           ;!BITBANK0            A0      0       0       3        0.0%
  1130                           ;!BANK0               A0      0       0       4        0.0%
  1131                           ;!BITCOMRAM           5E      0       0       0        0.0%
  1132                           ;!COMRAM              5E     2D      59       1       94.7%
  1133                           ;!BITSFR_5             0      0       0     200        0.0%
  1134                           ;!SFR_5                0      0       0     200        0.0%
  1135                           ;!BITSFR_4             0      0       0     200        0.0%
  1136                           ;!SFR_4                0      0       0     200        0.0%
  1137                           ;!BITSFR_3             0      0       0     200        0.0%
  1138                           ;!SFR_3                0      0       0     200        0.0%
  1139                           ;!BITSFR_2             0      0       0     200        0.0%
  1140                           ;!SFR_2                0      0       0     200        0.0%
  1141                           ;!BITSFR_1             0      0       0     200        0.0%
  1142                           ;!SFR_1                0      0       0     200        0.0%
  1143                           ;!BITSFR               0      0       0     200        0.0%
  1144                           ;!SFR                  0      0       0     200        0.0%
  1145                           ;!STACK                0      0       0       2        0.0%
  1146                           ;!NULL                 0      0       0       0        0.0%
  1147                           ;!ABS                  0      0      59       5        0.0%
  1148                           ;!DATA                 0      0      59      11        0.0%
  1149                           ;!CODE                 0      0       0       0        0.0%
  1150                           
  1151                           	global	_main
  1152                           
  1153 ;; *************** function _main *****************
  1154 ;; Defined at:
  1155 ;;		line 125 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1169 ;;      Params:         0       0       0       0
  1170 ;;      Locals:         0       0       0       0
  1171 ;;      Temps:          0       0       0       0
  1172 ;;      Totals:         0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels required when called:    3
  1175 ;; This function calls:
  1176 ;;		_angleToCounts
  1177 ;;		_calculatePWM
  1178 ;;		_init_I2C
  1179 ;;		_init_ISR
  1180 ;;		_init_PWM
  1181 ;;		_init_QEI
  1182 ;;		_init_TMR1
  1183 ;;		_init_UART
  1184 ;;		_init_VNHIO
  1185 ;;		_int2char
  1186 ;;		_write_PWM
  1187 ;; This function is called by:
  1188 ;;		Startup code after reset
  1189 ;; This function uses a non-reentrant model
  1190 ;;
  1191                           psect	text0,class=CODE,space=0,reloc=2,group=0
  1192                           	file	"main.c"
  1193                           	line	125
  1194                           global __ptext0
  1195                           __ptext0:
  1196  0007E8                     psect	text0
  1197                           	file	"main.c"
  1198                           	line	125
  1199                           	global	__size_of_main
  1200                           	__size_of_main	equ	__end_of_main-_main
  1201  0000                     	
  1202                           _main:
  1203  0007E8                     ;incstack = 0
  1204                           	opt	stack 28
  1205                           	line	127
  1206                           	
  1207                           l1561:
  1208  0007E8                     ;main.c: 127:     OSCCON = 0x70;
  1209                           	movlw	low(070h)
  1210  0007E8  0E70               	movwf	((c:4051)),c	;volatile
  1211  0007EA  6ED3               	line	129
  1212                           ;main.c: 129:     PID.Kp = 5310;
  1213                           	movlw	low(014BEh)
  1214  0007EC  0EBE               	movwf	((c:_PID)),c
  1215  0007EE  6E2E               	movlw	high(014BEh)
  1216  0007F0  0E14               	movwf	((c:_PID+1)),c
  1217  0007F2  6E2F               	movlw	low highword(014BEh)
  1218  0007F4  0E00               	movwf	((c:_PID+2)),c
  1219  0007F6  6E30               	movlw	high highword(014BEh)
  1220  0007F8  0E00               	movwf	((c:_PID+3)),c
  1221  0007FA  6E31               	line	130
  1222                           ;main.c: 130:     PID.Ki = 2655;
  1223                           	movlw	low(0A5Fh)
  1224  0007FC  0E5F               	movwf	(0+((c:_PID)+04h)),c
  1225  0007FE  6E32               	movlw	high(0A5Fh)
  1226  000800  0E0A               	movwf	(1+((c:_PID)+04h)),c
  1227  000802  6E33               	movlw	low highword(0A5Fh)
  1228  000804  0E00               	movwf	(2+((c:_PID)+04h)),c
  1229  000806  6E34               	movlw	high highword(0A5Fh)
  1230  000808  0E00               	movwf	(3+((c:_PID)+04h)),c
  1231  00080A  6E35               	line	131
  1232                           ;main.c: 131:     PID.Kd = 2664;
  1233                           	movlw	low(0A68h)
  1234  00080C  0E68               	movwf	(0+((c:_PID)+08h)),c
  1235  00080E  6E36               	movlw	high(0A68h)
  1236  000810  0E0A               	movwf	(1+((c:_PID)+08h)),c
  1237  000812  6E37               	movlw	low highword(0A68h)
  1238  000814  0E00               	movwf	(2+((c:_PID)+08h)),c
  1239  000816  6E38               	movlw	high highword(0A68h)
  1240  000818  0E00               	movwf	(3+((c:_PID)+08h)),c
  1241  00081A  6E39               	line	133
  1242                           	
  1243                           l1563:
  1244  00081C                     ;main.c: 133:     init_VNHIO();
  1245                           	call	_init_VNHIO	;wreg free
  1246  00081C  EC13  F006         	line	134
  1247                           	
  1248                           l1565:
  1249  000820                     ;main.c: 134:     init_I2C();
  1250                           	call	_init_I2C	;wreg free
  1251  000820  EC23  F006         	line	135
  1252                           	
  1253                           l1567:
  1254  000824                     ;main.c: 135:     init_TMR1();
  1255                           	call	_init_TMR1	;wreg free
  1256  000824  EC1C  F006         	line	136
  1257                           	
  1258                           l1569:
  1259  000828                     ;main.c: 136:     init_PWM();
  1260                           	call	_init_PWM	;wreg free
  1261  000828  ECE4  F005         	line	137
  1262                           	
  1263                           l1571:
  1264  00082C                     ;main.c: 137:     init_QEI();
  1265                           	call	_init_QEI	;wreg free
  1266  00082C  ECD3  F005         	line	138
  1267                           	
  1268                           l1573:
  1269  000830                     ;main.c: 138:     init_UART();
  1270                           	call	_init_UART	;wreg free
  1271  000830  ECFD  F005         	line	139
  1272                           	
  1273                           l1575:
  1274  000834                     ;main.c: 139:     init_ISR();
  1275                           	call	_init_ISR	;wreg free
  1276  000834  EC08  F006         	line	140
  1277                           	
  1278                           l1577:
  1279  000838                     ;main.c: 140:     GPREG.STCTRL = 1;
  1280                           	bsf	((c:_GPREG)),c,1
  1281  000838  8250               	line	142
  1282                           ;main.c: 142:     while(1)
  1283                           	
  1284                           l169:
  1285  00083A                     	line	145
  1286                           ;main.c: 143:     {;main.c: 145:         ref_pos = angleToCounts(i2cData);
  1287                           	movf	((c:_i2cData)),c,w
  1288  00083A  504E               	
  1289                           	call	_angleToCounts
  1290  00083C  EC15  F003         	movff	0+?_angleToCounts,(c:_ref_pos)
  1291  000840  C01E  F058         	movff	1+?_angleToCounts,(c:_ref_pos+1)
  1292  000844  C01F  F059         	line	147
  1293                           	
  1294                           l1579:
  1295  000848                     ;main.c: 147:         if(1 == GPREG.STCTRL)
  1296                           	btfss	((c:_GPREG)),c,1
  1297  000848  A250               	goto	u851
  1298  00084A  EF29  F004         	goto	u850
  1299  00084E  EF2B  F004         u851:
  1300  000852                     	goto	l169
  1301  000852  EF1D  F004         u850:
  1302  000856                     	line	149
  1303                           	
  1304                           l1581:
  1305  000856                     ;main.c: 148:         {;main.c: 149:             write_PWM(calculatePWM(ref_pos));
  1306                           	movf	((c:_ref_pos)),c,w
  1307  000856  5058               	
  1308                           	call	_calculatePWM
  1309  000858  ECB1  F000         	movff	0+?_calculatePWM,(c:write_PWM@dutyCycle)
  1310  00085C  C01F  F02B         	movff	1+?_calculatePWM,(c:write_PWM@dutyCycle+1)
  1311  000860  C020  F02C         	call	_write_PWM	;wreg free
  1312  000864  ECC0  F005         	line	151
  1313                           	
  1314                           l1583:
  1315  000868                     ;main.c: 151:             if(1 == GPREG.DIRCTRL)
  1316                           	btfss	((c:_GPREG)),c,0
  1317  000868  A050               	goto	u861
  1318  00086A  EF39  F004         	goto	u860
  1319  00086E  EF3B  F004         u861:
  1320  000872                     	goto	l171
  1321  000872  EF3F  F004         u860:
  1322  000876                     	line	154
  1323                           	
  1324                           l1585:
  1325  000876                     ;main.c: 152:             {;main.c: 154:                 LATA0 = 0;
  1326                           	bcf	c:(31816/8),(31816)&7	;volatile
  1327  000876  9089               	line	155
  1328                           ;main.c: 155:                 LATA1 = 1;
  1329                           	bsf	c:(31817/8),(31817)&7	;volatile
  1330  000878  8289               	line	156
  1331                           ;main.c: 156:             } else {
  1332                           	goto	l1587
  1333  00087A  EF43  F004         	
  1334                           l171:
  1335  00087E                     	line	158
  1336                           ;main.c: 158:                 LATA0 = 1;
  1337                           	bsf	c:(31816/8),(31816)&7	;volatile
  1338  00087E  8089               	line	159
  1339                           ;main.c: 159:                 LATA1 = 0;
  1340                           	bcf	c:(31817/8),(31817)&7	;volatile
  1341  000880  9289               	goto	l1587
  1342  000882  EF43  F004         	line	160
  1343                           ;main.c: 160:             }
  1344                           	
  1345                           l172:
  1346  000886                     	line	162
  1347                           	
  1348                           l1587:
  1349  000886                     ;main.c: 162:             string_pos = int2char(pos);
  1350                           	movff	(c:_pos),(c:int2char@number)
  1351  000886  C056  F00C         	movff	(c:_pos+1),(c:int2char@number+1)
  1352  00088A  C057  F00D         	call	_int2char	;wreg free
  1353  00088E  ECF8  F004         	movff	0+?_int2char,(c:_string_pos)
  1354  000892  C00C  F046         	movff	1+?_int2char,(c:_string_pos+1)
  1355  000896  C00D  F047         	line	163
  1356                           	
  1357                           l1589:
  1358  00089A                     ;main.c: 163:             TXIE = 1;
  1359                           	bsf	c:(31980/8),(31980)&7	;volatile
  1360  00089A  889D               	line	165
  1361                           	
  1362                           l1591:
  1363  00089C                     ;main.c: 165:             GPREG.STCTRL = 0;
  1364                           	bcf	((c:_GPREG)),c,1
  1365  00089C  9250               	line	166
  1366                           	
  1367                           l1593:
  1368  00089E                     ;main.c: 166:             TMR1ON = 1;
  1369                           	bsf	c:(32360/8),(32360)&7	;volatile
  1370  00089E  80CD               	goto	l169
  1371  0008A0  EF1D  F004         	line	167
  1372                           ;main.c: 167:         }
  1373                           	
  1374                           l170:
  1375  0008A4                     	goto	l169
  1376  0008A4  EF1D  F004         	line	168
  1377                           ;main.c: 168:     }
  1378                           	
  1379                           l173:
  1380  0008A8                     	goto	l169
  1381  0008A8  EF1D  F004         	
  1382                           l174:
  1383  0008AC                     	line	170
  1384                           	
  1385                           l175:
  1386  0008AC                     	global	start
  1387                           	goto	start
  1388  0008AC  EFAF  F000         	opt stack 0
  1389                           GLOBAL	__end_of_main
  1390                           	__end_of_main:
  1391  0008B0                     	signat	_main,89
  1392                           	global	_int2char
  1393                           
  1394 ;; *************** function _int2char *****************
  1395 ;; Defined at:
  1396 ;;		line 296 in file "main.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  number          2   11[COMRAM] unsigned int 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  digit           1   15[COMRAM] char 
  1401 ;;  num             2   13[COMRAM] unsigned int 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  2   11[COMRAM] PTR unsigned char 
  1404 ;; Registers used:
  1405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1411 ;;      Params:         2       0       0       0
  1412 ;;      Locals:         3       0       0       0
  1413 ;;      Temps:          0       0       0       0
  1414 ;;      Totals:         5       0       0       0
  1415 ;;Total ram usage:        5 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    2
  1418 ;; This function calls:
  1419 ;;		___lwdiv
  1420 ;;		___lwmod
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           psect	text1,class=CODE,space=0,reloc=2,group=0
  1426                           	line	296
  1427                           global __ptext1
  1428                           __ptext1:
  1429  0009F0                     psect	text1
  1430                           	file	"main.c"
  1431                           	line	296
  1432                           	global	__size_of_int2char
  1433                           	__size_of_int2char	equ	__end_of_int2char-_int2char
  1434  0000                     	
  1435                           _int2char:
  1436  0009F0                     ;incstack = 0
  1437                           	opt	stack 28
  1438                           	line	299
  1439                           	
  1440                           l1545:
  1441  0009F0                     ;main.c: 296: uint8_t * int2char(uint16_t number);main.c: 297: {;main.c: 298:     static
                                  uint8_t string[5];;main.c: 299:     uint16_t num = number;
  1442                           	movff	(c:int2char@number),(c:int2char@num)
  1443  0009F0  C00C  F00E         	movff	(c:int2char@number+1),(c:int2char@num+1)
  1444  0009F4  C00D  F00F         	line	301
  1445                           	
  1446                           l1547:
  1447  0009F8                     ;main.c: 301:     for(int8_t digit = 4; 0 <= digit; digit--)
  1448                           	movlw	low(04h)
  1449  0009F8  0E04               	movwf	((c:int2char@digit)),c
  1450  0009FA  6E10               	goto	l1555
  1451  0009FC  EF26  F005         	
  1452                           l211:
  1453  000A00                     	line	303
  1454                           	
  1455                           l1549:
  1456  000A00                     ;main.c: 302:     {;main.c: 303:         string[digit] = 0x30 + num%10;
  1457                           	movf	((c:int2char@digit)),c,w
  1458  000A00  5010               	mullw	01h
  1459  000A02  0D01               	movlw	low(int2char@string)
  1460  000A04  0E51               	addwf	(prodl),c,w
  1461  000A06  24F3               	movwf	c:fsr2l
  1462  000A08  6ED9               	movlw	high(int2char@string)
  1463  000A0A  0E00               	addwfc	prod+1,w
  1464  000A0C  20F4               	movwf	1+c:fsr2l
  1465  000A0E  6EDA               	movff	(c:int2char@num),(c:___lwmod@dividend)
  1466  000A10  C00E  F005         	movff	(c:int2char@num+1),(c:___lwmod@dividend+1)
  1467  000A14  C00F  F006         	movlw	high(0Ah)
  1468  000A18  0E00               	movwf	((c:___lwmod@divisor+1)),c
  1469  000A1A  6E08               	movlw	low(0Ah)
  1470  000A1C  0E0A               	movwf	((c:___lwmod@divisor)),c
  1471  000A1E  6E07               	call	___lwmod	;wreg free
  1472  000A20  EC36  F005         	movf	(0+?___lwmod),c,w
  1473  000A24  5005               	addlw	low(030h)
  1474  000A26  0F30               	movwf	indf2,c
  1475  000A28  6EDF               
  1476                           	line	304
  1477                           	
  1478                           l1551:
  1479  000A2A                     ;main.c: 304:         num = num/10;
  1480                           	movff	(c:int2char@num),(c:___lwdiv@dividend)
  1481  000A2A  C00E  F005         	movff	(c:int2char@num+1),(c:___lwdiv@dividend+1)
  1482  000A2E  C00F  F006         	movlw	high(0Ah)
  1483  000A32  0E00               	movwf	((c:___lwdiv@divisor+1)),c
  1484  000A34  6E08               	movlw	low(0Ah)
  1485  000A36  0E0A               	movwf	((c:___lwdiv@divisor)),c
  1486  000A38  6E07               	call	___lwdiv	;wreg free
  1487  000A3A  ECB4  F004         	movff	0+?___lwdiv,(c:int2char@num)
  1488  000A3E  C005  F00E         	movff	1+?___lwdiv,(c:int2char@num+1)
  1489  000A42  C006  F00F         	line	305
  1490                           	
  1491                           l1553:
  1492  000A46                     ;main.c: 305:     }
  1493                           	decf	((c:int2char@digit)),c
  1494  000A46  0610               	goto	l1555
  1495  000A48  EF26  F005         	
  1496                           l210:
  1497  000A4C                     	
  1498                           l1555:
  1499  000A4C                     	btfsc	((c:int2char@digit)),c,7
  1500  000A4C  BE10               	goto	u840
  1501  000A4E  EF2D  F005         	goto	u841
  1502  000A52  EF2B  F005         
  1503                           u841:
  1504  000A56                     	goto	l1549
  1505  000A56  EF00  F005         u840:
  1506  000A5A                     	goto	l1557
  1507  000A5A  EF2F  F005         	
  1508                           l212:
  1509  000A5E                     	line	307
  1510                           	
  1511                           l1557:
  1512  000A5E                     ;main.c: 307:     return string;
  1513                           		movlw	low(int2char@string)
  1514  000A5E  0E51               	movwf	((c:?_int2char)),c
  1515  000A60  6E0C               	movlw	high(int2char@string)
  1516  000A62  0E00               	movwf	((c:?_int2char+1)),c
  1517  000A64  6E0D               
  1518                           	goto	l213
  1519  000A66  EF35  F005         	
  1520                           l1559:
  1521  000A6A                     	line	308
  1522                           	
  1523                           l213:
  1524  000A6A                     	return	;funcret
  1525  000A6A  0012               	opt stack 0
  1526                           GLOBAL	__end_of_int2char
  1527                           	__end_of_int2char:
  1528  000A6C                     	signat	_int2char,4218
  1529                           	global	___lwmod
  1530                           
  1531 ;; *************** function ___lwmod *****************
  1532 ;; Defined at:
  1533 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;  dividend        2    4[COMRAM] unsigned int 
  1536 ;;  divisor         2    6[COMRAM] unsigned int 
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;  counter         1    8[COMRAM] unsigned char 
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  2    4[COMRAM] unsigned int 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, status,0
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1548 ;;      Params:         4       0       0       0
  1549 ;;      Locals:         1       0       0       0
  1550 ;;      Temps:          0       0       0       0
  1551 ;;      Totals:         5       0       0       0
  1552 ;;Total ram usage:        5 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    1
  1555 ;; This function calls:
  1556 ;;		Nothing
  1557 ;; This function is called by:
  1558 ;;		_int2char
  1559 ;; This function uses a non-reentrant model
  1560 ;;
  1561                           psect	text2,class=CODE,space=0,reloc=2,group=1
  1562                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  1563                           	line	7
  1564                           global __ptext2
  1565                           __ptext2:
  1566  000A6C                     psect	text2
  1567                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  1568                           	line	7
  1569                           	global	__size_of___lwmod
  1570                           	__size_of___lwmod	equ	__end_of___lwmod-___lwmod
  1571  0000                     	
  1572                           ___lwmod:
  1573  000A6C                     ;incstack = 0
  1574                           	opt	stack 28
  1575                           	line	12
  1576                           	
  1577                           l1469:
  1578  000A6C                     	movf	((c:___lwmod@divisor)),c,w
  1579  000A6C  5007               iorwf	((c:___lwmod@divisor+1)),c,w
  1580  000A6E  1008               	btfsc	status,2
  1581  000A70  B4D8               	goto	u771
  1582  000A72  EF3D  F005         	goto	u770
  1583  000A76  EF3F  F005         
  1584                           u771:
  1585  000A7A                     	goto	l723
  1586  000A7A  EF6D  F005         u770:
  1587  000A7E                     	line	13
  1588                           	
  1589                           l1471:
  1590  000A7E                     	movlw	low(01h)
  1591  000A7E  0E01               	movwf	((c:___lwmod@counter)),c
  1592  000A80  6E09               	line	14
  1593                           	goto	l1475
  1594  000A82  EF49  F005         	
  1595                           l725:
  1596  000A86                     	line	15
  1597                           	
  1598                           l1473:
  1599  000A86                     	bcf	status,0
  1600  000A86  90D8               	rlcf	((c:___lwmod@divisor)),c
  1601  000A88  3607               	rlcf	((c:___lwmod@divisor+1)),c
  1602  000A8A  3608               	line	16
  1603                           	incf	((c:___lwmod@counter)),c
  1604  000A8C  2A09               	goto	l1475
  1605  000A8E  EF49  F005         	line	17
  1606                           	
  1607                           l724:
  1608  000A92                     	line	14
  1609                           	
  1610                           l1475:
  1611  000A92                     	
  1612                           	btfss	((c:___lwmod@divisor+1)),c,(15)&7
  1613  000A92  AE08               	goto	u781
  1614  000A94  EF4E  F005         	goto	u780
  1615  000A98  EF50  F005         u781:
  1616  000A9C                     	goto	l1473
  1617  000A9C  EF43  F005         u780:
  1618  000AA0                     	goto	l1477
  1619  000AA0  EF54  F005         	
  1620                           l726:
  1621  000AA4                     	goto	l1477
  1622  000AA4  EF54  F005         	line	18
  1623                           	
  1624                           l727:
  1625  000AA8                     	line	19
  1626                           	
  1627                           l1477:
  1628  000AA8                     		movf	((c:___lwmod@divisor)),c,w
  1629  000AA8  5007               	subwf	((c:___lwmod@dividend)),c,w
  1630  000AAA  5C05               	movf	((c:___lwmod@divisor+1)),c,w
  1631  000AAC  5008               	subwfb	((c:___lwmod@dividend+1)),c,w
  1632  000AAE  5806               	btfss	status,0
  1633  000AB0  A0D8               	goto	u791
  1634  000AB2  EF5D  F005         	goto	u790
  1635  000AB6  EF5F  F005         
  1636                           u791:
  1637  000ABA                     	goto	l1481
  1638  000ABA  EF65  F005         u790:
  1639  000ABE                     	line	20
  1640                           	
  1641                           l1479:
  1642  000ABE                     	movf	((c:___lwmod@divisor)),c,w
  1643  000ABE  5007               	subwf	((c:___lwmod@dividend)),c
  1644  000AC0  5E05               	movf	((c:___lwmod@divisor+1)),c,w
  1645  000AC2  5008               	subwfb	((c:___lwmod@dividend+1)),c
  1646  000AC4  5A06               
  1647                           	goto	l1481
  1648  000AC6  EF65  F005         	
  1649                           l728:
  1650  000ACA                     	line	21
  1651                           	
  1652                           l1481:
  1653  000ACA                     	bcf	status,0
  1654  000ACA  90D8               	rrcf	((c:___lwmod@divisor+1)),c
  1655  000ACC  3208               	rrcf	((c:___lwmod@divisor)),c
  1656  000ACE  3207               	line	22
  1657                           	
  1658                           l1483:
  1659  000AD0                     	decfsz	((c:___lwmod@counter)),c
  1660  000AD0  2E09               	
  1661                           	goto	l1477
  1662  000AD2  EF54  F005         	goto	l723
  1663  000AD6  EF6D  F005         	
  1664                           l729:
  1665  000ADA                     	line	23
  1666                           	
  1667                           l723:
  1668  000ADA                     	line	24
  1669                           	movff	(c:___lwmod@dividend),(c:?___lwmod)
  1670  000ADA  C005  F005         	movff	(c:___lwmod@dividend+1),(c:?___lwmod+1)
  1671  000ADE  C006  F006         	line	25
  1672                           	
  1673                           l730:
  1674  000AE2                     	return	;funcret
  1675  000AE2  0012               	opt stack 0
  1676                           GLOBAL	__end_of___lwmod
  1677                           	__end_of___lwmod:
  1678  000AE4                     	signat	___lwmod,8314
  1679                           	global	___lwdiv
  1680                           
  1681 ;; *************** function ___lwdiv *****************
  1682 ;; Defined at:
  1683 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  1684 ;; Parameters:    Size  Location     Type
  1685 ;;  dividend        2    4[COMRAM] unsigned int 
  1686 ;;  divisor         2    6[COMRAM] unsigned int 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;  quotient        2    8[COMRAM] unsigned int 
  1689 ;;  counter         1   10[COMRAM] unsigned char 
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  2    4[COMRAM] unsigned int 
  1692 ;; Registers used:
  1693 ;;		wreg, status,2, status,0
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1699 ;;      Params:         4       0       0       0
  1700 ;;      Locals:         3       0       0       0
  1701 ;;      Temps:          0       0       0       0
  1702 ;;      Totals:         7       0       0       0
  1703 ;;Total ram usage:        7 bytes
  1704 ;; Hardware stack levels used:    1
  1705 ;; Hardware stack levels required when called:    1
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_int2char
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           psect	text3,class=CODE,space=0,reloc=2,group=1
  1713                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  1714                           	line	7
  1715                           global __ptext3
  1716                           __ptext3:
  1717  000968                     psect	text3
  1718                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  1719                           	line	7
  1720                           	global	__size_of___lwdiv
  1721                           	__size_of___lwdiv	equ	__end_of___lwdiv-___lwdiv
  1722  0000                     	
  1723                           ___lwdiv:
  1724  000968                     ;incstack = 0
  1725                           	opt	stack 28
  1726                           	line	13
  1727                           	
  1728                           l1447:
  1729  000968                     	movlw	high(0)
  1730  000968  0E00               	movwf	((c:___lwdiv@quotient+1)),c
  1731  00096A  6E0A               	movlw	low(0)
  1732  00096C  0E00               	movwf	((c:___lwdiv@quotient)),c
  1733  00096E  6E09               	line	14
  1734                           	
  1735                           l1449:
  1736  000970                     	movf	((c:___lwdiv@divisor)),c,w
  1737  000970  5007               iorwf	((c:___lwdiv@divisor+1)),c,w
  1738  000972  1008               	btfsc	status,2
  1739  000974  B4D8               	goto	u741
  1740  000976  EFBF  F004         	goto	u740
  1741  00097A  EFC1  F004         
  1742                           u741:
  1743  00097E                     	goto	l713
  1744  00097E  EFF3  F004         u740:
  1745  000982                     	line	15
  1746                           	
  1747                           l1451:
  1748  000982                     	movlw	low(01h)
  1749  000982  0E01               	movwf	((c:___lwdiv@counter)),c
  1750  000984  6E0B               	line	16
  1751                           	goto	l1455
  1752  000986  EFCB  F004         	
  1753                           l715:
  1754  00098A                     	line	17
  1755                           	
  1756                           l1453:
  1757  00098A                     	bcf	status,0
  1758  00098A  90D8               	rlcf	((c:___lwdiv@divisor)),c
  1759  00098C  3607               	rlcf	((c:___lwdiv@divisor+1)),c
  1760  00098E  3608               	line	18
  1761                           	incf	((c:___lwdiv@counter)),c
  1762  000990  2A0B               	goto	l1455
  1763  000992  EFCB  F004         	line	19
  1764                           	
  1765                           l714:
  1766  000996                     	line	16
  1767                           	
  1768                           l1455:
  1769  000996                     	
  1770                           	btfss	((c:___lwdiv@divisor+1)),c,(15)&7
  1771  000996  AE08               	goto	u751
  1772  000998  EFD0  F004         	goto	u750
  1773  00099C  EFD2  F004         u751:
  1774  0009A0                     	goto	l1453
  1775  0009A0  EFC5  F004         u750:
  1776  0009A4                     	goto	l1457
  1777  0009A4  EFD6  F004         	
  1778                           l716:
  1779  0009A8                     	goto	l1457
  1780  0009A8  EFD6  F004         	line	20
  1781                           	
  1782                           l717:
  1783  0009AC                     	line	21
  1784                           	
  1785                           l1457:
  1786  0009AC                     	bcf	status,0
  1787  0009AC  90D8               	rlcf	((c:___lwdiv@quotient)),c
  1788  0009AE  3609               	rlcf	((c:___lwdiv@quotient+1)),c
  1789  0009B0  360A               	line	22
  1790                           	
  1791                           l1459:
  1792  0009B2                     		movf	((c:___lwdiv@divisor)),c,w
  1793  0009B2  5007               	subwf	((c:___lwdiv@dividend)),c,w
  1794  0009B4  5C05               	movf	((c:___lwdiv@divisor+1)),c,w
  1795  0009B6  5008               	subwfb	((c:___lwdiv@dividend+1)),c,w
  1796  0009B8  5806               	btfss	status,0
  1797  0009BA  A0D8               	goto	u761
  1798  0009BC  EFE2  F004         	goto	u760
  1799  0009C0  EFE4  F004         
  1800                           u761:
  1801  0009C4                     	goto	l1465
  1802  0009C4  EFEB  F004         u760:
  1803  0009C8                     	line	23
  1804                           	
  1805                           l1461:
  1806  0009C8                     	movf	((c:___lwdiv@divisor)),c,w
  1807  0009C8  5007               	subwf	((c:___lwdiv@dividend)),c
  1808  0009CA  5E05               	movf	((c:___lwdiv@divisor+1)),c,w
  1809  0009CC  5008               	subwfb	((c:___lwdiv@dividend+1)),c
  1810  0009CE  5A06               
  1811                           	line	24
  1812                           	
  1813                           l1463:
  1814  0009D0                     	bsf	(0+(0/8)+(c:___lwdiv@quotient)),c,(0)&7
  1815  0009D0  8009               	goto	l1465
  1816  0009D2  EFEB  F004         	line	25
  1817                           	
  1818                           l718:
  1819  0009D6                     	line	26
  1820                           	
  1821                           l1465:
  1822  0009D6                     	bcf	status,0
  1823  0009D6  90D8               	rrcf	((c:___lwdiv@divisor+1)),c
  1824  0009D8  3208               	rrcf	((c:___lwdiv@divisor)),c
  1825  0009DA  3207               	line	27
  1826                           	
  1827                           l1467:
  1828  0009DC                     	decfsz	((c:___lwdiv@counter)),c
  1829  0009DC  2E0B               	
  1830                           	goto	l1457
  1831  0009DE  EFD6  F004         	goto	l713
  1832  0009E2  EFF3  F004         	
  1833                           l719:
  1834  0009E6                     	line	28
  1835                           	
  1836                           l713:
  1837  0009E6                     	line	29
  1838                           	movff	(c:___lwdiv@quotient),(c:?___lwdiv)
  1839  0009E6  C009  F005         	movff	(c:___lwdiv@quotient+1),(c:?___lwdiv+1)
  1840  0009EA  C00A  F006         	line	30
  1841                           	
  1842                           l720:
  1843  0009EE                     	return	;funcret
  1844  0009EE  0012               	opt stack 0
  1845                           GLOBAL	__end_of___lwdiv
  1846                           	__end_of___lwdiv:
  1847  0009F0                     	signat	___lwdiv,8314
  1848                           	global	_init_VNHIO
  1849                           
  1850 ;; *************** function _init_VNHIO *****************
  1851 ;; Defined at:
  1852 ;;		line 213 in file "main.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, status,2
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1866 ;;      Params:         0       0       0       0
  1867 ;;      Locals:         0       0       0       0
  1868 ;;      Temps:          0       0       0       0
  1869 ;;      Totals:         0       0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    1
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           psect	text4,class=CODE,space=0,reloc=2,group=0
  1880                           	file	"main.c"
  1881                           	line	213
  1882                           global __ptext4
  1883                           __ptext4:
  1884  000C26                     psect	text4
  1885                           	file	"main.c"
  1886                           	line	213
  1887                           	global	__size_of_init_VNHIO
  1888                           	__size_of_init_VNHIO	equ	__end_of_init_VNHIO-_init_VNHIO
  1889  0000                     	
  1890                           _init_VNHIO:
  1891  000C26                     ;incstack = 0
  1892                           	opt	stack 29
  1893                           	line	215
  1894                           	
  1895                           l1101:
  1896  000C26                     ;main.c: 215:     ANSEL0 = 0;
  1897                           	movlw	low(0)
  1898  000C26  0E00               	movwf	((c:4024)),c	;volatile
  1899  000C28  6EB8               	line	216
  1900                           ;main.c: 216:     ANSEL1 = 0;
  1901                           	movlw	low(0)
  1902  000C2A  0E00               	movwf	((c:4025)),c	;volatile
  1903  000C2C  6EB9               	line	217
  1904                           	
  1905                           l1103:
  1906  000C2E                     ;main.c: 217:     TRISA0 = 0;
  1907                           	bcf	c:(31888/8),(31888)&7	;volatile
  1908  000C2E  9092               	line	218
  1909                           	
  1910                           l1105:
  1911  000C30                     ;main.c: 218:     TRISA1 = 0;
  1912                           	bcf	c:(31889/8),(31889)&7	;volatile
  1913  000C30  9292               	line	219
  1914                           	
  1915                           l1107:
  1916  000C32                     ;main.c: 219:     LATA0 = 0;
  1917                           	bcf	c:(31816/8),(31816)&7	;volatile
  1918  000C32  9089               	line	220
  1919                           	
  1920                           l1109:
  1921  000C34                     ;main.c: 220:     LATA1 = 1;
  1922                           	bsf	c:(31817/8),(31817)&7	;volatile
  1923  000C34  8289               	line	221
  1924                           	
  1925                           l187:
  1926  000C36                     	return	;funcret
  1927  000C36  0012               	opt stack 0
  1928                           GLOBAL	__end_of_init_VNHIO
  1929                           	__end_of_init_VNHIO:
  1930  000C38                     	signat	_init_VNHIO,89
  1931                           	global	_init_UART
  1932                           
  1933 ;; *************** function _init_UART *****************
  1934 ;; Defined at:
  1935 ;;		line 257 in file "main.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1949 ;;      Params:         0       0       0       0
  1950 ;;      Locals:         0       0       0       0
  1951 ;;      Temps:          0       0       0       0
  1952 ;;      Totals:         0       0       0       0
  1953 ;;Total ram usage:        0 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    1
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           psect	text5,class=CODE,space=0,reloc=2,group=0
  1963                           	line	257
  1964                           global __ptext5
  1965                           __ptext5:
  1966  000BFA                     psect	text5
  1967                           	file	"main.c"
  1968                           	line	257
  1969                           	global	__size_of_init_UART
  1970                           	__size_of_init_UART	equ	__end_of_init_UART-_init_UART
  1971  0000                     	
  1972                           _init_UART:
  1973  000BFA                     ;incstack = 0
  1974                           	opt	stack 29
  1975                           	line	259
  1976                           	
  1977                           l1129:
  1978  000BFA                     ;main.c: 259:     GPREG.TXCTRL = 0;
  1979                           	bcf	((c:_GPREG)),c,6
  1980  000BFA  9C50               	line	260
  1981                           ;main.c: 260:     TRISC6 = 0;
  1982                           	bcf	c:(31910/8),(31910)&7	;volatile
  1983  000BFC  9C94               	line	261
  1984                           	
  1985                           l1131:
  1986  000BFE                     ;main.c: 261:     TXSTA = 0x20;
  1987                           	movlw	low(020h)
  1988  000BFE  0E20               	movwf	((c:4012)),c	;volatile
  1989  000C00  6EAC               	line	262
  1990                           ;main.c: 262:     RCSTA = 0x90;
  1991                           	movlw	low(090h)
  1992  000C02  0E90               	movwf	((c:4011)),c	;volatile
  1993  000C04  6EAB               	line	263
  1994                           ;main.c: 263:     BAUDCON = 0x0;
  1995                           	movlw	low(0)
  1996  000C06  0E00               	movwf	((c:4010)),c	;volatile
  1997  000C08  6EAA               	line	264
  1998                           ;main.c: 264:     SPBRG = 12;
  1999                           	movlw	low(0Ch)
  2000  000C0A  0E0C               	movwf	((c:4015)),c	;volatile
  2001  000C0C  6EAF               	line	265
  2002                           	
  2003                           l199:
  2004  000C0E                     	return	;funcret
  2005  000C0E  0012               	opt stack 0
  2006                           GLOBAL	__end_of_init_UART
  2007                           	__end_of_init_UART:
  2008  000C10                     	signat	_init_UART,89
  2009                           	global	_init_TMR1
  2010                           
  2011 ;; *************** function _init_TMR1 *****************
  2012 ;; Defined at:
  2013 ;;		line 206 in file "main.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg, status,2
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2027 ;;      Params:         0       0       0       0
  2028 ;;      Locals:         0       0       0       0
  2029 ;;      Temps:          0       0       0       0
  2030 ;;      Totals:         0       0       0       0
  2031 ;;Total ram usage:        0 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    1
  2034 ;; This function calls:
  2035 ;;		Nothing
  2036 ;; This function is called by:
  2037 ;;		_main
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           psect	text6,class=CODE,space=0,reloc=2,group=0
  2041                           	line	206
  2042                           global __ptext6
  2043                           __ptext6:
  2044  000C38                     psect	text6
  2045                           	file	"main.c"
  2046                           	line	206
  2047                           	global	__size_of_init_TMR1
  2048                           	__size_of_init_TMR1	equ	__end_of_init_TMR1-_init_TMR1
  2049  0000                     	
  2050                           _init_TMR1:
  2051  000C38                     ;incstack = 0
  2052                           	opt	stack 29
  2053                           	line	209
  2054                           	
  2055                           l1115:
  2056  000C38                     ;main.c: 209:     T1CON = 0xF9;
  2057                           	movlw	low(0F9h)
  2058  000C38  0EF9               	movwf	((c:4045)),c	;volatile
  2059  000C3A  6ECD               	line	210
  2060                           ;main.c: 210:     TMR1 =65485;
  2061                           	movlw	high(0FFCDh)
  2062  000C3C  0EFF               	movwf	((c:4046+1)),c	;volatile
  2063  000C3E  6ECF               	movlw	low(0FFCDh)
  2064  000C40  0ECD               	movwf	((c:4046)),c	;volatile
  2065  000C42  6ECE               	line	211
  2066                           	
  2067                           l184:
  2068  000C44                     	return	;funcret
  2069  000C44  0012               	opt stack 0
  2070                           GLOBAL	__end_of_init_TMR1
  2071                           	__end_of_init_TMR1:
  2072  000C46                     	signat	_init_TMR1,89
  2073                           	global	_init_QEI
  2074                           
  2075 ;; *************** function _init_QEI *****************
  2076 ;; Defined at:
  2077 ;;		line 241 in file "main.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;		None
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;		None
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  1    wreg      void 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2091 ;;      Params:         0       0       0       0
  2092 ;;      Locals:         0       0       0       0
  2093 ;;      Temps:          0       0       0       0
  2094 ;;      Totals:         0       0       0       0
  2095 ;;Total ram usage:        0 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    1
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_main
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           psect	text7,class=CODE,space=0,reloc=2,group=0
  2105                           	line	241
  2106                           global __ptext7
  2107                           __ptext7:
  2108  000BA6                     psect	text7
  2109                           	file	"main.c"
  2110                           	line	241
  2111                           	global	__size_of_init_QEI
  2112                           	__size_of_init_QEI	equ	__end_of_init_QEI-_init_QEI
  2113  0000                     	
  2114                           _init_QEI:
  2115  000BA6                     ;incstack = 0
  2116                           	opt	stack 29
  2117                           	line	243
  2118                           	
  2119                           l1125:
  2120  000BA6                     ;main.c: 243:     TRISA4 = 1;
  2121                           	bsf	c:(31892/8),(31892)&7	;volatile
  2122  000BA6  8892               	line	244
  2123                           ;main.c: 244:     TRISA5 = 1;
  2124                           	bsf	c:(31893/8),(31893)&7	;volatile
  2125  000BA8  8A92               	line	246
  2126                           	
  2127                           l1127:
  2128  000BAA                     ;main.c: 246:     POSCNTL = 4200;
  2129                           	movlw	low(068h)
  2130  000BAA  0E68               	movwf	((c:3942)),c	;volatile
  2131  000BAC  6E66               	line	247
  2132                           ;main.c: 247:     POSCNTH = 4200>>8;
  2133                           	movlw	low(010h)
  2134  000BAE  0E10               	movwf	((c:3943)),c	;volatile
  2135  000BB0  6E67               	line	248
  2136                           ;main.c: 248:     pos = 4200;
  2137                           	movlw	high(01068h)
  2138  000BB2  0E10               	movwf	((c:_pos+1)),c
  2139  000BB4  6E57               	movlw	low(01068h)
  2140  000BB6  0E68               	movwf	((c:_pos)),c
  2141  000BB8  6E56               	line	250
  2142                           ;main.c: 250:     MAXCNTL = 8400;
  2143                           	movlw	low(0D0h)
  2144  000BBA  0ED0               	movwf	((c:3940)),c	;volatile
  2145  000BBC  6E64               	line	251
  2146                           ;main.c: 251:     MAXCNTH = 8400>>8;
  2147                           	movlw	low(020h)
  2148  000BBE  0E20               	movwf	((c:3941)),c	;volatile
  2149  000BC0  6E65               	line	253
  2150                           ;main.c: 253:     QEICON = 0x98;
  2151                           	movlw	low(098h)
  2152  000BC2  0E98               	movwf	((c:4022)),c	;volatile
  2153  000BC4  6EB6               	line	255
  2154                           	
  2155                           l196:
  2156  000BC6                     	return	;funcret
  2157  000BC6  0012               	opt stack 0
  2158                           GLOBAL	__end_of_init_QEI
  2159                           	__end_of_init_QEI:
  2160  000BC8                     	signat	_init_QEI,89
  2161                           	global	_init_PWM
  2162                           
  2163 ;; *************** function _init_PWM *****************
  2164 ;; Defined at:
  2165 ;;		line 223 in file "main.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;		None
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2179 ;;      Params:         0       0       0       0
  2180 ;;      Locals:         0       0       0       0
  2181 ;;      Temps:          0       0       0       0
  2182 ;;      Totals:         0       0       0       0
  2183 ;;Total ram usage:        0 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    2
  2186 ;; This function calls:
  2187 ;;		_write_PWM
  2188 ;; This function is called by:
  2189 ;;		_main
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           psect	text8,class=CODE,space=0,reloc=2,group=0
  2193                           	line	223
  2194                           global __ptext8
  2195                           __ptext8:
  2196  000BC8                     psect	text8
  2197                           	file	"main.c"
  2198                           	line	223
  2199                           	global	__size_of_init_PWM
  2200                           	__size_of_init_PWM	equ	__end_of_init_PWM-_init_PWM
  2201  0000                     	
  2202                           _init_PWM:
  2203  000BC8                     ;incstack = 0
  2204                           	opt	stack 28
  2205                           	line	225
  2206                           	
  2207                           l1485:
  2208  000BC8                     ;main.c: 225:     TRISC2 = 0;
  2209                           	bcf	c:(31906/8),(31906)&7	;volatile
  2210  000BC8  9494               	line	226
  2211                           ;main.c: 226:     LATC2 = 0;
  2212                           	bcf	c:(31834/8),(31834)&7	;volatile
  2213  000BCA  948B               	line	228
  2214                           	
  2215                           l1487:
  2216  000BCC                     ;main.c: 228:     CCP1CON = 0xF;
  2217                           	movlw	low(0Fh)
  2218  000BCC  0E0F               	movwf	((c:4029)),c	;volatile
  2219  000BCE  6EBD               	line	229
  2220                           ;main.c: 229:     T2CON = 0x4;
  2221                           	movlw	low(04h)
  2222  000BD0  0E04               	movwf	((c:4042)),c	;volatile
  2223  000BD2  6ECA               	line	230
  2224                           	
  2225                           l1489:
  2226  000BD4                     ;main.c: 230:     PR2 = 255u;
  2227                           	setf	((c:4043)),c	;volatile
  2228  000BD4  68CB               	line	231
  2229                           	
  2230                           l1491:
  2231  000BD6                     ;main.c: 231:     write_PWM(0);
  2232                           	movlw	high(0)
  2233  000BD6  0E00               	movwf	((c:write_PWM@dutyCycle+1)),c
  2234  000BD8  6E2C               	movlw	low(0)
  2235  000BDA  0E00               	movwf	((c:write_PWM@dutyCycle)),c
  2236  000BDC  6E2B               	call	_write_PWM	;wreg free
  2237  000BDE  ECC0  F005         	line	232
  2238                           	
  2239                           l190:
  2240  000BE2                     	return	;funcret
  2241  000BE2  0012               	opt stack 0
  2242                           GLOBAL	__end_of_init_PWM
  2243                           	__end_of_init_PWM:
  2244  000BE4                     	signat	_init_PWM,89
  2245                           	global	_write_PWM
  2246                           
  2247 ;; *************** function _write_PWM *****************
  2248 ;; Defined at:
  2249 ;;		line 234 in file "main.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  dutyCycle       2   42[COMRAM] unsigned int 
  2252 ;; Auto vars:     Size  Location     Type
  2253 ;;		None
  2254 ;; Return value:  Size  Location     Type
  2255 ;;                  1    wreg      void 
  2256 ;; Registers used:
  2257 ;;		wreg, status,2, status,0
  2258 ;; Tracked objects:
  2259 ;;		On entry : 0/0
  2260 ;;		On exit  : 0/0
  2261 ;;		Unchanged: 0/0
  2262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2263 ;;      Params:         2       0       0       0
  2264 ;;      Locals:         0       0       0       0
  2265 ;;      Temps:          1       0       0       0
  2266 ;;      Totals:         3       0       0       0
  2267 ;;Total ram usage:        3 bytes
  2268 ;; Hardware stack levels used:    1
  2269 ;; Hardware stack levels required when called:    1
  2270 ;; This function calls:
  2271 ;;		Nothing
  2272 ;; This function is called by:
  2273 ;;		_main
  2274 ;;		_init_PWM
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           psect	text9,class=CODE,space=0,reloc=2,group=0
  2278                           	line	234
  2279                           global __ptext9
  2280                           __ptext9:
  2281  000B80                     psect	text9
  2282                           	file	"main.c"
  2283                           	line	234
  2284                           	global	__size_of_write_PWM
  2285                           	__size_of_write_PWM	equ	__end_of_write_PWM-_write_PWM
  2286  0000                     	
  2287                           _write_PWM:
  2288  000B80                     ;incstack = 0
  2289                           	opt	stack 29
  2290                           	line	236
  2291                           	
  2292                           l1279:
  2293  000B80                     ;main.c: 234: void write_PWM(uint16_t dutyCycle);main.c: 235: {;main.c: 236:     CCP1CON
                                 bits.DC1B = dutyCycle % 4u;
  2294                           	movff	(c:write_PWM@dutyCycle),??_write_PWM+0+0
  2295  000B80  C02B  F02D         	movlw	03h
  2296  000B84  0E03               	andwf	(??_write_PWM+0+0),c
  2297  000B86  162D               	swapf	(??_write_PWM+0+0),c
  2298  000B88  3A2D               	movf	((c:4029)),c,w	;volatile
  2299  000B8A  50BD               	xorwf	(??_write_PWM+0+0),c,w
  2300  000B8C  182D               	andlw	not (((1<<2)-1)<<4)
  2301  000B8E  0BCF               	xorwf	(??_write_PWM+0+0),c,w
  2302  000B90  182D               	movwf	((c:4029)),c	;volatile
  2303  000B92  6EBD               	line	237
  2304                           	
  2305                           l1281:
  2306  000B94                     ;main.c: 237:     dutyCycle >>= 2;
  2307                           	bcf	status,0
  2308  000B94  90D8               	rrcf	((c:write_PWM@dutyCycle+1)),c
  2309  000B96  322C               	rrcf	((c:write_PWM@dutyCycle)),c
  2310  000B98  322B               	bcf	status,0
  2311  000B9A  90D8               	rrcf	((c:write_PWM@dutyCycle+1)),c
  2312  000B9C  322C               	rrcf	((c:write_PWM@dutyCycle)),c
  2313  000B9E  322B               	line	238
  2314                           	
  2315                           l1283:
  2316  000BA0                     ;main.c: 238:     CCPR1L = (uint8_t) dutyCycle;
  2317                           	movff	(c:write_PWM@dutyCycle),(c:4030)	;volatile
  2318  000BA0  C02B  FFBE         	line	239
  2319                           	
  2320                           l193:
  2321  000BA4                     	return	;funcret
  2322  000BA4  0012               	opt stack 0
  2323                           GLOBAL	__end_of_write_PWM
  2324                           	__end_of_write_PWM:
  2325  000BA6                     	signat	_write_PWM,4217
  2326                           	global	_init_ISR
  2327                           
  2328 ;; *************** function _init_ISR *****************
  2329 ;; Defined at:
  2330 ;;		line 276 in file "main.c"
  2331 ;; Parameters:    Size  Location     Type
  2332 ;;		None
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;		None
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  1    wreg      void 
  2337 ;; Registers used:
  2338 ;;		None
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2344 ;;      Params:         0       0       0       0
  2345 ;;      Locals:         0       0       0       0
  2346 ;;      Temps:          0       0       0       0
  2347 ;;      Totals:         0       0       0       0
  2348 ;;Total ram usage:        0 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    1
  2351 ;; This function calls:
  2352 ;;		Nothing
  2353 ;; This function is called by:
  2354 ;;		_main
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           psect	text10,class=CODE,space=0,reloc=2,group=0
  2358                           	line	276
  2359                           global __ptext10
  2360                           __ptext10:
  2361  000C10                     psect	text10
  2362                           	file	"main.c"
  2363                           	line	276
  2364                           	global	__size_of_init_ISR
  2365                           	__size_of_init_ISR	equ	__end_of_init_ISR-_init_ISR
  2366  0000                     	
  2367                           _init_ISR:
  2368  000C10                     ;incstack = 0
  2369                           	opt	stack 29
  2370                           	line	279
  2371                           	
  2372                           l1133:
  2373  000C10                     ;main.c: 279:     TMR1IF = 0;
  2374                           	bcf	c:(31984/8),(31984)&7	;volatile
  2375  000C10  909E               	line	280
  2376                           ;main.c: 280:     TMR1IE = 1;
  2377                           	bsf	c:(31976/8),(31976)&7	;volatile
  2378  000C12  809D               	line	281
  2379                           ;main.c: 281:     TMR1IP = 1;
  2380                           	bsf	c:(31992/8),(31992)&7	;volatile
  2381  000C14  809F               	line	284
  2382                           ;main.c: 284:     SSPIE = 1;
  2383                           	bsf	c:(31979/8),(31979)&7	;volatile
  2384  000C16  869D               	line	285
  2385                           ;main.c: 285:     SSPIP = 1;
  2386                           	bsf	c:(31995/8),(31995)&7	;volatile
  2387  000C18  869F               	line	288
  2388                           ;main.c: 288:     TXIE = 0;
  2389                           	bcf	c:(31980/8),(31980)&7	;volatile
  2390  000C1A  989D               	line	289
  2391                           ;main.c: 289:     TXIP = 1;
  2392                           	bsf	c:(31996/8),(31996)&7	;volatile
  2393  000C1C  889F               	line	290
  2394                           ;main.c: 290:     TXIF = 0;
  2395                           	bcf	c:(31988/8),(31988)&7	;volatile
  2396  000C1E  989E               	line	292
  2397                           ;main.c: 292:     IPEN=1;
  2398                           	bsf	c:(32391/8),(32391)&7	;volatile
  2399  000C20  8ED0               	line	293
  2400                           ;main.c: 293:     GIE = 1;
  2401                           	bsf	c:(32663/8),(32663)&7	;volatile
  2402  000C22  8EF2               	line	294
  2403                           	
  2404                           l205:
  2405  000C24                     	return	;funcret
  2406  000C24  0012               	opt stack 0
  2407                           GLOBAL	__end_of_init_ISR
  2408                           	__end_of_init_ISR:
  2409  000C26                     	signat	_init_ISR,89
  2410                           	global	_init_I2C
  2411                           
  2412 ;; *************** function _init_I2C *****************
  2413 ;; Defined at:
  2414 ;;		line 267 in file "main.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, status,2
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2428 ;;      Params:         0       0       0       0
  2429 ;;      Locals:         0       0       0       0
  2430 ;;      Temps:          0       0       0       0
  2431 ;;      Totals:         0       0       0       0
  2432 ;;Total ram usage:        0 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    1
  2435 ;; This function calls:
  2436 ;;		Nothing
  2437 ;; This function is called by:
  2438 ;;		_main
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           psect	text11,class=CODE,space=0,reloc=2,group=0
  2442                           	line	267
  2443                           global __ptext11
  2444                           __ptext11:
  2445  000C46                     psect	text11
  2446                           	file	"main.c"
  2447                           	line	267
  2448                           	global	__size_of_init_I2C
  2449                           	__size_of_init_I2C	equ	__end_of_init_I2C-_init_I2C
  2450  0000                     	
  2451                           _init_I2C:
  2452  000C46                     ;incstack = 0
  2453                           	opt	stack 29
  2454                           	line	269
  2455                           	
  2456                           l1111:
  2457  000C46                     ;main.c: 269:     TRISC5 = 1;
  2458                           	bsf	c:(31909/8),(31909)&7	;volatile
  2459  000C46  8A94               	line	270
  2460                           ;main.c: 270:     TRISC4 = 1;
  2461                           	bsf	c:(31908/8),(31908)&7	;volatile
  2462  000C48  8894               	line	271
  2463                           	
  2464                           l1113:
  2465  000C4A                     ;main.c: 271:     SSPCON =0b00110110;
  2466                           	movlw	low(036h)
  2467  000C4A  0E36               	movwf	((c:4038)),c	;volatile
  2468  000C4C  6EC6               	line	273
  2469                           ;main.c: 273:     SSPADD = 0x86;
  2470                           	movlw	low(086h)
  2471  000C4E  0E86               	movwf	((c:4040)),c	;volatile
  2472  000C50  6EC8               	line	274
  2473                           	
  2474                           l202:
  2475  000C52                     	return	;funcret
  2476  000C52  0012               	opt stack 0
  2477                           GLOBAL	__end_of_init_I2C
  2478                           	__end_of_init_I2C:
  2479  000C54                     	signat	_init_I2C,89
  2480                           	global	_calculatePWM
  2481                           
  2482 ;; *************** function _calculatePWM *****************
  2483 ;; Defined at:
  2484 ;;		line 172 in file "main.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  setpoint        1    wreg     char 
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;  setpoint        1    0[COMRAM] char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  4   30[COMRAM] long 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         4       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          8       0       0       0
  2501 ;;      Totals:        12       0       0       0
  2502 ;;Total ram usage:       12 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    2
  2505 ;; This function calls:
  2506 ;;		___aldiv
  2507 ;;		___lmul
  2508 ;;		___wmul
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           psect	text12,class=CODE,space=0,reloc=2,group=0
  2514                           	line	172
  2515                           global __ptext12
  2516                           __ptext12:
  2517  000162                     psect	text12
  2518                           	file	"main.c"
  2519                           	line	172
  2520                           	global	__size_of_calculatePWM
  2521                           	__size_of_calculatePWM	equ	__end_of_calculatePWM-_calculatePWM
  2522  0000                     	
  2523                           _calculatePWM:
  2524  000162                     ;incstack = 0
  2525                           	opt	stack 28
  2526                           	line	175
  2527                           	
  2528                           l1509:
  2529  000162                     ;main.c: 172: int32_t calculatePWM(int8_t setpoint);main.c: 173: {;main.c: 175:     pos 
                                 = POSCNTH;
  2530                           	movff	(c:3943),(c:_pos)	;volatile
  2531  000162  CF67 F056          	clrf	((c:_pos+1)),c
  2532  000166  6A57               	line	176
  2533                           	
  2534                           l1511:
  2535  000168                     ;main.c: 176:     pos <<= 8;
  2536                           	movf	((c:_pos)),c,w
  2537  000168  5056               	movwf	((c:_pos+1)),c
  2538  00016A  6E57               	clrf	((c:_pos)),c
  2539  00016C  6A56               	line	177
  2540                           	
  2541                           l1513:
  2542  00016E                     ;main.c: 177:     pos |= POSCNTL;
  2543                           	movf	((c:3942)),c,w	;volatile
  2544  00016E  5066               	iorwf	((c:_pos)),c
  2545  000170  1256               	line	179
  2546                           	
  2547                           l1515:
  2548  000172                     ;main.c: 179:     error = (ref_pos - pos);
  2549                           	movff	(c:_pos),??_calculatePWM+0+0
  2550  000172  C056  F023         	movff	(c:_pos+1),??_calculatePWM+0+0+1
  2551  000176  C057  F024         	comf	(??_calculatePWM+0+0),c
  2552  00017A  1E23               	comf	(??_calculatePWM+0+1),c
  2553  00017C  1E24               	infsnz	(??_calculatePWM+0+0),c
  2554  00017E  4A23               	incf	(??_calculatePWM+0+1),c
  2555  000180  2A24               	movf	((c:_ref_pos)),c,w
  2556  000182  5058               	addwf	(??_calculatePWM+0+0),c,w
  2557  000184  2423               	movwf	((c:_error)),c
  2558  000186  6E4C               	movf	((c:_ref_pos+1)),c,w
  2559  000188  5059               	addwfc	(??_calculatePWM+0+1),c,w
  2560  00018A  2024               	movwf	1+((c:_error)),c
  2561  00018C  6E4D               	line	180
  2562                           	
  2563                           l1517:
  2564  00018E                     ;main.c: 180:     suma_error += 50*error;
  2565                           	movff	(c:_error),(c:___wmul@multiplier)
  2566  00018E  C04C  F005         	movff	(c:_error+1),(c:___wmul@multiplier+1)
  2567  000192  C04D  F006         	movlw	high(032h)
  2568  000196  0E00               	movwf	((c:___wmul@multiplicand+1)),c
  2569  000198  6E08               	movlw	low(032h)
  2570  00019A  0E32               	movwf	((c:___wmul@multiplicand)),c
  2571  00019C  6E07               	call	___wmul	;wreg free
  2572  00019E  ECAB  F005         	movff	0+?___wmul,??_calculatePWM+0+0
  2573  0001A2  C005  F023         	movff	1+?___wmul,??_calculatePWM+0+0+1
  2574  0001A6  C006  F024         	movlw	0
  2575  0001AA  0E00               	btfsc	(??_calculatePWM+0+0+1)&0ffh,c,7
  2576  0001AC  BE24               	movlw	255
  2577  0001AE  0EFF               	movwf	(??_calculatePWM+0+0+2)&0ffh,c
  2578  0001B0  6E25               	movwf	(??_calculatePWM+0+0+3)&0ffh,c
  2579  0001B2  6E26               	movf	(??_calculatePWM+0+0),c,w
  2580  0001B4  5023               	addwf	((c:_suma_error)),c
  2581  0001B6  2642               	movf	(??_calculatePWM+0+1),c,w
  2582  0001B8  5024               	addwfc	((c:_suma_error+1)),c
  2583  0001BA  2243               	movf	(??_calculatePWM+0+2),c,w
  2584  0001BC  5025               	addwfc	((c:_suma_error+2)),c
  2585  0001BE  2244               	movf	(??_calculatePWM+0+3),c,w
  2586  0001C0  5026               	addwfc	((c:_suma_error+3)),c
  2587  0001C2  2245               
  2588                           	line	181
  2589                           	
  2590                           l1519:
  2591  0001C4                     ;main.c: 181:     suma_error /= 1000;
  2592                           	movff	(c:_suma_error),(c:___aldiv@dividend)
  2593  0001C4  C042  F011         	movff	(c:_suma_error+1),(c:___aldiv@dividend+1)
  2594  0001C8  C043  F012         	movff	(c:_suma_error+2),(c:___aldiv@dividend+2)
  2595  0001CC  C044  F013         	movff	(c:_suma_error+3),(c:___aldiv@dividend+3)
  2596  0001D0  C045  F014         	movlw	low(03E8h)
  2597  0001D4  0EE8               	movwf	((c:___aldiv@divisor)),c
  2598  0001D6  6E15               	movlw	high(03E8h)
  2599  0001D8  0E03               	movwf	((c:___aldiv@divisor+1)),c
  2600  0001DA  6E16               	movlw	low highword(03E8h)
  2601  0001DC  0E00               	movwf	((c:___aldiv@divisor+2)),c
  2602  0001DE  6E17               	movlw	high highword(03E8h)
  2603  0001E0  0E00               	movwf	((c:___aldiv@divisor+3)),c
  2604  0001E2  6E18               	call	___aldiv	;wreg free
  2605  0001E4  EC05  F002         	movff	0+?___aldiv,(c:_suma_error)
  2606  0001E8  C011  F042         	movff	1+?___aldiv,(c:_suma_error+1)
  2607  0001EC  C012  F043         	movff	2+?___aldiv,(c:_suma_error+2)
  2608  0001F0  C013  F044         	movff	3+?___aldiv,(c:_suma_error+3)
  2609  0001F4  C014  F045         	
  2610                           	line	182
  2611                           	
  2612                           l1521:
  2613  0001F8                     ;main.c: 182:     velocity = (int32_t)(error - error_ant)*20;
  2614                           	movff	(c:_error_ant),??_calculatePWM+0+0
  2615  0001F8  C04A  F023         	movff	(c:_error_ant+1),??_calculatePWM+0+0+1
  2616  0001FC  C04B  F024         	comf	(??_calculatePWM+0+0),c
  2617  000200  1E23               	comf	(??_calculatePWM+0+1),c
  2618  000202  1E24               	infsnz	(??_calculatePWM+0+0),c
  2619  000204  4A23               	incf	(??_calculatePWM+0+1),c
  2620  000206  2A24               	movf	((c:_error)),c,w
  2621  000208  504C               	addwf	(??_calculatePWM+0+0),c
  2622  00020A  2623               	movf	((c:_error+1)),c,w
  2623  00020C  504D               	addwfc	(??_calculatePWM+0+1),c
  2624  00020E  2224               	movff	??_calculatePWM+0+0,(c:___lmul@multiplier)
  2625  000210  C023  F005         	movff	??_calculatePWM+0+1,(c:___lmul@multiplier+1)
  2626  000214  C024  F006         	movlw	0
  2627  000218  0E00               	btfsc	((c:___lmul@multiplier+1)),c,7
  2628  00021A  BE06               	movlw	-1
  2629  00021C  0EFF               	movwf	((c:___lmul@multiplier+2)),c
  2630  00021E  6E07               	movwf	((c:___lmul@multiplier+3)),c
  2631  000220  6E08               	movlw	low(014h)
  2632  000222  0E14               	movwf	((c:___lmul@multiplicand)),c
  2633  000224  6E09               	movlw	high(014h)
  2634  000226  0E00               	movwf	((c:___lmul@multiplicand+1)),c
  2635  000228  6E0A               	movlw	low highword(014h)
  2636  00022A  0E00               	movwf	((c:___lmul@multiplicand+2)),c
  2637  00022C  6E0B               	movlw	high highword(014h)
  2638  00022E  0E00               	movwf	((c:___lmul@multiplicand+3)),c
  2639  000230  6E0C               	call	___lmul	;wreg free
  2640  000232  EC72  F005         	movff	0+?___lmul,(c:_velocity)
  2641  000236  C005  F03A         	movff	1+?___lmul,(c:_velocity+1)
  2642  00023A  C006  F03B         	movff	2+?___lmul,(c:_velocity+2)
  2643  00023E  C007  F03C         	movff	3+?___lmul,(c:_velocity+3)
  2644  000242  C008  F03D         	
  2645                           	line	183
  2646                           	
  2647                           l1523:
  2648  000246                     ;main.c: 183:     volt = (PID.Kp * error) + (PID.Ki * suma_error) + (PID.Kd*velocity);
  2649                           	movff	(c:_error),(c:___lmul@multiplier)
  2650  000246  C04C  F005         	movff	(c:_error+1),(c:___lmul@multiplier+1)
  2651  00024A  C04D  F006         	movlw	0
  2652  00024E  0E00               	btfsc	((c:___lmul@multiplier+1)),c,7
  2653  000250  BE06               	movlw	-1
  2654  000252  0EFF               	movwf	((c:___lmul@multiplier+2)),c
  2655  000254  6E07               	movwf	((c:___lmul@multiplier+3)),c
  2656  000256  6E08               	movff	(c:_PID),(c:___lmul@multiplicand)
  2657  000258  C02E  F009         	movff	(c:_PID+1),(c:___lmul@multiplicand+1)
  2658  00025C  C02F  F00A         	movff	(c:_PID+2),(c:___lmul@multiplicand+2)
  2659  000260  C030  F00B         	movff	(c:_PID+3),(c:___lmul@multiplicand+3)
  2660  000264  C031  F00C         	call	___lmul	;wreg free
  2661  000268  EC72  F005         	movff	0+?___lmul,??_calculatePWM+0+0
  2662  00026C  C005  F023         	movff	1+?___lmul,??_calculatePWM+0+0+1
  2663  000270  C006  F024         	movff	2+?___lmul,??_calculatePWM+0+0+2
  2664  000274  C007  F025         	movff	3+?___lmul,??_calculatePWM+0+0+3
  2665  000278  C008  F026         	
  2666                           	movff	0+((c:_PID)+04h),(c:___lmul@multiplier)
  2667  00027C  C032  F005         	movff	1+((c:_PID)+04h),(c:___lmul@multiplier+1)
  2668  000280  C033  F006         	movff	2+((c:_PID)+04h),(c:___lmul@multiplier+2)
  2669  000284  C034  F007         	movff	3+((c:_PID)+04h),(c:___lmul@multiplier+3)
  2670  000288  C035  F008         	movff	(c:_suma_error),(c:___lmul@multiplicand)
  2671  00028C  C042  F009         	movff	(c:_suma_error+1),(c:___lmul@multiplicand+1)
  2672  000290  C043  F00A         	movff	(c:_suma_error+2),(c:___lmul@multiplicand+2)
  2673  000294  C044  F00B         	movff	(c:_suma_error+3),(c:___lmul@multiplicand+3)
  2674  000298  C045  F00C         	call	___lmul	;wreg free
  2675  00029C  EC72  F005         	movf	(0+?___lmul),c,w
  2676  0002A0  5005               	addwf	(??_calculatePWM+0+0),c,w
  2677  0002A2  2423               	movwf	(??_calculatePWM+4+0)&0ffh,c
  2678  0002A4  6E27               	movf	(1+?___lmul),c,w
  2679  0002A6  5006               	addwfc	(??_calculatePWM+0+1),c,w
  2680  0002A8  2024               	movwf	1+(??_calculatePWM+4+0)&0ffh,c
  2681  0002AA  6E28               	
  2682                           	movf	(2+?___lmul),c,w
  2683  0002AC  5007               	addwfc	(??_calculatePWM+0+2),c,w
  2684  0002AE  2025               	movwf	2+(??_calculatePWM+4+0)&0ffh,c
  2685  0002B0  6E29               	
  2686                           	movf	(3+?___lmul),c,w
  2687  0002B2  5008               	addwfc	(??_calculatePWM+0+3),c,w
  2688  0002B4  2026               	movwf	3+(??_calculatePWM+4+0)&0ffh,c
  2689  0002B6  6E2A               	movff	0+((c:_PID)+08h),(c:___lmul@multiplier)
  2690  0002B8  C036  F005         	movff	1+((c:_PID)+08h),(c:___lmul@multiplier+1)
  2691  0002BC  C037  F006         	movff	2+((c:_PID)+08h),(c:___lmul@multiplier+2)
  2692  0002C0  C038  F007         	movff	3+((c:_PID)+08h),(c:___lmul@multiplier+3)
  2693  0002C4  C039  F008         	movff	(c:_velocity),(c:___lmul@multiplicand)
  2694  0002C8  C03A  F009         	movff	(c:_velocity+1),(c:___lmul@multiplicand+1)
  2695  0002CC  C03B  F00A         	movff	(c:_velocity+2),(c:___lmul@multiplicand+2)
  2696  0002D0  C03C  F00B         	movff	(c:_velocity+3),(c:___lmul@multiplicand+3)
  2697  0002D4  C03D  F00C         	call	___lmul	;wreg free
  2698  0002D8  EC72  F005         	movf	(0+?___lmul),c,w
  2699  0002DC  5005               	addwf	(??_calculatePWM+4+0),c,w
  2700  0002DE  2427               	movwf	((c:_volt)),c
  2701  0002E0  6E3E               	movf	(1+?___lmul),c,w
  2702  0002E2  5006               	addwfc	(??_calculatePWM+4+1),c,w
  2703  0002E4  2028               	movwf	1+((c:_volt)),c
  2704  0002E6  6E3F               	
  2705                           	movf	(2+?___lmul),c,w
  2706  0002E8  5007               	addwfc	(??_calculatePWM+4+2),c,w
  2707  0002EA  2029               	movwf	2+((c:_volt)),c
  2708  0002EC  6E40               	
  2709                           	movf	(3+?___lmul),c,w
  2710  0002EE  5008               	addwfc	(??_calculatePWM+4+3),c,w
  2711  0002F0  202A               	movwf	3+((c:_volt)),c
  2712  0002F2  6E41               	line	184
  2713                           	
  2714                           l1525:
  2715  0002F4                     ;main.c: 184:     volt /= 100;
  2716                           	movff	(c:_volt),(c:___aldiv@dividend)
  2717  0002F4  C03E  F011         	movff	(c:_volt+1),(c:___aldiv@dividend+1)
  2718  0002F8  C03F  F012         	movff	(c:_volt+2),(c:___aldiv@dividend+2)
  2719  0002FC  C040  F013         	movff	(c:_volt+3),(c:___aldiv@dividend+3)
  2720  000300  C041  F014         	movlw	low(064h)
  2721  000304  0E64               	movwf	((c:___aldiv@divisor)),c
  2722  000306  6E15               	movlw	high(064h)
  2723  000308  0E00               	movwf	((c:___aldiv@divisor+1)),c
  2724  00030A  6E16               	movlw	low highword(064h)
  2725  00030C  0E00               	movwf	((c:___aldiv@divisor+2)),c
  2726  00030E  6E17               	movlw	high highword(064h)
  2727  000310  0E00               	movwf	((c:___aldiv@divisor+3)),c
  2728  000312  6E18               	call	___aldiv	;wreg free
  2729  000314  EC05  F002         	movff	0+?___aldiv,(c:_volt)
  2730  000318  C011  F03E         	movff	1+?___aldiv,(c:_volt+1)
  2731  00031C  C012  F03F         	movff	2+?___aldiv,(c:_volt+2)
  2732  000320  C013  F040         	movff	3+?___aldiv,(c:_volt+3)
  2733  000324  C014  F041         	
  2734                           	line	185
  2735                           	
  2736                           l1527:
  2737  000328                     ;main.c: 185:     error_ant = error;
  2738                           	movff	(c:_error),(c:_error_ant)
  2739  000328  C04C  F04A         	movff	(c:_error+1),(c:_error_ant+1)
  2740  00032C  C04D  F04B         	line	187
  2741                           	
  2742                           l1529:
  2743  000330                     ;main.c: 187:     if(volt < 0)
  2744                           	btfsc	((c:_volt+3)),c,7
  2745  000330  BE41               	goto	u820
  2746  000332  EF9F  F001         	goto	u821
  2747  000336  EF9D  F001         
  2748                           u821:
  2749  00033A                     	goto	l178
  2750  00033A  EFB0  F001         u820:
  2751  00033E                     	line	189
  2752                           	
  2753                           l1531:
  2754  00033E                     ;main.c: 188:     {;main.c: 189:         GPREG.DIRCTRL = 0;
  2755                           	bcf	((c:_GPREG)),c,0
  2756  00033E  9050               	line	190
  2757                           	
  2758                           l1533:
  2759  000340                     ;main.c: 190:         volt = ~volt;
  2760                           	comf	((c:_volt)),c,w
  2761  000340  1C3E               
  2762                           	movwf	((c:_volt)),c
  2763  000342  6E3E               	comf	((c:_volt+1)),c,w
  2764  000344  1C3F               	movwf	1+((c:_volt)),c
  2765  000346  6E3F               	
  2766                           	comf	((c:_volt+2)),c,w
  2767  000348  1C40               	movwf	2+((c:_volt)),c
  2768  00034A  6E40               	
  2769                           	comf	((c:_volt+3)),c,w
  2770  00034C  1C41               	movwf	3+((c:_volt)),c
  2771  00034E  6E41               	
  2772                           	line	191
  2773                           ;main.c: 191:         volt++;
  2774                           	movlw	low(01h)
  2775  000350  0E01               	addwf	((c:_volt)),c
  2776  000352  263E               	movlw	0
  2777  000354  0E00               	addwfc	((c:_volt+1)),c
  2778  000356  223F               	addwfc	((c:_volt+2)),c
  2779  000358  2240               	addwfc	((c:_volt+3)),c
  2780  00035A  2241               	line	192
  2781                           ;main.c: 192:     } else {
  2782                           	goto	l1535
  2783  00035C  EFB3  F001         	
  2784                           l178:
  2785  000360                     	line	193
  2786                           ;main.c: 193:         GPREG.DIRCTRL = 1;
  2787                           	bsf	((c:_GPREG)),c,0
  2788  000360  8050               	goto	l1535
  2789  000362  EFB3  F001         	line	194
  2790                           ;main.c: 194:     }
  2791                           	
  2792                           l179:
  2793  000366                     	line	196
  2794                           	
  2795                           l1535:
  2796  000366                     ;main.c: 196:     if(volt > 6300)
  2797                           	btfsc	((c:_volt+3)),c,7
  2798  000366  BE41               	goto	u831
  2799  000368  EFC2  F001         	movf	((c:_volt+3)),c,w
  2800  00036C  5041               	iorwf	((c:_volt+2)),c,w
  2801  00036E  1040               	bnz	u830
  2802  000370  E10B               	movlw	157
  2803  000372  0E9D               	subwf	 ((c:_volt)),c,w
  2804  000374  5C3E               	movlw	24
  2805  000376  0E18               	subwfb	((c:_volt+1)),c,w
  2806  000378  583F               	btfss	status,0
  2807  00037A  A0D8               	goto	u831
  2808  00037C  EFC2  F001         	goto	u830
  2809  000380  EFC4  F001         
  2810                           u831:
  2811  000384                     	goto	l1539
  2812  000384  EFCE  F001         u830:
  2813  000388                     	line	198
  2814                           	
  2815                           l1537:
  2816  000388                     ;main.c: 197:     {;main.c: 198:         volt = 6300;
  2817                           	movlw	low(0189Ch)
  2818  000388  0E9C               	movwf	((c:_volt)),c
  2819  00038A  6E3E               	movlw	high(0189Ch)
  2820  00038C  0E18               	movwf	((c:_volt+1)),c
  2821  00038E  6E3F               	movlw	low highword(0189Ch)
  2822  000390  0E00               	movwf	((c:_volt+2)),c
  2823  000392  6E40               	movlw	high highword(0189Ch)
  2824  000394  0E00               	movwf	((c:_volt+3)),c
  2825  000396  6E41               	goto	l1539
  2826  000398  EFCE  F001         	line	199
  2827                           ;main.c: 199:     }
  2828                           	
  2829                           l180:
  2830  00039C                     	line	201
  2831                           	
  2832                           l1539:
  2833  00039C                     ;main.c: 201:     volt = (volt*1022)/6300;
  2834                           	movff	(c:_volt),(c:___lmul@multiplier)
  2835  00039C  C03E  F005         	movff	(c:_volt+1),(c:___lmul@multiplier+1)
  2836  0003A0  C03F  F006         	movff	(c:_volt+2),(c:___lmul@multiplier+2)
  2837  0003A4  C040  F007         	movff	(c:_volt+3),(c:___lmul@multiplier+3)
  2838  0003A8  C041  F008         	movlw	low(03FEh)
  2839  0003AC  0EFE               	movwf	((c:___lmul@multiplicand)),c
  2840  0003AE  6E09               	movlw	high(03FEh)
  2841  0003B0  0E03               	movwf	((c:___lmul@multiplicand+1)),c
  2842  0003B2  6E0A               	movlw	low highword(03FEh)
  2843  0003B4  0E00               	movwf	((c:___lmul@multiplicand+2)),c
  2844  0003B6  6E0B               	movlw	high highword(03FEh)
  2845  0003B8  0E00               	movwf	((c:___lmul@multiplicand+3)),c
  2846  0003BA  6E0C               	call	___lmul	;wreg free
  2847  0003BC  EC72  F005         	movff	0+?___lmul,(c:___aldiv@dividend)
  2848  0003C0  C005  F011         	movff	1+?___lmul,(c:___aldiv@dividend+1)
  2849  0003C4  C006  F012         	movff	2+?___lmul,(c:___aldiv@dividend+2)
  2850  0003C8  C007  F013         	movff	3+?___lmul,(c:___aldiv@dividend+3)
  2851  0003CC  C008  F014         	
  2852                           	movlw	low(0189Ch)
  2853  0003D0  0E9C               	movwf	((c:___aldiv@divisor)),c
  2854  0003D2  6E15               	movlw	high(0189Ch)
  2855  0003D4  0E18               	movwf	((c:___aldiv@divisor+1)),c
  2856  0003D6  6E16               	movlw	low highword(0189Ch)
  2857  0003D8  0E00               	movwf	((c:___aldiv@divisor+2)),c
  2858  0003DA  6E17               	movlw	high highword(0189Ch)
  2859  0003DC  0E00               	movwf	((c:___aldiv@divisor+3)),c
  2860  0003DE  6E18               	call	___aldiv	;wreg free
  2861  0003E0  EC05  F002         	movff	0+?___aldiv,(c:_volt)
  2862  0003E4  C011  F03E         	movff	1+?___aldiv,(c:_volt+1)
  2863  0003E8  C012  F03F         	movff	2+?___aldiv,(c:_volt+2)
  2864  0003EC  C013  F040         	movff	3+?___aldiv,(c:_volt+3)
  2865  0003F0  C014  F041         	
  2866                           	line	203
  2867                           	
  2868                           l1541:
  2869  0003F4                     ;main.c: 203:     return volt;
  2870                           	movff	(c:_volt),(c:?_calculatePWM)
  2871  0003F4  C03E  F01F         	movff	(c:_volt+1),(c:?_calculatePWM+1)
  2872  0003F8  C03F  F020         	movff	(c:_volt+2),(c:?_calculatePWM+2)
  2873  0003FC  C040  F021         	movff	(c:_volt+3),(c:?_calculatePWM+3)
  2874  000400  C041  F022         	goto	l181
  2875  000404  EF04  F002         	
  2876                           l1543:
  2877  000408                     	line	204
  2878                           	
  2879                           l181:
  2880  000408                     	return	;funcret
  2881  000408  0012               	opt stack 0
  2882                           GLOBAL	__end_of_calculatePWM
  2883                           	__end_of_calculatePWM:
  2884  00040A                     	signat	_calculatePWM,4220
  2885                           	global	___wmul
  2886                           
  2887 ;; *************** function ___wmul *****************
  2888 ;; Defined at:
  2889 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  multiplier      2    4[COMRAM] unsigned int 
  2892 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  product         2    8[COMRAM] unsigned int 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  2    4[COMRAM] unsigned int 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0, prodl, prodh
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2904 ;;      Params:         4       0       0       0
  2905 ;;      Locals:         2       0       0       0
  2906 ;;      Temps:          0       0       0       0
  2907 ;;      Totals:         6       0       0       0
  2908 ;;Total ram usage:        6 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    1
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_calculatePWM
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           psect	text13,class=CODE,space=0,reloc=2,group=1
  2918                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  2919                           	line	15
  2920                           global __ptext13
  2921                           __ptext13:
  2922  000B56                     psect	text13
  2923                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  2924                           	line	15
  2925                           	global	__size_of___wmul
  2926                           	__size_of___wmul	equ	__end_of___wmul-___wmul
  2927  0000                     	
  2928                           ___wmul:
  2929  000B56                     ;incstack = 0
  2930                           	opt	stack 28
  2931                           	line	37
  2932                           	
  2933                           l1285:
  2934  000B56                     	movf	((c:___wmul@multiplier)),c,w
  2935  000B56  5005               	mulwf	((c:___wmul@multiplicand)),c
  2936  000B58  0207               	movff	prodl,(c:___wmul@product)
  2937  000B5A  CFF3 F009          	movff	prodh,(c:___wmul@product+1)
  2938  000B5E  CFF4 F00A          	line	38
  2939                           	movf	((c:___wmul@multiplier)),c,w
  2940  000B62  5005               	mulwf	(0+((c:___wmul@multiplicand)+01h)),c
  2941  000B64  0208               	movf	(prodl),c,w
  2942  000B66  50F3               	addwf	((c:___wmul@product+1)),c
  2943  000B68  260A               
  2944                           	line	39
  2945                           	movf	(0+((c:___wmul@multiplier)+01h)),c,w
  2946  000B6A  5006               	mulwf	((c:___wmul@multiplicand)),c
  2947  000B6C  0207               	movf	(prodl),c,w
  2948  000B6E  50F3               	addwf	((c:___wmul@product+1)),c
  2949  000B70  260A               
  2950                           	line	52
  2951                           	
  2952                           l1287:
  2953  000B72                     	movff	(c:___wmul@product),(c:?___wmul)
  2954  000B72  C009  F005         	movff	(c:___wmul@product+1),(c:?___wmul+1)
  2955  000B76  C00A  F006         	goto	l222
  2956  000B7A  EFBF  F005         	
  2957                           l1289:
  2958  000B7E                     	line	53
  2959                           	
  2960                           l222:
  2961  000B7E                     	return	;funcret
  2962  000B7E  0012               	opt stack 0
  2963                           GLOBAL	__end_of___wmul
  2964                           	__end_of___wmul:
  2965  000B80                     	signat	___wmul,8314
  2966                           	global	___aldiv
  2967                           
  2968 ;; *************** function ___aldiv *****************
  2969 ;; Defined at:
  2970 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  dividend        4   16[COMRAM] long 
  2973 ;;  divisor         4   20[COMRAM] long 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  quotient        4   26[COMRAM] long 
  2976 ;;  sign            1   25[COMRAM] unsigned char 
  2977 ;;  counter         1   24[COMRAM] unsigned char 
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  4   16[COMRAM] long 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2, status,0
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2987 ;;      Params:         8       0       0       0
  2988 ;;      Locals:         6       0       0       0
  2989 ;;      Temps:          0       0       0       0
  2990 ;;      Totals:        14       0       0       0
  2991 ;;Total ram usage:       14 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    1
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_calculatePWM
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           psect	text14,class=CODE,space=0,reloc=2,group=1
  3001                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  3002                           	line	7
  3003                           global __ptext14
  3004                           __ptext14:
  3005  00040A                     psect	text14
  3006                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  3007                           	line	7
  3008                           	global	__size_of___aldiv
  3009                           	__size_of___aldiv	equ	__end_of___aldiv-___aldiv
  3010  0000                     	
  3011                           ___aldiv:
  3012  00040A                     ;incstack = 0
  3013                           	opt	stack 28
  3014                           	line	13
  3015                           	
  3016                           l1323:
  3017  00040A                     	movlw	low(0)
  3018  00040A  0E00               	movwf	((c:___aldiv@sign)),c
  3019  00040C  6E1A               	line	14
  3020                           	
  3021                           l1325:
  3022  00040E                     	btfsc	((c:___aldiv@divisor+3)),c,7
  3023  00040E  BE18               	goto	u560
  3024  000410  EF0E  F002         	goto	u561
  3025  000414  EF0C  F002         
  3026                           u561:
  3027  000418                     	goto	l1331
  3028  000418  EF1A  F002         u560:
  3029  00041C                     	line	15
  3030                           	
  3031                           l1327:
  3032  00041C                     	comf	((c:___aldiv@divisor+3)),c
  3033  00041C  1E18               	comf	((c:___aldiv@divisor+2)),c
  3034  00041E  1E17               	comf	((c:___aldiv@divisor+1)),c
  3035  000420  1E16               	negf	((c:___aldiv@divisor)),c
  3036  000422  6C15               	movlw	0
  3037  000424  0E00               	addwfc	((c:___aldiv@divisor+1)),c
  3038  000426  2216               	addwfc	((c:___aldiv@divisor+2)),c
  3039  000428  2217               	addwfc	((c:___aldiv@divisor+3)),c
  3040  00042A  2218               	line	16
  3041                           	
  3042                           l1329:
  3043  00042C                     	movlw	low(01h)
  3044  00042C  0E01               	movwf	((c:___aldiv@sign)),c
  3045  00042E  6E1A               	goto	l1331
  3046  000430  EF1A  F002         	line	17
  3047                           	
  3048                           l291:
  3049  000434                     	line	18
  3050                           	
  3051                           l1331:
  3052  000434                     	btfsc	((c:___aldiv@dividend+3)),c,7
  3053  000434  BE14               	goto	u570
  3054  000436  EF21  F002         	goto	u571
  3055  00043A  EF1F  F002         
  3056                           u571:
  3057  00043E                     	goto	l1337
  3058  00043E  EF2D  F002         u570:
  3059  000442                     	line	19
  3060                           	
  3061                           l1333:
  3062  000442                     	comf	((c:___aldiv@dividend+3)),c
  3063  000442  1E14               	comf	((c:___aldiv@dividend+2)),c
  3064  000444  1E13               	comf	((c:___aldiv@dividend+1)),c
  3065  000446  1E12               	negf	((c:___aldiv@dividend)),c
  3066  000448  6C11               	movlw	0
  3067  00044A  0E00               	addwfc	((c:___aldiv@dividend+1)),c
  3068  00044C  2212               	addwfc	((c:___aldiv@dividend+2)),c
  3069  00044E  2213               	addwfc	((c:___aldiv@dividend+3)),c
  3070  000450  2214               	line	20
  3071                           	
  3072                           l1335:
  3073  000452                     	movlw	(01h)&0ffh
  3074  000452  0E01               	xorwf	((c:___aldiv@sign)),c
  3075  000454  1A1A               	goto	l1337
  3076  000456  EF2D  F002         	line	21
  3077                           	
  3078                           l292:
  3079  00045A                     	line	22
  3080                           	
  3081                           l1337:
  3082  00045A                     	movlw	low(0)
  3083  00045A  0E00               	movwf	((c:___aldiv@quotient)),c
  3084  00045C  6E1B               	movlw	high(0)
  3085  00045E  0E00               	movwf	((c:___aldiv@quotient+1)),c
  3086  000460  6E1C               	movlw	low highword(0)
  3087  000462  0E00               	movwf	((c:___aldiv@quotient+2)),c
  3088  000464  6E1D               	movlw	high highword(0)
  3089  000466  0E00               	movwf	((c:___aldiv@quotient+3)),c
  3090  000468  6E1E               	line	23
  3091                           	
  3092                           l1339:
  3093  00046A                     	movf	((c:___aldiv@divisor)),c,w
  3094  00046A  5015               iorwf	((c:___aldiv@divisor+1)),c,w
  3095  00046C  1016               iorwf	((c:___aldiv@divisor+2)),c,w
  3096  00046E  1017               iorwf	((c:___aldiv@divisor+3)),c,w
  3097  000470  1018               	btfsc	status,2
  3098  000472  B4D8               	goto	u581
  3099  000474  EF3E  F002         	goto	u580
  3100  000478  EF40  F002         
  3101                           u581:
  3102  00047C                     	goto	l1359
  3103  00047C  EF82  F002         u580:
  3104  000480                     	line	24
  3105                           	
  3106                           l1341:
  3107  000480                     	movlw	low(01h)
  3108  000480  0E01               	movwf	((c:___aldiv@counter)),c
  3109  000482  6E19               	line	25
  3110                           	goto	l1345
  3111  000484  EF4C  F002         	
  3112                           l295:
  3113  000488                     	line	26
  3114                           	
  3115                           l1343:
  3116  000488                     	bcf	status,0
  3117  000488  90D8               	rlcf	((c:___aldiv@divisor)),c
  3118  00048A  3615               	rlcf	((c:___aldiv@divisor+1)),c
  3119  00048C  3616               	rlcf	((c:___aldiv@divisor+2)),c
  3120  00048E  3617               	rlcf	((c:___aldiv@divisor+3)),c
  3121  000490  3618               	line	27
  3122                           	incf	((c:___aldiv@counter)),c
  3123  000492  2A19               	goto	l1345
  3124  000494  EF4C  F002         	line	28
  3125                           	
  3126                           l294:
  3127  000498                     	line	25
  3128                           	
  3129                           l1345:
  3130  000498                     	
  3131                           	btfss	((c:___aldiv@divisor+3)),c,(31)&7
  3132  000498  AE18               	goto	u591
  3133  00049A  EF51  F002         	goto	u590
  3134  00049E  EF53  F002         u591:
  3135  0004A2                     	goto	l1343
  3136  0004A2  EF44  F002         u590:
  3137  0004A6                     	goto	l1347
  3138  0004A6  EF57  F002         	
  3139                           l296:
  3140  0004AA                     	goto	l1347
  3141  0004AA  EF57  F002         	line	29
  3142                           	
  3143                           l297:
  3144  0004AE                     	line	30
  3145                           	
  3146                           l1347:
  3147  0004AE                     	bcf	status,0
  3148  0004AE  90D8               	rlcf	((c:___aldiv@quotient)),c
  3149  0004B0  361B               	rlcf	((c:___aldiv@quotient+1)),c
  3150  0004B2  361C               	rlcf	((c:___aldiv@quotient+2)),c
  3151  0004B4  361D               	rlcf	((c:___aldiv@quotient+3)),c
  3152  0004B6  361E               	line	31
  3153                           	
  3154                           l1349:
  3155  0004B8                     		movf	((c:___aldiv@divisor)),c,w
  3156  0004B8  5015               	subwf	((c:___aldiv@dividend)),c,w
  3157  0004BA  5C11               	movf	((c:___aldiv@divisor+1)),c,w
  3158  0004BC  5016               	subwfb	((c:___aldiv@dividend+1)),c,w
  3159  0004BE  5812               	movf	((c:___aldiv@divisor+2)),c,w
  3160  0004C0  5017               	subwfb	((c:___aldiv@dividend+2)),c,w
  3161  0004C2  5813               	movf	((c:___aldiv@divisor+3)),c,w
  3162  0004C4  5018               	subwfb	((c:___aldiv@dividend+3)),c,w
  3163  0004C6  5814               	btfss	status,0
  3164  0004C8  A0D8               	goto	u601
  3165  0004CA  EF69  F002         	goto	u600
  3166  0004CE  EF6B  F002         
  3167                           u601:
  3168  0004D2                     	goto	l1355
  3169  0004D2  EF76  F002         u600:
  3170  0004D6                     	line	32
  3171                           	
  3172                           l1351:
  3173  0004D6                     	movf	((c:___aldiv@divisor)),c,w
  3174  0004D6  5015               	subwf	((c:___aldiv@dividend)),c
  3175  0004D8  5E11               	movf	((c:___aldiv@divisor+1)),c,w
  3176  0004DA  5016               	subwfb	((c:___aldiv@dividend+1)),c
  3177  0004DC  5A12               	movf	((c:___aldiv@divisor+2)),c,w
  3178  0004DE  5017               	subwfb	((c:___aldiv@dividend+2)),c
  3179  0004E0  5A13               	movf	((c:___aldiv@divisor+3)),c,w
  3180  0004E2  5018               	subwfb	((c:___aldiv@dividend+3)),c
  3181  0004E4  5A14               	line	33
  3182                           	
  3183                           l1353:
  3184  0004E6                     	bsf	(0+(0/8)+(c:___aldiv@quotient)),c,(0)&7
  3185  0004E6  801B               	goto	l1355
  3186  0004E8  EF76  F002         	line	34
  3187                           	
  3188                           l298:
  3189  0004EC                     	line	35
  3190                           	
  3191                           l1355:
  3192  0004EC                     	bcf	status,0
  3193  0004EC  90D8               	rrcf	((c:___aldiv@divisor+3)),c
  3194  0004EE  3218               	rrcf	((c:___aldiv@divisor+2)),c
  3195  0004F0  3217               	rrcf	((c:___aldiv@divisor+1)),c
  3196  0004F2  3216               	rrcf	((c:___aldiv@divisor)),c
  3197  0004F4  3215               	line	36
  3198                           	
  3199                           l1357:
  3200  0004F6                     	decfsz	((c:___aldiv@counter)),c
  3201  0004F6  2E19               	
  3202                           	goto	l1347
  3203  0004F8  EF57  F002         	goto	l1359
  3204  0004FC  EF82  F002         	
  3205                           l299:
  3206  000500                     	goto	l1359
  3207  000500  EF82  F002         	line	37
  3208                           	
  3209                           l293:
  3210  000504                     	line	38
  3211                           	
  3212                           l1359:
  3213  000504                     	movf	((c:___aldiv@sign)),c,w
  3214  000504  501A               	btfsc	status,2
  3215  000506  B4D8               	goto	u611
  3216  000508  EF88  F002         	goto	u610
  3217  00050C  EF8A  F002         u611:
  3218  000510                     	goto	l1363
  3219  000510  EF94  F002         u610:
  3220  000514                     	line	39
  3221                           	
  3222                           l1361:
  3223  000514                     	comf	((c:___aldiv@quotient+3)),c
  3224  000514  1E1E               	comf	((c:___aldiv@quotient+2)),c
  3225  000516  1E1D               	comf	((c:___aldiv@quotient+1)),c
  3226  000518  1E1C               	negf	((c:___aldiv@quotient)),c
  3227  00051A  6C1B               	movlw	0
  3228  00051C  0E00               	addwfc	((c:___aldiv@quotient+1)),c
  3229  00051E  221C               	addwfc	((c:___aldiv@quotient+2)),c
  3230  000520  221D               	addwfc	((c:___aldiv@quotient+3)),c
  3231  000522  221E               	goto	l1363
  3232  000524  EF94  F002         	
  3233                           l300:
  3234  000528                     	line	40
  3235                           	
  3236                           l1363:
  3237  000528                     	movff	(c:___aldiv@quotient),(c:?___aldiv)
  3238  000528  C01B  F011         	movff	(c:___aldiv@quotient+1),(c:?___aldiv+1)
  3239  00052C  C01C  F012         	movff	(c:___aldiv@quotient+2),(c:?___aldiv+2)
  3240  000530  C01D  F013         	movff	(c:___aldiv@quotient+3),(c:?___aldiv+3)
  3241  000534  C01E  F014         	goto	l301
  3242  000538  EF9E  F002         	
  3243                           l1365:
  3244  00053C                     	line	41
  3245                           	
  3246                           l301:
  3247  00053C                     	return	;funcret
  3248  00053C  0012               	opt stack 0
  3249                           GLOBAL	__end_of___aldiv
  3250                           	__end_of___aldiv:
  3251  00053E                     	signat	___aldiv,8316
  3252                           	global	_angleToCounts
  3253                           
  3254 ;; *************** function _angleToCounts *****************
  3255 ;; Defined at:
  3256 ;;		line 310 in file "main.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;  data            1    wreg     unsigned char 
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;  data            1   34[COMRAM] unsigned char 
  3261 ;;  counts          2   35[COMRAM] unsigned int 
  3262 ;;  angle           1   33[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  2   29[COMRAM] unsigned int 
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3272 ;;      Params:         2       0       0       0
  3273 ;;      Locals:         4       0       0       0
  3274 ;;      Temps:          2       0       0       0
  3275 ;;      Totals:         8       0       0       0
  3276 ;;Total ram usage:        8 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    2
  3279 ;; This function calls:
  3280 ;;		___awdiv
  3281 ;;		___awmod
  3282 ;;		___lldiv
  3283 ;;		___lmul
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           psect	text15,class=CODE,space=0,reloc=2,group=0
  3289                           	file	"main.c"
  3290                           	line	310
  3291                           global __ptext15
  3292                           __ptext15:
  3293  00062A                     psect	text15
  3294                           	file	"main.c"
  3295                           	line	310
  3296                           	global	__size_of_angleToCounts
  3297                           	__size_of_angleToCounts	equ	__end_of_angleToCounts-_angleToCounts
  3298  0000                     	
  3299                           _angleToCounts:
  3300  00062A                     ;incstack = 0
  3301                           	opt	stack 28
  3302                           ;angleToCounts@data stored from wreg
  3303                           	movwf	((c:angleToCounts@data)),c
  3304  00062A  6E23               	line	312
  3305                           	
  3306                           l1493:
  3307  00062C                     ;main.c: 310: uint16_t angleToCounts(uint8_t data);main.c: 311: {;main.c: 312:     uint8
                                 _t angle = data%100;
  3308                           	movff	(c:angleToCounts@data),(c:___awmod@dividend)
  3309  00062C  C023  F005         	clrf	((c:___awmod@dividend+1)),c
  3310  000630  6A06               	movlw	high(064h)
  3311  000632  0E00               	movwf	((c:___awmod@divisor+1)),c
  3312  000634  6E08               	movlw	low(064h)
  3313  000636  0E64               	movwf	((c:___awmod@divisor)),c
  3314  000638  6E07               	call	___awmod	;wreg free
  3315  00063A  EC88  F003         	movf	(0+?___awmod),c,w
  3316  00063E  5005               	movwf	((c:angleToCounts@angle)),c
  3317  000640  6E22               	line	313
  3318                           ;main.c: 313:     uint16_t counts = (uint16_t)(((uint32_t)angle*8400)/360);
  3319                           	movf	((c:angleToCounts@angle)),c,w
  3320  000642  5022               	movwf	((c:___lmul@multiplier)),c
  3321  000644  6E05               	clrf	((c:___lmul@multiplier+1)),c
  3322  000646  6A06               	clrf	((c:___lmul@multiplier+2)),c
  3323  000648  6A07               	clrf	((c:___lmul@multiplier+3)),c
  3324  00064A  6A08               
  3325                           	movlw	low(020D0h)
  3326  00064C  0ED0               	movwf	((c:___lmul@multiplicand)),c
  3327  00064E  6E09               	movlw	high(020D0h)
  3328  000650  0E20               	movwf	((c:___lmul@multiplicand+1)),c
  3329  000652  6E0A               	movlw	low highword(020D0h)
  3330  000654  0E00               	movwf	((c:___lmul@multiplicand+2)),c
  3331  000656  6E0B               	movlw	high highword(020D0h)
  3332  000658  0E00               	movwf	((c:___lmul@multiplicand+3)),c
  3333  00065A  6E0C               	call	___lmul	;wreg free
  3334  00065C  EC72  F005         	movff	0+?___lmul,(c:___lldiv@dividend)
  3335  000660  C005  F011         	movff	1+?___lmul,(c:___lldiv@dividend+1)
  3336  000664  C006  F012         	movff	2+?___lmul,(c:___lldiv@dividend+2)
  3337  000668  C007  F013         	movff	3+?___lmul,(c:___lldiv@dividend+3)
  3338  00066C  C008  F014         	
  3339                           	movlw	low(0168h)
  3340  000670  0E68               	movwf	((c:___lldiv@divisor)),c
  3341  000672  6E15               	movlw	high(0168h)
  3342  000674  0E01               	movwf	((c:___lldiv@divisor+1)),c
  3343  000676  6E16               	movlw	low highword(0168h)
  3344  000678  0E00               	movwf	((c:___lldiv@divisor+2)),c
  3345  00067A  6E17               	movlw	high highword(0168h)
  3346  00067C  0E00               	movwf	((c:___lldiv@divisor+3)),c
  3347  00067E  6E18               	call	___lldiv	;wreg free
  3348  000680  EC58  F004         	movff	0+?___lldiv,(c:angleToCounts@counts)
  3349  000684  C011  F024         	movff	1+?___lldiv,(c:angleToCounts@counts+1)
  3350  000688  C012  F025         	line	315
  3351                           	
  3352                           l1495:
  3353  00068C                     ;main.c: 315:     if(1050 < counts)
  3354                           		movlw	27
  3355  00068C  0E1B               	subwf	 ((c:angleToCounts@counts)),c,w
  3356  00068E  5C24               	movlw	4
  3357  000690  0E04               	subwfb	((c:angleToCounts@counts+1)),c,w
  3358  000692  5825               	btfss	status,0
  3359  000694  A0D8               	goto	u801
  3360  000696  EF4F  F003         	goto	u800
  3361  00069A  EF51  F003         
  3362                           u801:
  3363  00069E                     	goto	l1499
  3364  00069E  EF57  F003         u800:
  3365  0006A2                     	line	317
  3366                           	
  3367                           l1497:
  3368  0006A2                     ;main.c: 316:     {;main.c: 317:         counts = 1050;
  3369                           	movlw	high(041Ah)
  3370  0006A2  0E04               	movwf	((c:angleToCounts@counts+1)),c
  3371  0006A4  6E25               	movlw	low(041Ah)
  3372  0006A6  0E1A               	movwf	((c:angleToCounts@counts)),c
  3373  0006A8  6E24               	goto	l1499
  3374  0006AA  EF57  F003         	line	318
  3375                           ;main.c: 318:     }
  3376                           	
  3377                           l216:
  3378  0006AE                     	line	320
  3379                           	
  3380                           l1499:
  3381  0006AE                     ;main.c: 320:     if(data / 100 == 0)
  3382                           	movff	(c:angleToCounts@data),(c:___awdiv@dividend)
  3383  0006AE  C023  F005         	clrf	((c:___awdiv@dividend+1)),c
  3384  0006B2  6A06               	movlw	high(064h)
  3385  0006B4  0E00               	movwf	((c:___awdiv@divisor+1)),c
  3386  0006B6  6E08               	movlw	low(064h)
  3387  0006B8  0E64               	movwf	((c:___awdiv@divisor)),c
  3388  0006BA  6E07               	call	___awdiv	;wreg free
  3389  0006BC  EC9F  F002         	movf	(0+?___awdiv),c,w
  3390  0006C0  5005               iorwf	(1+?___awdiv),c,w
  3391  0006C2  1006               	btfss	status,2
  3392  0006C4  A4D8               	goto	u811
  3393  0006C6  EF67  F003         	goto	u810
  3394  0006CA  EF69  F003         
  3395                           u811:
  3396  0006CE                     	goto	l1503
  3397  0006CE  EF79  F003         u810:
  3398  0006D2                     	line	322
  3399                           	
  3400                           l1501:
  3401  0006D2                     ;main.c: 321:     {;main.c: 322:         counts = 4200 - counts;
  3402                           	movff	(c:angleToCounts@counts),??_angleToCounts+0+0
  3403  0006D2  C024  F020         	movff	(c:angleToCounts@counts+1),??_angleToCounts+0+0+1
  3404  0006D6  C025  F021         	comf	(??_angleToCounts+0+0),c
  3405  0006DA  1E20               	comf	(??_angleToCounts+0+1),c
  3406  0006DC  1E21               	infsnz	(??_angleToCounts+0+0),c
  3407  0006DE  4A20               	incf	(??_angleToCounts+0+1),c
  3408  0006E0  2A21               	movlw	low(01068h)
  3409  0006E2  0E68               	addwf	(??_angleToCounts+0+0),c,w
  3410  0006E4  2420               	movwf	((c:angleToCounts@counts)),c
  3411  0006E6  6E24               	movlw	high(01068h)
  3412  0006E8  0E10               	addwfc	(??_angleToCounts+0+1),c,w
  3413  0006EA  2021               	movwf	1+((c:angleToCounts@counts)),c
  3414  0006EC  6E25               	line	323
  3415                           ;main.c: 323:     } else {
  3416                           	goto	l1505
  3417  0006EE  EF81  F003         	
  3418                           l217:
  3419  0006F2                     	line	324
  3420                           	
  3421                           l1503:
  3422  0006F2                     ;main.c: 324:         counts = 4200 + counts;
  3423                           	movlw	low(01068h)
  3424  0006F2  0E68               	addwf	((c:angleToCounts@counts)),c,w
  3425  0006F4  2424               	movwf	((c:angleToCounts@counts)),c
  3426  0006F6  6E24               	movlw	high(01068h)
  3427  0006F8  0E10               	addwfc	((c:angleToCounts@counts+1)),c,w
  3428  0006FA  2025               	movwf	1+((c:angleToCounts@counts)),c
  3429  0006FC  6E25               	goto	l1505
  3430  0006FE  EF81  F003         	line	325
  3431                           ;main.c: 325:     }
  3432                           	
  3433                           l218:
  3434  000702                     	line	327
  3435                           	
  3436                           l1505:
  3437  000702                     ;main.c: 327:     return counts;
  3438                           	movff	(c:angleToCounts@counts),(c:?_angleToCounts)
  3439  000702  C024  F01E         	movff	(c:angleToCounts@counts+1),(c:?_angleToCounts+1)
  3440  000706  C025  F01F         	goto	l219
  3441  00070A  EF87  F003         	
  3442                           l1507:
  3443  00070E                     	line	328
  3444                           	
  3445                           l219:
  3446  00070E                     	return	;funcret
  3447  00070E  0012               	opt stack 0
  3448                           GLOBAL	__end_of_angleToCounts
  3449                           	__end_of_angleToCounts:
  3450  000710                     	signat	_angleToCounts,4218
  3451                           	global	___lmul
  3452                           
  3453 ;; *************** function ___lmul *****************
  3454 ;; Defined at:
  3455 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  multiplier      4    4[COMRAM] unsigned long 
  3458 ;;  multiplicand    4    8[COMRAM] unsigned long 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  product         4   12[COMRAM] unsigned long 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  4    4[COMRAM] unsigned long 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3470 ;;      Params:         8       0       0       0
  3471 ;;      Locals:         4       0       0       0
  3472 ;;      Temps:          0       0       0       0
  3473 ;;      Totals:        12       0       0       0
  3474 ;;Total ram usage:       12 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    1
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_calculatePWM
  3481 ;;		_angleToCounts
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           psect	text16,class=CODE,space=0,reloc=2,group=1
  3485                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  3486                           	line	15
  3487                           global __ptext16
  3488                           __ptext16:
  3489  000AE4                     psect	text16
  3490                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  3491                           	line	15
  3492                           	global	__size_of___lmul
  3493                           	__size_of___lmul	equ	__end_of___lmul-___lmul
  3494  0000                     	
  3495                           ___lmul:
  3496  000AE4                     ;incstack = 0
  3497                           	opt	stack 28
  3498                           	line	119
  3499                           	
  3500                           l1291:
  3501  000AE4                     	movlw	low(0)
  3502  000AE4  0E00               	movwf	((c:___lmul@product)),c
  3503  000AE6  6E0D               	movlw	high(0)
  3504  000AE8  0E00               	movwf	((c:___lmul@product+1)),c
  3505  000AEA  6E0E               	movlw	low highword(0)
  3506  000AEC  0E00               	movwf	((c:___lmul@product+2)),c
  3507  000AEE  6E0F               	movlw	high highword(0)
  3508  000AF0  0E00               	movwf	((c:___lmul@product+3)),c
  3509  000AF2  6E10               	goto	l1293
  3510  000AF4  EF7C  F005         	line	120
  3511                           	
  3512                           l231:
  3513  000AF8                     	line	121
  3514                           	
  3515                           l1293:
  3516  000AF8                     	
  3517                           	btfss	((c:___lmul@multiplier)),c,(0)&7
  3518  000AF8  A005               	goto	u511
  3519  000AFA  EF81  F005         	goto	u510
  3520  000AFE  EF83  F005         u511:
  3521  000B02                     	goto	l1297
  3522  000B02  EF8D  F005         u510:
  3523  000B06                     	line	122
  3524                           	
  3525                           l1295:
  3526  000B06                     	movf	((c:___lmul@multiplicand)),c,w
  3527  000B06  5009               	addwf	((c:___lmul@product)),c
  3528  000B08  260D               	movf	((c:___lmul@multiplicand+1)),c,w
  3529  000B0A  500A               	addwfc	((c:___lmul@product+1)),c
  3530  000B0C  220E               	movf	((c:___lmul@multiplicand+2)),c,w
  3531  000B0E  500B               	addwfc	((c:___lmul@product+2)),c
  3532  000B10  220F               	movf	((c:___lmul@multiplicand+3)),c,w
  3533  000B12  500C               	addwfc	((c:___lmul@product+3)),c
  3534  000B14  2210               	goto	l1297
  3535  000B16  EF8D  F005         	
  3536                           l232:
  3537  000B1A                     	line	123
  3538                           	
  3539                           l1297:
  3540  000B1A                     	bcf	status,0
  3541  000B1A  90D8               	rlcf	((c:___lmul@multiplicand)),c
  3542  000B1C  3609               	rlcf	((c:___lmul@multiplicand+1)),c
  3543  000B1E  360A               	rlcf	((c:___lmul@multiplicand+2)),c
  3544  000B20  360B               	rlcf	((c:___lmul@multiplicand+3)),c
  3545  000B22  360C               	line	124
  3546                           	
  3547                           l1299:
  3548  000B24                     	bcf	status,0
  3549  000B24  90D8               	rrcf	((c:___lmul@multiplier+3)),c
  3550  000B26  3208               	rrcf	((c:___lmul@multiplier+2)),c
  3551  000B28  3207               	rrcf	((c:___lmul@multiplier+1)),c
  3552  000B2A  3206               	rrcf	((c:___lmul@multiplier)),c
  3553  000B2C  3205               	line	125
  3554                           	movf	((c:___lmul@multiplier)),c,w
  3555  000B2E  5005               iorwf	((c:___lmul@multiplier+1)),c,w
  3556  000B30  1006               iorwf	((c:___lmul@multiplier+2)),c,w
  3557  000B32  1007               iorwf	((c:___lmul@multiplier+3)),c,w
  3558  000B34  1008               	btfss	status,2
  3559  000B36  A4D8               	goto	u521
  3560  000B38  EFA0  F005         	goto	u520
  3561  000B3C  EFA2  F005         
  3562                           u521:
  3563  000B40                     	goto	l1293
  3564  000B40  EF7C  F005         u520:
  3565  000B44                     	
  3566                           l233:
  3567  000B44                     	line	128
  3568                           	movff	(c:___lmul@product),(c:?___lmul)
  3569  000B44  C00D  F005         	movff	(c:___lmul@product+1),(c:?___lmul+1)
  3570  000B48  C00E  F006         	movff	(c:___lmul@product+2),(c:?___lmul+2)
  3571  000B4C  C00F  F007         	movff	(c:___lmul@product+3),(c:?___lmul+3)
  3572  000B50  C010  F008         	line	129
  3573                           	
  3574                           l234:
  3575  000B54                     	return	;funcret
  3576  000B54  0012               	opt stack 0
  3577                           GLOBAL	__end_of___lmul
  3578                           	__end_of___lmul:
  3579  000B56                     	signat	___lmul,8316
  3580                           	global	___lldiv
  3581                           
  3582 ;; *************** function ___lldiv *****************
  3583 ;; Defined at:
  3584 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\__lldiv.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  dividend        4   16[COMRAM] unsigned long 
  3587 ;;  divisor         4   20[COMRAM] unsigned long 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  quotient        4   24[COMRAM] unsigned long 
  3590 ;;  counter         1   28[COMRAM] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  4   16[COMRAM] unsigned long 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3600 ;;      Params:         8       0       0       0
  3601 ;;      Locals:         5       0       0       0
  3602 ;;      Temps:          0       0       0       0
  3603 ;;      Totals:        13       0       0       0
  3604 ;;Total ram usage:       13 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    1
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_angleToCounts
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           psect	text17,class=CODE,space=0,reloc=2,group=1
  3614                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\__lldiv.c"
  3615                           	line	7
  3616                           global __ptext17
  3617                           __ptext17:
  3618  0008B0                     psect	text17
  3619                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\__lldiv.c"
  3620                           	line	7
  3621                           	global	__size_of___lldiv
  3622                           	__size_of___lldiv	equ	__end_of___lldiv-___lldiv
  3623  0000                     	
  3624                           ___lldiv:
  3625  0008B0                     ;incstack = 0
  3626                           	opt	stack 28
  3627                           	line	13
  3628                           	
  3629                           l1301:
  3630  0008B0                     	movlw	low(0)
  3631  0008B0  0E00               	movwf	((c:___lldiv@quotient)),c
  3632  0008B2  6E19               	movlw	high(0)
  3633  0008B4  0E00               	movwf	((c:___lldiv@quotient+1)),c
  3634  0008B6  6E1A               	movlw	low highword(0)
  3635  0008B8  0E00               	movwf	((c:___lldiv@quotient+2)),c
  3636  0008BA  6E1B               	movlw	high highword(0)
  3637  0008BC  0E00               	movwf	((c:___lldiv@quotient+3)),c
  3638  0008BE  6E1C               	line	14
  3639                           	
  3640                           l1303:
  3641  0008C0                     	movf	((c:___lldiv@divisor)),c,w
  3642  0008C0  5015               iorwf	((c:___lldiv@divisor+1)),c,w
  3643  0008C2  1016               iorwf	((c:___lldiv@divisor+2)),c,w
  3644  0008C4  1017               iorwf	((c:___lldiv@divisor+3)),c,w
  3645  0008C6  1018               	btfsc	status,2
  3646  0008C8  B4D8               	goto	u531
  3647  0008CA  EF69  F004         	goto	u530
  3648  0008CE  EF6B  F004         
  3649                           u531:
  3650  0008D2                     	goto	l249
  3651  0008D2  EFAB  F004         u530:
  3652  0008D6                     	line	15
  3653                           	
  3654                           l1305:
  3655  0008D6                     	movlw	low(01h)
  3656  0008D6  0E01               	movwf	((c:___lldiv@counter)),c
  3657  0008D8  6E1D               	line	16
  3658                           	goto	l1309
  3659  0008DA  EF77  F004         	
  3660                           l251:
  3661  0008DE                     	line	17
  3662                           	
  3663                           l1307:
  3664  0008DE                     	bcf	status,0
  3665  0008DE  90D8               	rlcf	((c:___lldiv@divisor)),c
  3666  0008E0  3615               	rlcf	((c:___lldiv@divisor+1)),c
  3667  0008E2  3616               	rlcf	((c:___lldiv@divisor+2)),c
  3668  0008E4  3617               	rlcf	((c:___lldiv@divisor+3)),c
  3669  0008E6  3618               	line	18
  3670                           	incf	((c:___lldiv@counter)),c
  3671  0008E8  2A1D               	goto	l1309
  3672  0008EA  EF77  F004         	line	19
  3673                           	
  3674                           l250:
  3675  0008EE                     	line	16
  3676                           	
  3677                           l1309:
  3678  0008EE                     	
  3679                           	btfss	((c:___lldiv@divisor+3)),c,(31)&7
  3680  0008EE  AE18               	goto	u541
  3681  0008F0  EF7C  F004         	goto	u540
  3682  0008F4  EF7E  F004         u541:
  3683  0008F8                     	goto	l1307
  3684  0008F8  EF6F  F004         u540:
  3685  0008FC                     	goto	l1311
  3686  0008FC  EF82  F004         	
  3687                           l252:
  3688  000900                     	goto	l1311
  3689  000900  EF82  F004         	line	20
  3690                           	
  3691                           l253:
  3692  000904                     	line	21
  3693                           	
  3694                           l1311:
  3695  000904                     	bcf	status,0
  3696  000904  90D8               	rlcf	((c:___lldiv@quotient)),c
  3697  000906  3619               	rlcf	((c:___lldiv@quotient+1)),c
  3698  000908  361A               	rlcf	((c:___lldiv@quotient+2)),c
  3699  00090A  361B               	rlcf	((c:___lldiv@quotient+3)),c
  3700  00090C  361C               	line	22
  3701                           	
  3702                           l1313:
  3703  00090E                     		movf	((c:___lldiv@divisor)),c,w
  3704  00090E  5015               	subwf	((c:___lldiv@dividend)),c,w
  3705  000910  5C11               	movf	((c:___lldiv@divisor+1)),c,w
  3706  000912  5016               	subwfb	((c:___lldiv@dividend+1)),c,w
  3707  000914  5812               	movf	((c:___lldiv@divisor+2)),c,w
  3708  000916  5017               	subwfb	((c:___lldiv@dividend+2)),c,w
  3709  000918  5813               	movf	((c:___lldiv@divisor+3)),c,w
  3710  00091A  5018               	subwfb	((c:___lldiv@dividend+3)),c,w
  3711  00091C  5814               	btfss	status,0
  3712  00091E  A0D8               	goto	u551
  3713  000920  EF94  F004         	goto	u550
  3714  000924  EF96  F004         
  3715                           u551:
  3716  000928                     	goto	l1319
  3717  000928  EFA1  F004         u550:
  3718  00092C                     	line	23
  3719                           	
  3720                           l1315:
  3721  00092C                     	movf	((c:___lldiv@divisor)),c,w
  3722  00092C  5015               	subwf	((c:___lldiv@dividend)),c
  3723  00092E  5E11               	movf	((c:___lldiv@divisor+1)),c,w
  3724  000930  5016               	subwfb	((c:___lldiv@dividend+1)),c
  3725  000932  5A12               	movf	((c:___lldiv@divisor+2)),c,w
  3726  000934  5017               	subwfb	((c:___lldiv@dividend+2)),c
  3727  000936  5A13               	movf	((c:___lldiv@divisor+3)),c,w
  3728  000938  5018               	subwfb	((c:___lldiv@dividend+3)),c
  3729  00093A  5A14               	line	24
  3730                           	
  3731                           l1317:
  3732  00093C                     	bsf	(0+(0/8)+(c:___lldiv@quotient)),c,(0)&7
  3733  00093C  8019               	goto	l1319
  3734  00093E  EFA1  F004         	line	25
  3735                           	
  3736                           l254:
  3737  000942                     	line	26
  3738                           	
  3739                           l1319:
  3740  000942                     	bcf	status,0
  3741  000942  90D8               	rrcf	((c:___lldiv@divisor+3)),c
  3742  000944  3218               	rrcf	((c:___lldiv@divisor+2)),c
  3743  000946  3217               	rrcf	((c:___lldiv@divisor+1)),c
  3744  000948  3216               	rrcf	((c:___lldiv@divisor)),c
  3745  00094A  3215               	line	27
  3746                           	
  3747                           l1321:
  3748  00094C                     	decfsz	((c:___lldiv@counter)),c
  3749  00094C  2E1D               	
  3750                           	goto	l1311
  3751  00094E  EF82  F004         	goto	l249
  3752  000952  EFAB  F004         	
  3753                           l255:
  3754  000956                     	line	28
  3755                           	
  3756                           l249:
  3757  000956                     	line	29
  3758                           	movff	(c:___lldiv@quotient),(c:?___lldiv)
  3759  000956  C019  F011         	movff	(c:___lldiv@quotient+1),(c:?___lldiv+1)
  3760  00095A  C01A  F012         	movff	(c:___lldiv@quotient+2),(c:?___lldiv+2)
  3761  00095E  C01B  F013         	movff	(c:___lldiv@quotient+3),(c:?___lldiv+3)
  3762  000962  C01C  F014         	line	30
  3763                           	
  3764                           l256:
  3765  000966                     	return	;funcret
  3766  000966  0012               	opt stack 0
  3767                           GLOBAL	__end_of___lldiv
  3768                           	__end_of___lldiv:
  3769  000968                     	signat	___lldiv,8316
  3770                           	global	___awmod
  3771                           
  3772 ;; *************** function ___awmod *****************
  3773 ;; Defined at:
  3774 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  dividend        2    4[COMRAM] int 
  3777 ;;  divisor         2    6[COMRAM] int 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  sign            1    9[COMRAM] unsigned char 
  3780 ;;  counter         1    8[COMRAM] unsigned char 
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  2    4[COMRAM] int 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3790 ;;      Params:         4       0       0       0
  3791 ;;      Locals:         2       0       0       0
  3792 ;;      Temps:          0       0       0       0
  3793 ;;      Totals:         6       0       0       0
  3794 ;;Total ram usage:        6 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    1
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_angleToCounts
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           psect	text18,class=CODE,space=0,reloc=2,group=1
  3804                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
  3805                           	line	7
  3806                           global __ptext18
  3807                           __ptext18:
  3808  000710                     psect	text18
  3809                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
  3810                           	line	7
  3811                           	global	__size_of___awmod
  3812                           	__size_of___awmod	equ	__end_of___awmod-___awmod
  3813  0000                     	
  3814                           ___awmod:
  3815  000710                     ;incstack = 0
  3816                           	opt	stack 28
  3817                           	line	12
  3818                           	
  3819                           l1411:
  3820  000710                     	movlw	low(0)
  3821  000710  0E00               	movwf	((c:___awmod@sign)),c
  3822  000712  6E0A               	line	13
  3823                           	
  3824                           l1413:
  3825  000714                     	btfsc	((c:___awmod@dividend+1)),c,7
  3826  000714  BE06               	goto	u680
  3827  000716  EF91  F003         	goto	u681
  3828  00071A  EF8F  F003         
  3829                           u681:
  3830  00071E                     	goto	l1419
  3831  00071E  EF99  F003         u680:
  3832  000722                     	line	14
  3833                           	
  3834                           l1415:
  3835  000722                     	negf	((c:___awmod@dividend)),c
  3836  000722  6C05               	comf	((c:___awmod@dividend+1)),c
  3837  000724  1E06               	btfsc	status,0
  3838  000726  B0D8               	incf	((c:___awmod@dividend+1)),c
  3839  000728  2A06               	line	15
  3840                           	
  3841                           l1417:
  3842  00072A                     	movlw	low(01h)
  3843  00072A  0E01               	movwf	((c:___awmod@sign)),c
  3844  00072C  6E0A               	goto	l1419
  3845  00072E  EF99  F003         	line	16
  3846                           	
  3847                           l456:
  3848  000732                     	line	17
  3849                           	
  3850                           l1419:
  3851  000732                     	btfsc	((c:___awmod@divisor+1)),c,7
  3852  000732  BE08               	goto	u690
  3853  000734  EFA0  F003         	goto	u691
  3854  000738  EF9E  F003         
  3855                           u691:
  3856  00073C                     	goto	l1423
  3857  00073C  EFA6  F003         u690:
  3858  000740                     	line	18
  3859                           	
  3860                           l1421:
  3861  000740                     	negf	((c:___awmod@divisor)),c
  3862  000740  6C07               	comf	((c:___awmod@divisor+1)),c
  3863  000742  1E08               	btfsc	status,0
  3864  000744  B0D8               	incf	((c:___awmod@divisor+1)),c
  3865  000746  2A08               	goto	l1423
  3866  000748  EFA6  F003         	
  3867                           l457:
  3868  00074C                     	line	19
  3869                           	
  3870                           l1423:
  3871  00074C                     	movf	((c:___awmod@divisor)),c,w
  3872  00074C  5007               iorwf	((c:___awmod@divisor+1)),c,w
  3873  00074E  1008               	btfsc	status,2
  3874  000750  B4D8               	goto	u701
  3875  000752  EFAD  F003         	goto	u700
  3876  000756  EFAF  F003         
  3877                           u701:
  3878  00075A                     	goto	l1439
  3879  00075A  EFDF  F003         u700:
  3880  00075E                     	line	20
  3881                           	
  3882                           l1425:
  3883  00075E                     	movlw	low(01h)
  3884  00075E  0E01               	movwf	((c:___awmod@counter)),c
  3885  000760  6E09               	line	21
  3886                           	goto	l1429
  3887  000762  EFB9  F003         	
  3888                           l460:
  3889  000766                     	line	22
  3890                           	
  3891                           l1427:
  3892  000766                     	bcf	status,0
  3893  000766  90D8               	rlcf	((c:___awmod@divisor)),c
  3894  000768  3607               	rlcf	((c:___awmod@divisor+1)),c
  3895  00076A  3608               	line	23
  3896                           	incf	((c:___awmod@counter)),c
  3897  00076C  2A09               	goto	l1429
  3898  00076E  EFB9  F003         	line	24
  3899                           	
  3900                           l459:
  3901  000772                     	line	21
  3902                           	
  3903                           l1429:
  3904  000772                     	
  3905                           	btfss	((c:___awmod@divisor+1)),c,(15)&7
  3906  000772  AE08               	goto	u711
  3907  000774  EFBE  F003         	goto	u710
  3908  000778  EFC0  F003         u711:
  3909  00077C                     	goto	l1427
  3910  00077C  EFB3  F003         u710:
  3911  000780                     	goto	l1431
  3912  000780  EFC4  F003         	
  3913                           l461:
  3914  000784                     	goto	l1431
  3915  000784  EFC4  F003         	line	25
  3916                           	
  3917                           l462:
  3918  000788                     	line	26
  3919                           	
  3920                           l1431:
  3921  000788                     		movf	((c:___awmod@divisor)),c,w
  3922  000788  5007               	subwf	((c:___awmod@dividend)),c,w
  3923  00078A  5C05               	movf	((c:___awmod@divisor+1)),c,w
  3924  00078C  5008               	subwfb	((c:___awmod@dividend+1)),c,w
  3925  00078E  5806               	btfss	status,0
  3926  000790  A0D8               	goto	u721
  3927  000792  EFCD  F003         	goto	u720
  3928  000796  EFCF  F003         
  3929                           u721:
  3930  00079A                     	goto	l1435
  3931  00079A  EFD5  F003         u720:
  3932  00079E                     	line	27
  3933                           	
  3934                           l1433:
  3935  00079E                     	movf	((c:___awmod@divisor)),c,w
  3936  00079E  5007               	subwf	((c:___awmod@dividend)),c
  3937  0007A0  5E05               	movf	((c:___awmod@divisor+1)),c,w
  3938  0007A2  5008               	subwfb	((c:___awmod@dividend+1)),c
  3939  0007A4  5A06               
  3940                           	goto	l1435
  3941  0007A6  EFD5  F003         	
  3942                           l463:
  3943  0007AA                     	line	28
  3944                           	
  3945                           l1435:
  3946  0007AA                     	bcf	status,0
  3947  0007AA  90D8               	rrcf	((c:___awmod@divisor+1)),c
  3948  0007AC  3208               	rrcf	((c:___awmod@divisor)),c
  3949  0007AE  3207               	line	29
  3950                           	
  3951                           l1437:
  3952  0007B0                     	decfsz	((c:___awmod@counter)),c
  3953  0007B0  2E09               	
  3954                           	goto	l1431
  3955  0007B2  EFC4  F003         	goto	l1439
  3956  0007B6  EFDF  F003         	
  3957                           l464:
  3958  0007BA                     	goto	l1439
  3959  0007BA  EFDF  F003         	line	30
  3960                           	
  3961                           l458:
  3962  0007BE                     	line	31
  3963                           	
  3964                           l1439:
  3965  0007BE                     	movf	((c:___awmod@sign)),c,w
  3966  0007BE  500A               	btfsc	status,2
  3967  0007C0  B4D8               	goto	u731
  3968  0007C2  EFE5  F003         	goto	u730
  3969  0007C6  EFE7  F003         u731:
  3970  0007CA                     	goto	l1443
  3971  0007CA  EFED  F003         u730:
  3972  0007CE                     	line	32
  3973                           	
  3974                           l1441:
  3975  0007CE                     	negf	((c:___awmod@dividend)),c
  3976  0007CE  6C05               	comf	((c:___awmod@dividend+1)),c
  3977  0007D0  1E06               	btfsc	status,0
  3978  0007D2  B0D8               	incf	((c:___awmod@dividend+1)),c
  3979  0007D4  2A06               	goto	l1443
  3980  0007D6  EFED  F003         	
  3981                           l465:
  3982  0007DA                     	line	33
  3983                           	
  3984                           l1443:
  3985  0007DA                     	movff	(c:___awmod@dividend),(c:?___awmod)
  3986  0007DA  C005  F005         	movff	(c:___awmod@dividend+1),(c:?___awmod+1)
  3987  0007DE  C006  F006         	goto	l466
  3988  0007E2  EFF3  F003         	
  3989                           l1445:
  3990  0007E6                     	line	34
  3991                           	
  3992                           l466:
  3993  0007E6                     	return	;funcret
  3994  0007E6  0012               	opt stack 0
  3995                           GLOBAL	__end_of___awmod
  3996                           	__end_of___awmod:
  3997  0007E8                     	signat	___awmod,8314
  3998                           	global	___awdiv
  3999                           
  4000 ;; *************** function ___awdiv *****************
  4001 ;; Defined at:
  4002 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  dividend        2    4[COMRAM] int 
  4005 ;;  divisor         2    6[COMRAM] int 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  quotient        2   10[COMRAM] int 
  4008 ;;  sign            1    9[COMRAM] unsigned char 
  4009 ;;  counter         1    8[COMRAM] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  2    4[COMRAM] int 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4019 ;;      Params:         4       0       0       0
  4020 ;;      Locals:         4       0       0       0
  4021 ;;      Temps:          0       0       0       0
  4022 ;;      Totals:         8       0       0       0
  4023 ;;Total ram usage:        8 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    1
  4026 ;; This function calls:
  4027 ;;		Nothing
  4028 ;; This function is called by:
  4029 ;;		_angleToCounts
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           psect	text19,class=CODE,space=0,reloc=2,group=1
  4033                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  4034                           	line	7
  4035                           global __ptext19
  4036                           __ptext19:
  4037  00053E                     psect	text19
  4038                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
  4039                           	line	7
  4040                           	global	__size_of___awdiv
  4041                           	__size_of___awdiv	equ	__end_of___awdiv-___awdiv
  4042  0000                     	
  4043                           ___awdiv:
  4044  00053E                     ;incstack = 0
  4045                           	opt	stack 28
  4046                           	line	13
  4047                           	
  4048                           l1367:
  4049  00053E                     	movlw	low(0)
  4050  00053E  0E00               	movwf	((c:___awdiv@sign)),c
  4051  000540  6E0A               	line	14
  4052                           	
  4053                           l1369:
  4054  000542                     	btfsc	((c:___awdiv@divisor+1)),c,7
  4055  000542  BE08               	goto	u620
  4056  000544  EFA8  F002         	goto	u621
  4057  000548  EFA6  F002         
  4058                           u621:
  4059  00054C                     	goto	l1375
  4060  00054C  EFB0  F002         u620:
  4061  000550                     	line	15
  4062                           	
  4063                           l1371:
  4064  000550                     	negf	((c:___awdiv@divisor)),c
  4065  000550  6C07               	comf	((c:___awdiv@divisor+1)),c
  4066  000552  1E08               	btfsc	status,0
  4067  000554  B0D8               	incf	((c:___awdiv@divisor+1)),c
  4068  000556  2A08               	line	16
  4069                           	
  4070                           l1373:
  4071  000558                     	movlw	low(01h)
  4072  000558  0E01               	movwf	((c:___awdiv@sign)),c
  4073  00055A  6E0A               	goto	l1375
  4074  00055C  EFB0  F002         	line	17
  4075                           	
  4076                           l443:
  4077  000560                     	line	18
  4078                           	
  4079                           l1375:
  4080  000560                     	btfsc	((c:___awdiv@dividend+1)),c,7
  4081  000560  BE06               	goto	u630
  4082  000562  EFB7  F002         	goto	u631
  4083  000566  EFB5  F002         
  4084                           u631:
  4085  00056A                     	goto	l1381
  4086  00056A  EFBF  F002         u630:
  4087  00056E                     	line	19
  4088                           	
  4089                           l1377:
  4090  00056E                     	negf	((c:___awdiv@dividend)),c
  4091  00056E  6C05               	comf	((c:___awdiv@dividend+1)),c
  4092  000570  1E06               	btfsc	status,0
  4093  000572  B0D8               	incf	((c:___awdiv@dividend+1)),c
  4094  000574  2A06               	line	20
  4095                           	
  4096                           l1379:
  4097  000576                     	movlw	(01h)&0ffh
  4098  000576  0E01               	xorwf	((c:___awdiv@sign)),c
  4099  000578  1A0A               	goto	l1381
  4100  00057A  EFBF  F002         	line	21
  4101                           	
  4102                           l444:
  4103  00057E                     	line	22
  4104                           	
  4105                           l1381:
  4106  00057E                     	movlw	high(0)
  4107  00057E  0E00               	movwf	((c:___awdiv@quotient+1)),c
  4108  000580  6E0C               	movlw	low(0)
  4109  000582  0E00               	movwf	((c:___awdiv@quotient)),c
  4110  000584  6E0B               	line	23
  4111                           	
  4112                           l1383:
  4113  000586                     	movf	((c:___awdiv@divisor)),c,w
  4114  000586  5007               iorwf	((c:___awdiv@divisor+1)),c,w
  4115  000588  1008               	btfsc	status,2
  4116  00058A  B4D8               	goto	u641
  4117  00058C  EFCA  F002         	goto	u640
  4118  000590  EFCC  F002         
  4119                           u641:
  4120  000594                     	goto	l1403
  4121  000594  EF00  F003         u640:
  4122  000598                     	line	24
  4123                           	
  4124                           l1385:
  4125  000598                     	movlw	low(01h)
  4126  000598  0E01               	movwf	((c:___awdiv@counter)),c
  4127  00059A  6E09               	line	25
  4128                           	goto	l1389
  4129  00059C  EFD6  F002         	
  4130                           l447:
  4131  0005A0                     	line	26
  4132                           	
  4133                           l1387:
  4134  0005A0                     	bcf	status,0
  4135  0005A0  90D8               	rlcf	((c:___awdiv@divisor)),c
  4136  0005A2  3607               	rlcf	((c:___awdiv@divisor+1)),c
  4137  0005A4  3608               	line	27
  4138                           	incf	((c:___awdiv@counter)),c
  4139  0005A6  2A09               	goto	l1389
  4140  0005A8  EFD6  F002         	line	28
  4141                           	
  4142                           l446:
  4143  0005AC                     	line	25
  4144                           	
  4145                           l1389:
  4146  0005AC                     	
  4147                           	btfss	((c:___awdiv@divisor+1)),c,(15)&7
  4148  0005AC  AE08               	goto	u651
  4149  0005AE  EFDB  F002         	goto	u650
  4150  0005B2  EFDD  F002         u651:
  4151  0005B6                     	goto	l1387
  4152  0005B6  EFD0  F002         u650:
  4153  0005BA                     	goto	l1391
  4154  0005BA  EFE1  F002         	
  4155                           l448:
  4156  0005BE                     	goto	l1391
  4157  0005BE  EFE1  F002         	line	29
  4158                           	
  4159                           l449:
  4160  0005C2                     	line	30
  4161                           	
  4162                           l1391:
  4163  0005C2                     	bcf	status,0
  4164  0005C2  90D8               	rlcf	((c:___awdiv@quotient)),c
  4165  0005C4  360B               	rlcf	((c:___awdiv@quotient+1)),c
  4166  0005C6  360C               	line	31
  4167                           	
  4168                           l1393:
  4169  0005C8                     		movf	((c:___awdiv@divisor)),c,w
  4170  0005C8  5007               	subwf	((c:___awdiv@dividend)),c,w
  4171  0005CA  5C05               	movf	((c:___awdiv@divisor+1)),c,w
  4172  0005CC  5008               	subwfb	((c:___awdiv@dividend+1)),c,w
  4173  0005CE  5806               	btfss	status,0
  4174  0005D0  A0D8               	goto	u661
  4175  0005D2  EFED  F002         	goto	u660
  4176  0005D6  EFEF  F002         
  4177                           u661:
  4178  0005DA                     	goto	l1399
  4179  0005DA  EFF6  F002         u660:
  4180  0005DE                     	line	32
  4181                           	
  4182                           l1395:
  4183  0005DE                     	movf	((c:___awdiv@divisor)),c,w
  4184  0005DE  5007               	subwf	((c:___awdiv@dividend)),c
  4185  0005E0  5E05               	movf	((c:___awdiv@divisor+1)),c,w
  4186  0005E2  5008               	subwfb	((c:___awdiv@dividend+1)),c
  4187  0005E4  5A06               
  4188                           	line	33
  4189                           	
  4190                           l1397:
  4191  0005E6                     	bsf	(0+(0/8)+(c:___awdiv@quotient)),c,(0)&7
  4192  0005E6  800B               	goto	l1399
  4193  0005E8  EFF6  F002         	line	34
  4194                           	
  4195                           l450:
  4196  0005EC                     	line	35
  4197                           	
  4198                           l1399:
  4199  0005EC                     	bcf	status,0
  4200  0005EC  90D8               	rrcf	((c:___awdiv@divisor+1)),c
  4201  0005EE  3208               	rrcf	((c:___awdiv@divisor)),c
  4202  0005F0  3207               	line	36
  4203                           	
  4204                           l1401:
  4205  0005F2                     	decfsz	((c:___awdiv@counter)),c
  4206  0005F2  2E09               	
  4207                           	goto	l1391
  4208  0005F4  EFE1  F002         	goto	l1403
  4209  0005F8  EF00  F003         	
  4210                           l451:
  4211  0005FC                     	goto	l1403
  4212  0005FC  EF00  F003         	line	37
  4213                           	
  4214                           l445:
  4215  000600                     	line	38
  4216                           	
  4217                           l1403:
  4218  000600                     	movf	((c:___awdiv@sign)),c,w
  4219  000600  500A               	btfsc	status,2
  4220  000602  B4D8               	goto	u671
  4221  000604  EF06  F003         	goto	u670
  4222  000608  EF08  F003         u671:
  4223  00060C                     	goto	l1407
  4224  00060C  EF0E  F003         u670:
  4225  000610                     	line	39
  4226                           	
  4227                           l1405:
  4228  000610                     	negf	((c:___awdiv@quotient)),c
  4229  000610  6C0B               	comf	((c:___awdiv@quotient+1)),c
  4230  000612  1E0C               	btfsc	status,0
  4231  000614  B0D8               	incf	((c:___awdiv@quotient+1)),c
  4232  000616  2A0C               	goto	l1407
  4233  000618  EF0E  F003         	
  4234                           l452:
  4235  00061C                     	line	40
  4236                           	
  4237                           l1407:
  4238  00061C                     	movff	(c:___awdiv@quotient),(c:?___awdiv)
  4239  00061C  C00B  F005         	movff	(c:___awdiv@quotient+1),(c:?___awdiv+1)
  4240  000620  C00C  F006         	goto	l453
  4241  000624  EF14  F003         	
  4242                           l1409:
  4243  000628                     	line	41
  4244                           	
  4245                           l453:
  4246  000628                     	return	;funcret
  4247  000628  0012               	opt stack 0
  4248                           GLOBAL	__end_of___awdiv
  4249                           	__end_of___awdiv:
  4250  00062A                     	signat	___awdiv,8314
  4251                           	global	_ISR_high
  4252                           
  4253 ;; *************** function _ISR_high *****************
  4254 ;; Defined at:
  4255 ;;		line 66 in file "main.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4269 ;;      Params:         0       0       0       0
  4270 ;;      Locals:         0       0       0       0
  4271 ;;      Temps:          4       0       0       0
  4272 ;;      Totals:         4       0       0       0
  4273 ;;Total ram usage:        4 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		Interrupt level 2
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           psect	intcode,class=CODE,space=0,reloc=2
  4282                           global __pintcode
  4283                           __pintcode:
  4284  000008                     psect	intcode
  4285                           	file	"main.c"
  4286                           	line	66
  4287                           	global	__size_of_ISR_high
  4288                           	__size_of_ISR_high	equ	__end_of_ISR_high-_ISR_high
  4289  0000                     	
  4290                           _ISR_high:
  4291  000008                     ;incstack = 0
  4292                           	opt	stack 28
  4293                           	bsf int$flags,1,c ;set compiler interrupt flag (level 2)
  4294  000008  825A               	movff	fsr2l+0,??_ISR_high+2
  4295  00000A  CFD9 F003          	movff	fsr2h+0,??_ISR_high+3
  4296  00000E  CFDA F004          	line	69
  4297                           	
  4298                           i2l1203:
  4299  000012                     ;main.c: 69:     if(SSPIE == 1 && SSPIF == 1)
  4300                           	btfss	c:(31979/8),(31979)&7	;volatile
  4301  000012  A69D               	goto	i2u35_41
  4302  000014  EF0E  F000         	goto	i2u35_40
  4303  000018  EF10  F000         i2u35_41:
  4304  00001C                     	goto	i2l153
  4305  00001C  EF55  F000         i2u35_40:
  4306  000020                     	
  4307                           i2l1205:
  4308  000020                     	btfss	c:(31987/8),(31987)&7	;volatile
  4309  000020  A69E               	goto	i2u36_41
  4310  000022  EF15  F000         	goto	i2u36_40
  4311  000026  EF17  F000         i2u36_41:
  4312  00002A                     	goto	i2l153
  4313  00002A  EF55  F000         i2u36_40:
  4314  00002E                     	line	72
  4315                           	
  4316                           i2l1207:
  4317  00002E                     ;main.c: 70:     {;main.c: 72:         if(SSPOV == 1 || WCOL == 1)
  4318                           	btfsc	c:(32310/8),(32310)&7	;volatile
  4319  00002E  BCC6               	goto	i2u37_41
  4320  000030  EF1C  F000         	goto	i2u37_40
  4321  000034  EF1E  F000         i2u37_41:
  4322  000038                     	goto	i2l156
  4323  000038  EF25  F000         i2u37_40:
  4324  00003C                     	
  4325                           i2l1209:
  4326  00003C                     	btfss	c:(32311/8),(32311)&7	;volatile
  4327  00003C  AEC6               	goto	i2u38_41
  4328  00003E  EF23  F000         	goto	i2u38_40
  4329  000042  EF25  F000         i2u38_41:
  4330  000046                     	goto	i2l1211
  4331  000046  EF2C  F000         i2u38_40:
  4332  00004A                     	
  4333                           i2l156:
  4334  00004A                     	line	74
  4335                           ;main.c: 73:         {;main.c: 74:             i2cData = SSPBUF;
  4336                           	movff	(c:4041),(c:_i2cData)	;volatile
  4337  00004A  CFC9 F04E          	line	75
  4338                           ;main.c: 75:             SSPOV = 0;
  4339                           	bcf	c:(32310/8),(32310)&7	;volatile
  4340  00004E  9CC6               	line	76
  4341                           ;main.c: 76:             WCOL = 0;
  4342                           	bcf	c:(32311/8),(32311)&7	;volatile
  4343  000050  9EC6               	line	77
  4344                           ;main.c: 77:             CKP = 1;
  4345                           	bsf	c:(32308/8),(32308)&7	;volatile
  4346  000052  88C6               	goto	i2l1211
  4347  000054  EF2C  F000         	line	78
  4348                           ;main.c: 78:         }
  4349                           	
  4350                           i2l154:
  4351  000058                     	line	80
  4352                           	
  4353                           i2l1211:
  4354  000058                     ;main.c: 80:         if(SSPBUF == SSPADD)
  4355                           	movf	((c:4040)),c,w	;volatile
  4356  000058  50C8               xorwf	((c:4041)),c,w	;volatile
  4357  00005A  18C9               	btfss	status,2
  4358  00005C  A4D8               	goto	i2u39_41
  4359  00005E  EF33  F000         	goto	i2u39_40
  4360  000062  EF35  F000         
  4361                           i2u39_41:
  4362  000066                     	goto	i2l157
  4363  000066  EF38  F000         i2u39_40:
  4364  00006A                     	line	83
  4365                           	
  4366                           i2l1213:
  4367  00006A                     ;main.c: 81:         {;main.c: 83:            GPREG.I2CADD = 1;
  4368                           	bsf	((c:_GPREG)),c,3
  4369  00006A  8650               	line	84
  4370                           ;main.c: 84:            BF = 0;
  4371                           	bcf	c:(32312/8),(32312)&7	;volatile
  4372  00006C  90C7               	line	85
  4373                           ;main.c: 85:            CKP = 1;
  4374                           	bsf	c:(32308/8),(32308)&7	;volatile
  4375  00006E  88C6               	line	86
  4376                           ;main.c: 86:         }
  4377                           	
  4378                           i2l157:
  4379  000070                     	line	88
  4380                           ;main.c: 88:         if(GPREG.I2CADD == 1 && 0 != SSPBUF && SSPBUF != SSPADD)
  4381                           	btfss	((c:_GPREG)),c,3
  4382  000070  A650               	goto	i2u40_41
  4383  000072  EF3D  F000         	goto	i2u40_40
  4384  000076  EF3F  F000         i2u40_41:
  4385  00007A                     	goto	i2l158
  4386  00007A  EF54  F000         i2u40_40:
  4387  00007E                     	
  4388                           i2l1215:
  4389  00007E                     	movf	((c:4041)),c,w	;volatile
  4390  00007E  50C9               	btfsc	status,2
  4391  000080  B4D8               	goto	i2u41_41
  4392  000082  EF45  F000         	goto	i2u41_40
  4393  000086  EF47  F000         i2u41_41:
  4394  00008A                     	goto	i2l158
  4395  00008A  EF54  F000         i2u41_40:
  4396  00008E                     	
  4397                           i2l1217:
  4398  00008E                     	movf	((c:4040)),c,w	;volatile
  4399  00008E  50C8               xorwf	((c:4041)),c,w	;volatile
  4400  000090  18C9               	btfsc	status,2
  4401  000092  B4D8               	goto	i2u42_41
  4402  000094  EF4E  F000         	goto	i2u42_40
  4403  000098  EF50  F000         
  4404                           i2u42_41:
  4405  00009C                     	goto	i2l158
  4406  00009C  EF54  F000         i2u42_40:
  4407  0000A0                     	line	90
  4408                           	
  4409                           i2l1219:
  4410  0000A0                     ;main.c: 89:         {;main.c: 90:             i2cData = SSPBUF;
  4411                           	movff	(c:4041),(c:_i2cData)	;volatile
  4412  0000A0  CFC9 F04E          	line	91
  4413                           ;main.c: 91:             CKP = 1;
  4414                           	bsf	c:(32308/8),(32308)&7	;volatile
  4415  0000A4  88C6               	line	92
  4416                           ;main.c: 92:             GPREG.I2CADD = 0;
  4417                           	bcf	((c:_GPREG)),c,3
  4418  0000A6  9650               	line	93
  4419                           ;main.c: 93:         }
  4420                           	
  4421                           i2l158:
  4422  0000A8                     	line	95
  4423                           ;main.c: 95:         SSPIF = 0;
  4424                           	bcf	c:(31987/8),(31987)&7	;volatile
  4425  0000A8  969E               	line	96
  4426                           ;main.c: 96:     }
  4427                           	
  4428                           i2l153:
  4429  0000AA                     	line	98
  4430                           ;main.c: 98:     if(1 == TMR1IE && 1 == TMR1IF)
  4431                           	btfss	c:(31976/8),(31976)&7	;volatile
  4432  0000AA  A09D               	goto	i2u43_41
  4433  0000AC  EF5A  F000         	goto	i2u43_40
  4434  0000B0  EF5C  F000         i2u43_41:
  4435  0000B4                     	goto	i2l1227
  4436  0000B4  EF6C  F000         i2u43_40:
  4437  0000B8                     	
  4438                           i2l1221:
  4439  0000B8                     	btfss	c:(31984/8),(31984)&7	;volatile
  4440  0000B8  A09E               	goto	i2u44_41
  4441  0000BA  EF61  F000         	goto	i2u44_40
  4442  0000BE  EF63  F000         i2u44_41:
  4443  0000C2                     	goto	i2l1227
  4444  0000C2  EF6C  F000         i2u44_40:
  4445  0000C6                     	line	100
  4446                           	
  4447                           i2l1223:
  4448  0000C6                     ;main.c: 99:     {;main.c: 100:         GPREG.STCTRL = 1;
  4449                           	bsf	((c:_GPREG)),c,1
  4450  0000C6  8250               	line	101
  4451                           ;main.c: 101:         TMR1IF = 0;
  4452                           	bcf	c:(31984/8),(31984)&7	;volatile
  4453  0000C8  909E               	line	102
  4454                           ;main.c: 102:         TMR1ON = 0;
  4455                           	bcf	c:(32360/8),(32360)&7	;volatile
  4456  0000CA  90CD               	line	103
  4457                           	
  4458                           i2l1225:
  4459  0000CC                     ;main.c: 103:         TMR1 = 65485;
  4460                           	movlw	high(0FFCDh)
  4461  0000CC  0EFF               	movwf	((c:4046+1)),c	;volatile
  4462  0000CE  6ECF               	movlw	low(0FFCDh)
  4463  0000D0  0ECD               	movwf	((c:4046)),c	;volatile
  4464  0000D2  6ECE               	goto	i2l1227
  4465  0000D4  EF6C  F000         	line	105
  4466                           ;main.c: 105:     }
  4467                           	
  4468                           i2l159:
  4469  0000D8                     	line	107
  4470                           	
  4471                           i2l1227:
  4472  0000D8                     ;main.c: 107:     if((1 == TXIE) && (1 == TXIF))
  4473                           	btfss	c:(31980/8),(31980)&7	;volatile
  4474  0000D8  A89D               	goto	i2u45_41
  4475  0000DA  EF71  F000         	goto	i2u45_40
  4476  0000DE  EF73  F000         i2u45_41:
  4477  0000E2                     	goto	i2l164
  4478  0000E2  EFA9  F000         i2u45_40:
  4479  0000E6                     	
  4480                           i2l1229:
  4481  0000E6                     	btfss	c:(31988/8),(31988)&7	;volatile
  4482  0000E6  A89E               	goto	i2u46_41
  4483  0000E8  EF78  F000         	goto	i2u46_40
  4484  0000EC  EF7A  F000         i2u46_41:
  4485  0000F0                     	goto	i2l164
  4486  0000F0  EFA9  F000         i2u46_40:
  4487  0000F4                     	line	109
  4488                           	
  4489                           i2l1231:
  4490  0000F4                     ;main.c: 108:     {;main.c: 109:         if(4 < cursor)
  4491                           		movf	((c:_cursor)),c,w
  4492  0000F4  504F               	xorlw	80h
  4493  0000F6  0A80               	addlw	-(80h^05h)
  4494  0000F8  0F7B               	btfss	status,0
  4495  0000FA  A0D8               	goto	i2u47_41
  4496  0000FC  EF82  F000         	goto	i2u47_40
  4497  000100  EF84  F000         
  4498                           i2u47_41:
  4499  000104                     	goto	i2l1235
  4500  000104  EF88  F000         i2u47_40:
  4501  000108                     	line	111
  4502                           	
  4503                           i2l1233:
  4504  000108                     ;main.c: 110:         {;main.c: 111:             TXREG = 0x2C;
  4505                           	movlw	low(02Ch)
  4506  000108  0E2C               	movwf	((c:4013)),c	;volatile
  4507  00010A  6EAD               	line	112
  4508                           ;main.c: 112:         } else {
  4509                           	goto	i2l1237
  4510  00010C  EF97  F000         	
  4511                           i2l161:
  4512  000110                     	line	113
  4513                           	
  4514                           i2l1235:
  4515  000110                     ;main.c: 113:             TXREG = *(string_pos + cursor);
  4516                           	movff	(c:_cursor),??_ISR_high+0+0
  4517  000110  C04F  F001         	clrf	(??_ISR_high+0+0+1)&0ffh,c
  4518  000114  6A02               	btfsc	(??_ISR_high+0+0)&0ffh,c,7
  4519  000116  BE01               	decf	(??_ISR_high+0+0+1)&0ffh,c
  4520  000118  0602               	movf	(??_ISR_high+0+0),c,w
  4521  00011A  5001               	addwf	((c:_string_pos)),c,w
  4522  00011C  2446               	movwf	c:fsr2l
  4523  00011E  6ED9               	movf	(??_ISR_high+0+1),c,w
  4524  000120  5002               	addwfc	((c:_string_pos+1)),c,w
  4525  000122  2047               	movwf	1+c:fsr2l
  4526  000124  6EDA               	movf	indf2,w
  4527  000126  50DF               	movwf	((c:4013)),c	;volatile
  4528  000128  6EAD               	goto	i2l1237
  4529  00012A  EF97  F000         	line	114
  4530                           ;main.c: 114:         }
  4531                           	
  4532                           i2l162:
  4533  00012E                     	line	115
  4534                           	
  4535                           i2l1237:
  4536  00012E                     ;main.c: 115:         cursor++;
  4537                           	incf	((c:_cursor)),c
  4538  00012E  2A4F               	line	116
  4539                           	
  4540                           i2l1239:
  4541  000130                     ;main.c: 116:         if(5 < cursor)
  4542                           		movf	((c:_cursor)),c,w
  4543  000130  504F               	xorlw	80h
  4544  000132  0A80               	addlw	-(80h^06h)
  4545  000134  0F7A               	btfss	status,0
  4546  000136  A0D8               	goto	i2u48_41
  4547  000138  EFA0  F000         	goto	i2u48_40
  4548  00013C  EFA2  F000         
  4549                           i2u48_41:
  4550  000140                     	goto	i2l164
  4551  000140  EFA9  F000         i2u48_40:
  4552  000144                     	line	118
  4553                           	
  4554                           i2l1241:
  4555  000144                     ;main.c: 117:         {;main.c: 118:             TXIE = 0;
  4556                           	bcf	c:(31980/8),(31980)&7	;volatile
  4557  000144  989D               	line	119
  4558                           	
  4559                           i2l1243:
  4560  000146                     ;main.c: 119:             cursor = 0;
  4561                           	movlw	low(0)
  4562  000146  0E00               	movwf	((c:_cursor)),c
  4563  000148  6E4F               	goto	i2l164
  4564  00014A  EFA9  F000         	line	120
  4565                           ;main.c: 120:         }
  4566                           	
  4567                           i2l163:
  4568  00014E                     	goto	i2l164
  4569  00014E  EFA9  F000         	line	121
  4570                           ;main.c: 121:     }
  4571                           	
  4572                           i2l160:
  4573  000152                     	line	123
  4574                           	
  4575                           i2l164:
  4576  000152                     	movff	??_ISR_high+3,fsr2h+0
  4577  000152  C004  FFDA         	movff	??_ISR_high+2,fsr2l+0
  4578  000156  C003  FFD9         	bcf int$flags,1,c ;clear compiler interrupt flag (level 2)
  4579  00015A  925A               	retfie f
  4580  00015C  0011               	opt stack 0
  4581                           GLOBAL	__end_of_ISR_high
  4582                           	__end_of_ISR_high:
  4583  00015E                     	signat	_ISR_high,89
  4584                           	GLOBAL	__activetblptr
  4585                           __activetblptr	EQU	0
  4586  0000                     	psect	intsave_regs,class=BIGRAM,space=1,noexec
  4587                           	PSECT	rparam,class=COMRAM,space=1,noexec
  4588                           	GLOBAL	__Lrparam
  4589                           	FNCONF	rparam,??,?
  4590                           	GLOBAL	___rparam_used
  4591                           	___rparam_used EQU 1
  4592  0000                     	GLOBAL	___param_bank
  4593                           	___param_bank EQU 0
  4594  0000                     GLOBAL	__Lparam, __Hparam
  4595                           GLOBAL	__Lrparam, __Hrparam
  4596                           __Lparam	EQU	__Lrparam
  4597  0000                     __Hparam	EQU	__Hrparam
  4598  0000                            psect   temp,common,ovrld,class=COMRAM,space=1
  4599                           	global	btemp
  4600                           btemp:
  4601  00005A                     	ds	1
  4602  00005A                     	global	int$flags
  4603                           	int$flags	set btemp
  4604  0000                     	global	wtemp8
  4605                           	wtemp8 set btemp+1
  4606  0000                     	global	ttemp5
  4607                           	ttemp5 set btemp+1
  4608  0000                     	global	ttemp6
  4609                           	ttemp6 set btemp+4
  4610  0000                     	global	ttemp7
  4611                           	ttemp7 set btemp+8
  4612  0000                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         40
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      89
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           244      0       0

Pointer List with Targets:

    sp__int2char	PTR unsigned char  size(2) Largest target is 5
		 -> int2char@string(COMRAM[5]), 

    string_pos	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), int2char@string(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_write_PWM
    _int2char->___lwdiv
    _init_PWM->_write_PWM
    _write_PWM->_calculatePWM
    _calculatePWM->___aldiv
    ___aldiv->___lmul
    _angleToCounts->___lldiv
    ___lldiv->___lmul

Critical Paths under _ISR_high in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_high in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5909
                      _angleToCounts
                       _calculatePWM
                           _init_I2C
                           _init_ISR
                           _init_PWM
                           _init_QEI
                          _init_TMR1
                          _init_UART
                         _init_VNHIO
                           _int2char
                          _write_PWM
 ---------------------------------------------------------------------------------
 (1) _int2char                                             5     3      2     815
                                             11 COMRAM     5     3      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              4 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _init_VNHIO                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_QEI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0     197
                          _write_PWM
 ---------------------------------------------------------------------------------
 (1) _write_PWM                                            3     1      2     197
                                             42 COMRAM     3     1      2
                       _calculatePWM (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_I2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calculatePWM                                        13     9      4    2197
                                             30 COMRAM    12     8      4
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     756
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _angleToCounts                                        8     6      2    2503
                                             29 COMRAM     8     6      2
                            ___awdiv
                            ___awmod
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1130
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             16 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     448
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_high                                             4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _angleToCounts
     ___awdiv
     ___awmod
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _calculatePWM
     ___aldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
   _init_I2C
   _init_ISR
   _init_PWM
     _write_PWM
       _calculatePWM (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         ___wmul
   _init_QEI
   _init_TMR1
   _init_UART
   _init_VNHIO
   _int2char
     ___lwdiv
     ___lwmod
   _write_PWM
     _calculatePWM (ARG)
       ___aldiv
         ___lmul (ARG)
       ___lmul
       ___wmul

 _ISR_high (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      59       1       94.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      59       5        0.0%
DATA                 0      0      59      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Nov 12 23:36:46 2018

                     _BF 007E38             ___awdiv@sign 000A      ___wmul@multiplicand 0007  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$RC 000000                      l202 0C52  
                    l210 0A4C                      l211 0A00                      l300 0528  
                    l212 0A5E                      l301 053C                      l205 0C24  
                    l213 0A6A                      l222 0B7E                      l231 0AF8  
                    l232 0B1A                      l216 06AE                      l233 0B44  
                    l217 06F2                      l250 08EE                      l234 0B54  
                    l218 0702                      l170 08A4                      l251 08DE  
                    l219 070E                      l171 087E                      l252 0900  
                    l180 039C                      l172 0886                      l253 0904  
                    l181 0408                      l173 08A8                      l254 0942  
                    l190 0BE2                      l174 08AC                      l255 0956  
                    l175 08AC                      l256 0966                      l184 0C44  
                    l249 0956                      l193 0BA4                      l169 083A  
                    l450 05EC                      l178 0360                      l451 05FC  
                    l443 0560                      l291 0434                      l179 0366  
                    l187 0C36                      l452 061C                      l444 057E  
                    l460 0766                      l292 045A                      l196 0BC6  
                    l453 0628                      l445 0600                      l461 0784  
                    l293 0504                      l446 05AC                      l462 0788  
                    l294 0498                      l447 05A0                      l463 07AA  
                    l295 0488                      l199 0C0E                      l448 05BE  
                    l464 07BA                      l456 0732                      l296 04AA  
                    l720 09EE                      l449 05C2                      l465 07DA  
                    l457 074C                      l297 04AE                      l713 09E6  
                    l466 07E6                      l458 07BE                      l298 04EC  
                    l714 0996                      l730 0AE2                      l459 0772  
                    l299 0500                      l715 098A                      l723 0ADA  
                    l716 09A8                      l724 0A92                      l717 09AC  
                    l725 0A86                      l718 09D6                      l726 0AA4  
                    l719 09E6                      l727 0AA8                      l728 0ACA  
                    l729 0ADA                      _CKP 007E34                      _GIE 007F97  
           __CFG_CPB$OFF 000000                      u510 0B06                      _PR2 000FCB  
                    _PID 002E                      u511 0B02                      u520 0B44  
                    u600 04D6                      u521 0B40                      u601 04D2  
                    u530 08D6                      u610 0514             __CFG_CPD$OFF 000000  
                    u531 08D2                      u611 0510                      u620 0550  
                    u700 075E                      u540 08FC                      u621 054C  
                    u701 075A                      u541 08F8                      u630 056E  
                    u710 0780                      u550 092C                      u631 056A  
                    u711 077C                      u551 0928                      u640 0598  
                    u720 079E                      u800 06A2                      u560 041C  
                    u641 0594                      u721 079A                      u801 069E  
                    u561 0418                      u650 05BA                      u730 07CE  
                    u810 06D2                      u570 0442                      u651 05B6  
                    u731 07CA                      u811 06CE                      u571 043E  
                    u660 05DE                      u580 0480                      u820 033E  
                    u740 0982                      u661 05DA                      u581 047C  
                    u821 033A                      u741 097E                      u670 0610  
                    u590 04A6                      u830 0388                      u750 09A4  
                    u671 060C                      u591 04A2                      u831 0384  
                    u751 09A0                      u680 0722                      u760 09C8  
                    u840 0A5A                      u681 071E                      u761 09C4  
                    u841 0A56                      u690 0740                      u770 0A7E  
                    u850 0856                      u691 073C                      u771 0A7A  
                    u851 0852                      u780 0AA0                      u860 0876  
                    u781 0A9C                      u861 0872                      u790 0ABE  
                    u791 0ABA                      _pos 0056             ___awmod@sign 000A  
                    prod 000FF3                      wreg 000FE8             __CFG_IESO$ON 000000  
            int2char@num 000E             __CFG_LVP$OFF 000000                     l1101 0C26  
                   l1111 0C46                     l1103 0C2E                     l1113 0C4A  
                   l1105 0C30                     l1115 0C38                     l1131 0BFE  
                   l1107 0C32                     l1301 08B0                     l1133 0C10  
                   l1125 0BA6                     l1109 0C34                     l1311 0904  
                   l1303 08C0                     l1127 0BAA                     l1401 05F2  
                   l1321 094C                     l1313 090E                     l1305 08D6  
                   l1129 0BFA                     l1403 0600                     l1411 0710  
                   l1315 092C                     l1307 08DE                     l1331 0434  
                   l1323 040A                     l1405 0610                     l1421 0740  
                   l1413 0714                     l1317 093C                     l1309 08EE  
                   l1501 06D2                     l1341 0480                     l1333 0442  
                   l1325 040E                     l1407 061C                     l1431 0788  
                   l1423 074C                     l1415 0722                     l1319 0942  
                   l1503 06F2                     l1351 04D6                     l1343 0488  
                   l1335 0452                     l1327 041C                     l1511 0168  
                   l1409 0628                     l1441 07CE                     l1433 079E  
                   l1425 075E                     l1417 072A                     l1505 0702  
                   l1361 0514                     l1353 04E6                     l1345 0498  
                   l1337 045A                     l1329 042C                     l1521 01F8  
                   l1513 016E                     l1281 0B94                     l1371 0550  
                   l1443 07DA                     l1435 07AA                     l1427 0766  
                   l1419 0732                     l1291 0AE4                     l1507 070E  
                   l1363 0528                     l1355 04EC                     l1347 04AE  
                   l1339 046A                     l1531 033E                     l1523 0246  
                   l1515 0172                     l1283 0BA0                     l1451 0982  
                   l1381 057E                     l1373 0558                     l1445 07E6  
                   l1437 07B0                     l1429 0772                     l1293 0AF8  
                   l1365 053C                     l1357 04F6                     l1349 04B8  
                   l1285 0B56                     l1541 03F4                     l1533 0340  
                   l1525 02F4                     l1517 018E                     l1509 0162  
                   l1461 09C8                     l1453 098A                     l1391 05C2  
                   l1383 0586                     l1375 0560                     l1367 053E  
                   l1439 07BE                     l1295 0B06                     l1359 0504  
                   l1287 0B72                     l1543 0408                     l1535 0366  
                   l1527 0328                     l1519 01C4                     l1279 0B80  
                   l1463 09D0                     l1455 0996                     l1447 0968  
                   l1471 0A7E                     l1551 0A2A                     l1393 05C8  
                   l1385 0598                     l1377 056E                     l1369 0542  
                   l1297 0B1A                     l1289 0B7E                     l1537 0388  
                   l1529 0330                     l1465 09D6                     l1457 09AC  
                   l1449 0970                     l1481 0ACA                     l1473 0A86  
                   l1553 0A46                     l1545 09F0                     l1561 07E8  
                   l1395 05DE                     l1387 05A0                     l1379 0576  
                   l1299 0B24                     l1539 039C                     l1491 0BD6  
                   l1467 09DC                     l1459 09B2                     l1483 0AD0  
                   l1475 0A92                     l1555 0A4C                     l1547 09F8  
                   l1571 082C                     l1563 081C                     l1397 05E6  
                   l1389 05AC                     l1493 062C                     l1485 0BC8  
                   l1477 0AA8                     l1469 0A6C                     l1557 0A5E  
                   l1549 0A00                     l1581 0856                     l1573 0830  
                   l1565 0820                     l1399 05EC                     l1495 068C  
                   l1487 0BCC                     l1479 0ABE                     l1559 0A6A  
                   l1591 089C                     l1583 0868                     l1575 0834  
                   l1567 0824                     l1497 06A2                     l1489 0BD4  
                   l1593 089E                     l1585 0876                     l1577 0838  
                   l1569 0828                     l1499 06AE                     l1587 0886  
                   l1579 0848                     l1589 089A                     _IPEN 007E87  
                   _TMR1 000FCE                     _WCOL 007E37                     _TXIE 007CEC  
                   _TXIF 007CF4                     _TXIP 007CFC            __CFG_FCMEN$ON 000000  
                   _main 07E8                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9                     btemp 005A                     _volt 003E  
          __CFG_BOREN$ON 000000                     prodh 000FF4                     prodl 000FF3  
                   start 015E            __CFG_MCLRE$ON 000000             ___param_bank 000000  
     angleToCounts@angle 0022          __end_of___aldiv 053E                    ?_main 0001  
        __end_of___awdiv 062A          __end_of___awmod 07E8          __end_of___lldiv 0968  
        ___awdiv@divisor 0007                    _T1CON 000FCD                    _T2CON 000FCA  
                  _LATA0 007C48                    _LATA1 007C49                    _LATC2 007C5A  
        __end_of___lwdiv 09F0                    _GPREG 0050          __end_of___lwmod 0AE4  
                  i2l160 0152                    i2l161 0110                    i2l153 00AA  
                  i2l162 012E                    i2l154 0058                    i2l163 014E  
                  i2l164 0152                    i2l156 004A                    i2l157 0070  
                  i2l158 00A8                    i2l159 00D8          ___awdiv@counter 0009  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _SSPIE 007CEB  
                  _SSPIF 007CF3                    _SSPIP 007CFB                    _SSPOV 007E36  
                  _TXREG 000FAD                    _TXSTA 000FAC            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000      ___lmul@multiplicand 0009  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000         __end_of_ISR_high 015E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _error 004C                    ttemp5 005B  
                  ttemp6 005E                    ttemp7 0062                    status 000FD8  
                  wtemp8 005B            int2char@digit 0010          __initialization 0BE4  
         __CFG_HPOL$HIGH 000000             __end_of_main 08B0           __CFG_LPOL$HIGH 000000  
                 ??_main 002E            __activetblptr 000000      angleToCounts@counts 0024  
  __end_of_angleToCounts 0710                   _CCPR1L 000FBE         ___awdiv@dividend 0005  
                 _ANSEL0 000FB8                   _ANSEL1 000FB9    __size_of_calculatePWM 02A8  
                 i2l1211 0058                   i2l1203 0012                   i2l1221 00B8  
                 i2l1213 006A                   i2l1205 0020                   i2l1231 00F4  
                 i2l1223 00C6                   i2l1215 007E                   i2l1207 002E  
                 i2l1241 0144                   i2l1233 0108                   i2l1225 00CC  
                 i2l1217 008E                   i2l1209 003C                   i2l1243 0146  
                 i2l1235 0110                   i2l1227 00D8                   i2l1219 00A0  
                 i2l1237 012E                   i2l1229 00E6                   i2l1239 0130  
         __CFG_WDTEN$OFF 000000                   _QEICON 000FB6                   _OSCCON 000FD3  
                 _TMR1IE 007CE8                   _TMR1IF 007CF0           __CFG_WINEN$OFF 000000  
                 _TMR1IP 007CF8                   _TMR1ON 007E68                   _SSPADD 000FC8  
                 _TRISA0 007C90                   _TRISA1 007C91                   _TRISA4 007C94  
                 _TRISA5 007C95                   _TRISC2 007CA2                   _TRISC4 007CA4  
                 _TRISC5 007CA5                   _TRISC6 007CA6                   _SSPBUF 000FC9  
                 _SSPCON 000FC6           __CFG_SSPMX$RD1 000000         __end_of_int2char 0A6C  
                 ___lmul 0AE4                ??___aldiv 0019                   ___wmul 0B56  
              ??___awdiv 0009           __CFG_STVREN$ON 000000                ??___awmod 0009  
              ??___lldiv 0019         __end_of_init_I2C 0C54                ??___lwdiv 0009  
              ??___lwmod 0009         __end_of_init_QEI 0BC8         __end_of_init_ISR 0C26  
       __end_of_init_PWM 0BE4                   _cursor 004F                   clear_0 0BEA  
       ___awdiv@quotient 000B          ___awmod@divisor 0007          ___awmod@counter 0009  
           _calculatePWM 0162               __accesstop 0060  __end_of__initialization 0BF0  
        __CFG_FLTAMX$RC1 000000            ___rparam_used 000001          __CFG_T1OSCMX$ON 000000  
         __pcstackCOMRAM 0001                ?_ISR_high 0001           int2char@number 000C  
         int2char@string 0051       __size_of_init_UART 0016       __size_of_init_TMR1 000E  
             __pnvCOMRAM 0056                  ?___lmul 0005                  ?___wmul 0005  
             ??_ISR_high 0001          __CFG_WDPS$32768 000000                  _CCP1CON 000FBD  
                _BAUDCON 000FAA           ___lmul@product 000D          __CFG_PWM4MX$RB5 000000  
                _MAXCNTH 000F65                  _MAXCNTL 000F64                  i2u40_40 007E  
                i2u40_41 007A                  i2u41_40 008E                  i2u41_41 008A  
                i2u42_40 00A0                  i2u42_41 009C                  i2u43_40 00B8  
                i2u35_40 0020                  i2u43_41 00B4                  i2u35_41 001C  
                i2u44_40 00C6                  i2u36_40 002E                  i2u44_41 00C2  
                i2u36_41 002A                  i2u45_40 00E6                  i2u37_40 003C  
                i2u45_41 00E2                  i2u37_41 0038                  i2u46_40 00F4  
                i2u38_40 004A                  i2u46_41 00F0                  i2u38_41 0046  
                i2u47_40 0108                  i2u39_40 006A                  i2u47_41 0104  
                i2u39_41 0066                  i2u48_40 0144                  i2u48_41 0140  
                _POSCNTH 000F67                  _POSCNTL 000F66                ?_int2char 000C  
        __CFG_PWMPIN$OFF 000000                ?_init_I2C 0001                ?_init_QEI 0001  
              ?_init_ISR 0001                ?_init_PWM 0001                  _i2cData 004E  
     __size_of_write_PWM 0026          __CFG_PWRTEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000               _init_VNHIO 0C26                  ___aldiv 040A  
                ___awdiv 053E          __size_of___lmul 0072                  ___awmod 0710  
                ___lldiv 08B0          __size_of___wmul 002A                  ___lwdiv 0968  
                ___lwmod 0A6C                  __pcinit 0BE4                  __ramtop 0300  
                __ptext0 07E8                  __ptext1 09F0                  __ptext2 0A6C  
                __ptext3 0968                  __ptext4 0C26                  __ptext5 0BFA  
                __ptext6 0C38                  __ptext7 0BA6                  __ptext8 0BC8  
                __ptext9 0B80        __end_of_init_UART 0C10        __end_of_init_TMR1 0C46  
       ___awmod@dividend 0005                  _ref_pos 0058         ___aldiv@dividend 0011  
                _pos_ant 0048               ??_int2char 000E     end_of_initialization 0BF0  
             ??_init_I2C 0005               ??_init_QEI 0005               ??_init_ISR 0005  
             ??_init_PWM 002E          ___lldiv@divisor 0015          ___lldiv@counter 001D  
       ___aldiv@quotient 001B                  postinc0 000FEE        __end_of_write_PWM 0BA6  
             _suma_error 0042              _CCP1CONbits 000FBD   __size_of_angleToCounts 00E6  
            ?_init_VNHIO 0001               _string_pos 0046        angleToCounts@data 0023  
       __CFG_EXCLKMX$RC3 000000           __end_of___lmul 0B56           __end_of___wmul 0B80  
      __size_of_ISR_high 0156      start_initialization 0BE4                 ??___lmul 000D  
               ??___wmul 0009       write_PWM@dutyCycle 002B              __pbssCOMRAM 002E  
          _angleToCounts 062A      __size_of_init_VNHIO 0012        __size_of_int2char 007C  
      __size_of_init_I2C 000E        __size_of_init_QEI 0022        __size_of_init_ISR 0016  
      __size_of_init_PWM 001C         ___lwdiv@dividend 0005                __pintcode 0008  
               ?___aldiv 0011                 ?___awdiv 0005                 ?___awmod 0005  
               ?___lldiv 0011                 ?___lwdiv 0005                 ?___lwmod 0005  
         ?_angleToCounts 001E                _init_UART 0BFA                _init_TMR1 0C38  
       ___lwdiv@quotient 0009                _error_ant 004A          ___aldiv@divisor 0015  
        ___aldiv@counter 0019           ___wmul@product 0009                 _ISR_high 0008  
      ___wmul@multiplier 0005            ?_calculatePWM 001F               ?_init_UART 0001  
             ?_init_TMR1 0001                _write_PWM 0B80        ___lmul@multiplier 0005  
               __Hrparam 0000             ??_init_VNHIO 0005                 __Lrparam 0000  
       __size_of___aldiv 0134         __size_of___awdiv 00EC         __size_of___awmod 00D8  
       __size_of___lldiv 00B8         __size_of___lwdiv 0088         __size_of___lwmod 0078  
        ??_angleToCounts 0020           ??_calculatePWM 0023          ___lwdiv@divisor 0007  
        ___lwdiv@counter 000B                 __ptext10 0C10                 __ptext11 0C46  
               __ptext12 0162                 __ptext13 0B56                 __ptext14 040A  
               __ptext15 062A                 __ptext16 0AE4                 __ptext17 08B0  
               __ptext18 0710                 __ptext19 053E               ?_write_PWM 002B  
     __end_of_init_VNHIO 0C38                 _int2char 09F0                 _init_I2C 0C46  
               _init_QEI 0BA6                 _init_ISR 0C10                 _init_PWM 0BC8  
          __size_of_main 00C8                 _velocity 003A                 int$flags 005A  
            ??_init_UART 0005              ??_init_TMR1 0005     calculatePWM@setpoint 0001  
               intlevel2 0000         ___lwmod@dividend 0005         ___lldiv@dividend 0011  
       ___lldiv@quotient 0019          ___lwmod@divisor 0007          ___lwmod@counter 0009  
           ___aldiv@sign 001A              ??_write_PWM 002D     __end_of_calculatePWM 040A  
