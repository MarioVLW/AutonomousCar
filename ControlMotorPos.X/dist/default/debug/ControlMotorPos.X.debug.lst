

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Nov 11 22:02:51 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC18F4431 Definitions
    37                           ; 
    38  0000                     fsr0 equ 0FE9h
    39  0000                     fsr0h equ 0FEAh
    40  0000                     fsr0l equ 0FE9h
    41  0000                     fsr1 equ 0FE1h
    42  0000                     fsr1h equ 0FE2h
    43  0000                     fsr1l equ 0FE1h
    44  0000                     fsr2 equ 0FD9h
    45  0000                     fsr2h equ 0FDAh
    46  0000                     fsr2l equ 0FD9h
    47  0000                     indf0 equ 0FEFh
    48  0000                     indf1 equ 0FE7h
    49  0000                     indf2 equ 0FDFh
    50  0000                     intcon equ 0FF2h
    51  0000                     nvmcon equ 00h
    52  0000                     pcl equ 0FF9h
    53  0000                     pclath equ 0FFAh
    54  0000                     pclatu equ 0FFBh
    55  0000                     plusw0 equ 0FEBh
    56  0000                     plusw1 equ 0FE3h
    57  0000                     plusw2 equ 0FDBh
    58  0000                     postdec0 equ 0FEDh
    59  0000                     postdec1 equ 0FE5h
    60  0000                     postdec2 equ 0FDDh
    61  0000                     postinc0 equ 0FEEh
    62  0000                     postinc1 equ 0FE6h
    63  0000                     postinc2 equ 0FDEh
    64  0000                     preinc0 equ 0FECh
    65  0000                     preinc1 equ 0FE4h
    66  0000                     preinc2 equ 0FDCh
    67  0000                     prod equ 0FF3h
    68  0000                     prodh equ 0FF4h
    69  0000                     prodl equ 0FF3h
    70  0000                     status equ 0FD8h
    71  0000                     tablat equ 0FF5h
    72  0000                     tblptr equ 0FF6h
    73  0000                     tblptrh equ 0FF7h
    74  0000                     tblptrl equ 0FF6h
    75  0000                     tblptru equ 0FF8h
    76  0000                     tosl equ 0FFDh
    77  0000                     wreg equ 0FE8h
    78  0000                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc   macro
    64                           	bcf	status,0
    65                           endm
    66  0000                     setc   macro
    67                           	bsf	status,0
    68                           endm
    69  0000                     clrz   macro
    70                           	bcf	status,2
    71                           endm
    72  0000                     setz   macro
    73                           	bsf	status,2
    74                           endm
    75  0000                     skipnz macro
    76                           	btfsc	status,2
    77                           endm
    78  0000                     skipz  macro
    79                           	btfss	status,2
    80                           endm
    81  0000                     skipnc macro
    82                           	btfsc	status,0
    83                           endm
    84  0000                     skipc  macro
    85                           	btfss	status,0
    86                           endm
    87  0000                     pushw macro
    88                           	movwf postinc1
    89                           endm
    90  0000                     pushf macro arg1
    91                           	movff arg1, postinc1
    92                           endm
    93  0000                     popw macro
    94                           	movf postdec1,f
    95                           	movf indf1,w
    96                           endm
    97  0000                     popf macro arg1
    98                           	movf postdec1,f
    99                           	movff indf1,arg1
   100                           endm
   101  0000                     popfc macro arg1
   102                           	movff plusw1,arg1
   103                           	decfsz fsr1,f
   104                           endm
   105  0000                     	global	__ramtop
   106                           	global	__accesstop
   107                           # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   108                           DFLTCON equ 0F60h ;# 
   109  0000                     # 118 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   110                           CAP3CON equ 0F61h ;# 
   111  0000                     # 177 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   112                           CAP2CON equ 0F62h ;# 
   113  0000                     # 236 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   114                           CAP1CON equ 0F63h ;# 
   115  0000                     # 295 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   116                           CAP3BUFL equ 0F64h ;# 
   117  0000                     # 300 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   118                           MAXCNTL equ 0F64h ;# 
   119  0000                     # 307 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   120                           CAP3BUFH equ 0F65h ;# 
   121  0000                     # 312 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   122                           MAXCNTH equ 0F65h ;# 
   123  0000                     # 319 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   124                           CAP2BUFL equ 0F66h ;# 
   125  0000                     # 324 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   126                           POSCNTL equ 0F66h ;# 
   127  0000                     # 331 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   128                           CAP2BUFH equ 0F67h ;# 
   129  0000                     # 336 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   130                           POSCNTH equ 0F67h ;# 
   131  0000                     # 343 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   132                           CAP1BUFL equ 0F68h ;# 
   133  0000                     # 348 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   134                           VELRL equ 0F68h ;# 
   135  0000                     # 355 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   136                           CAP1BUFH equ 0F69h ;# 
   137  0000                     # 360 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   138                           VELRH equ 0F69h ;# 
   139  0000                     # 367 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   140                           OVDCONS equ 0F6Ah ;# 
   141  0000                     # 437 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   142                           OVDCOND equ 0F6Bh ;# 
   143  0000                     # 507 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   144                           FLTCONFIG equ 0F6Ch ;# 
   145  0000                     # 569 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   146                           DTCON equ 0F6Dh ;# 
   147  0000                     # 695 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   148                           PWMCON1 equ 0F6Eh ;# 
   149  0000                     # 761 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   150                           PWMCON0 equ 0F6Fh ;# 
   151  0000                     # 831 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   152                           SEVTCMPH equ 0F70h ;# 
   153  0000                     # 838 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   154                           SEVTCMPL equ 0F71h ;# 
   155  0000                     # 845 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   156                           PDC3H equ 0F72h ;# 
   157  0000                     # 852 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   158                           PDC3L equ 0F73h ;# 
   159  0000                     # 859 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   160                           PDC2H equ 0F74h ;# 
   161  0000                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   162                           PDC2L equ 0F75h ;# 
   163  0000                     # 873 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   164                           PDC1H equ 0F76h ;# 
   165  0000                     # 880 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   166                           PDC1L equ 0F77h ;# 
   167  0000                     # 887 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   168                           PDC0H equ 0F78h ;# 
   169  0000                     # 894 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   170                           PDC0L equ 0F79h ;# 
   171  0000                     # 901 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   172                           PTPERH equ 0F7Ah ;# 
   173  0000                     # 908 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   174                           PTPERL equ 0F7Bh ;# 
   175  0000                     # 915 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   176                           PTMRH equ 0F7Ch ;# 
   177  0000                     # 922 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   178                           PTMRL equ 0F7Dh ;# 
   179  0000                     # 929 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   180                           PTCON1 equ 0F7Eh ;# 
   181  0000                     # 956 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   182                           PTCON0 equ 0F7Fh ;# 
   183  0000                     # 1038 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   184                           PORTA equ 0F80h ;# 
   185  0000                     # 1199 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   186                           PORTB equ 0F81h ;# 
   187  0000                     # 1270 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   188                           PORTC equ 0F82h ;# 
   189  0000                     # 1536 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   190                           PORTD equ 0F83h ;# 
   191  0000                     # 1607 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   192                           PORTE equ 0F84h ;# 
   193  0000                     # 1733 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   194                           TMR5 equ 0F87h ;# 
   195  0000                     # 1740 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   196                           TMR5L equ 0F87h ;# 
   197  0000                     # 1747 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   198                           TMR5H equ 0F88h ;# 
   199  0000                     # 1754 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   200                           LATA equ 0F89h ;# 
   201  0000                     # 1866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   202                           LATB equ 0F8Ah ;# 
   203  0000                     # 1978 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   204                           LATC equ 0F8Bh ;# 
   205  0000                     # 2090 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   206                           LATD equ 0F8Ch ;# 
   207  0000                     # 2202 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   208                           LATE equ 0F8Dh ;# 
   209  0000                     # 2254 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   210                           PR5 equ 0F90h ;# 
   211  0000                     # 2261 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   212                           PR5L equ 0F90h ;# 
   213  0000                     # 2268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   214                           PR5H equ 0F91h ;# 
   215  0000                     # 2275 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   216                           TRISA equ 0F92h ;# 
   217  0000                     # 2280 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   218                           DDRA equ 0F92h ;# 
   219  0000                     # 2497 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   220                           TRISB equ 0F93h ;# 
   221  0000                     # 2502 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   222                           DDRB equ 0F93h ;# 
   223  0000                     # 2719 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   224                           TRISC equ 0F94h ;# 
   225  0000                     # 2724 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   226                           DDRC equ 0F94h ;# 
   227  0000                     # 2941 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   228                           TRISD equ 0F95h ;# 
   229  0000                     # 2946 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   230                           DDRD equ 0F95h ;# 
   231  0000                     # 3163 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   232                           TRISE equ 0F96h ;# 
   233  0000                     # 3168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   234                           DDRE equ 0F96h ;# 
   235  0000                     # 3265 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   236                           ADCHS equ 0F99h ;# 
   237  0000                     # 3403 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   238                           ADCON3 equ 0F9Ah ;# 
   239  0000                     # 3475 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   240                           OSCTUNE equ 0F9Bh ;# 
   241  0000                     # 3533 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   242                           PIE1 equ 0F9Dh ;# 
   243  0000                     # 3613 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   244                           PIR1 equ 0F9Eh ;# 
   245  0000                     # 3693 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   246                           IPR1 equ 0F9Fh ;# 
   247  0000                     # 3773 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   248                           PIE2 equ 0FA0h ;# 
   249  0000                     # 3814 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   250                           PIR2 equ 0FA1h ;# 
   251  0000                     # 3855 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   252                           IPR2 equ 0FA2h ;# 
   253  0000                     # 3896 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   254                           PIE3 equ 0FA3h ;# 
   255  0000                     # 3988 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   256                           PIR3 equ 0FA4h ;# 
   257  0000                     # 4048 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   258                           IPR3 equ 0FA5h ;# 
   259  0000                     # 4108 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   260                           EECON1 equ 0FA6h ;# 
   261  0000                     # 4174 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   262                           EECON2 equ 0FA7h ;# 
   263  0000                     # 4181 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   264                           EEDATA equ 0FA8h ;# 
   265  0000                     # 4188 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   266                           EEADR equ 0FA9h ;# 
   267  0000                     # 4195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   268                           BAUDCON equ 0FAAh ;# 
   269  0000                     # 4200 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   270                           BAUDCTL equ 0FAAh ;# 
   271  0000                     # 4375 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   272                           RCSTA equ 0FABh ;# 
   273  0000                     # 4380 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   274                           RCSTA1 equ 0FABh ;# 
   275  0000                     # 4585 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   276                           TXSTA equ 0FACh ;# 
   277  0000                     # 4590 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   278                           TXSTA1 equ 0FACh ;# 
   279  0000                     # 4841 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   280                           TXREG equ 0FADh ;# 
   281  0000                     # 4846 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   282                           TXREG1 equ 0FADh ;# 
   283  0000                     # 4853 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   284                           RCREG equ 0FAEh ;# 
   285  0000                     # 4858 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   286                           RCREG1 equ 0FAEh ;# 
   287  0000                     # 4865 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   288                           SPBRG equ 0FAFh ;# 
   289  0000                     # 4870 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   290                           SPBRG1 equ 0FAFh ;# 
   291  0000                     # 4877 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   292                           SPBRGH equ 0FB0h ;# 
   293  0000                     # 4884 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   294                           QEICON equ 0FB6h ;# 
   295  0000                     # 5036 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   296                           T5CON equ 0FB7h ;# 
   297  0000                     # 5154 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   298                           ANSEL0 equ 0FB8h ;# 
   299  0000                     # 5216 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   300                           ANSEL1 equ 0FB9h ;# 
   301  0000                     # 5236 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   302                           CCP2CON equ 0FBAh ;# 
   303  0000                     # 5315 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   304                           CCPR2 equ 0FBBh ;# 
   305  0000                     # 5322 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   306                           CCPR2L equ 0FBBh ;# 
   307  0000                     # 5329 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   308                           CCPR2H equ 0FBCh ;# 
   309  0000                     # 5336 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   310                           CCP1CON equ 0FBDh ;# 
   311  0000                     # 5415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   312                           CCPR1 equ 0FBEh ;# 
   313  0000                     # 5422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   314                           CCPR1L equ 0FBEh ;# 
   315  0000                     # 5429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   316                           CCPR1H equ 0FBFh ;# 
   317  0000                     # 5436 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   318                           ADCON2 equ 0FC0h ;# 
   319  0000                     # 5512 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   320                           ADCON1 equ 0FC1h ;# 
   321  0000                     # 5608 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   322                           ADCON0 equ 0FC2h ;# 
   323  0000                     # 5727 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   324                           ADRES equ 0FC3h ;# 
   325  0000                     # 5734 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   326                           ADRESL equ 0FC3h ;# 
   327  0000                     # 5741 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   328                           ADRESH equ 0FC4h ;# 
   329  0000                     # 5748 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   330                           SSPCON equ 0FC6h ;# 
   331  0000                     # 5753 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   332                           SSPCON1 equ 0FC6h ;# 
   333  0000                     # 5886 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   334                           SSPSTAT equ 0FC7h ;# 
   335  0000                     # 6107 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   336                           SSPADD equ 0FC8h ;# 
   337  0000                     # 6114 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   338                           SSPBUF equ 0FC9h ;# 
   339  0000                     # 6121 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   340                           T2CON equ 0FCAh ;# 
   341  0000                     # 6219 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   342                           PR2 equ 0FCBh ;# 
   343  0000                     # 6224 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   344                           MEMCON equ 0FCBh ;# 
   345  0000                     # 6329 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   346                           TMR2 equ 0FCCh ;# 
   347  0000                     # 6336 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   348                           T1CON equ 0FCDh ;# 
   349  0000                     # 6448 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   350                           TMR1 equ 0FCEh ;# 
   351  0000                     # 6455 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   352                           TMR1L equ 0FCEh ;# 
   353  0000                     # 6462 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   354                           TMR1H equ 0FCFh ;# 
   355  0000                     # 6469 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   356                           RCON equ 0FD0h ;# 
   357  0000                     # 6612 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   358                           WDTCON equ 0FD1h ;# 
   359  0000                     # 6639 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   360                           LVDCON equ 0FD2h ;# 
   361  0000                     # 6704 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   362                           OSCCON equ 0FD3h ;# 
   363  0000                     # 6790 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   364                           T0CON equ 0FD5h ;# 
   365  0000                     # 6866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   366                           TMR0 equ 0FD6h ;# 
   367  0000                     # 6873 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   368                           TMR0L equ 0FD6h ;# 
   369  0000                     # 6880 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   370                           TMR0H equ 0FD7h ;# 
   371  0000                     # 6887 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   372                           STATUS equ 0FD8h ;# 
   373  0000                     # 6958 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   374                           FSR2 equ 0FD9h ;# 
   375  0000                     # 6965 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   376                           FSR2L equ 0FD9h ;# 
   377  0000                     # 6972 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   378                           FSR2H equ 0FDAh ;# 
   379  0000                     # 6979 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   380                           PLUSW2 equ 0FDBh ;# 
   381  0000                     # 6986 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   382                           PREINC2 equ 0FDCh ;# 
   383  0000                     # 6993 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   384                           POSTDEC2 equ 0FDDh ;# 
   385  0000                     # 7000 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   386                           POSTINC2 equ 0FDEh ;# 
   387  0000                     # 7007 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   388                           INDF2 equ 0FDFh ;# 
   389  0000                     # 7014 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   390                           BSR equ 0FE0h ;# 
   391  0000                     # 7021 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   392                           FSR1 equ 0FE1h ;# 
   393  0000                     # 7028 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   394                           FSR1L equ 0FE1h ;# 
   395  0000                     # 7035 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   396                           FSR1H equ 0FE2h ;# 
   397  0000                     # 7042 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   398                           PLUSW1 equ 0FE3h ;# 
   399  0000                     # 7049 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   400                           PREINC1 equ 0FE4h ;# 
   401  0000                     # 7056 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   402                           POSTDEC1 equ 0FE5h ;# 
   403  0000                     # 7063 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   404                           POSTINC1 equ 0FE6h ;# 
   405  0000                     # 7070 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   406                           INDF1 equ 0FE7h ;# 
   407  0000                     # 7077 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   408                           WREG equ 0FE8h ;# 
   409  0000                     # 7084 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   410                           FSR0 equ 0FE9h ;# 
   411  0000                     # 7091 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   412                           FSR0L equ 0FE9h ;# 
   413  0000                     # 7098 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   414                           FSR0H equ 0FEAh ;# 
   415  0000                     # 7105 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   416                           PLUSW0 equ 0FEBh ;# 
   417  0000                     # 7112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   418                           PREINC0 equ 0FECh ;# 
   419  0000                     # 7119 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   420                           POSTDEC0 equ 0FEDh ;# 
   421  0000                     # 7126 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   422                           POSTINC0 equ 0FEEh ;# 
   423  0000                     # 7133 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   424                           INDF0 equ 0FEFh ;# 
   425  0000                     # 7140 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   426                           INTCON3 equ 0FF0h ;# 
   427  0000                     # 7232 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   428                           INTCON2 equ 0FF1h ;# 
   429  0000                     # 7309 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   430                           INTCON equ 0FF2h ;# 
   431  0000                     # 7426 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   432                           PROD equ 0FF3h ;# 
   433  0000                     # 7433 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   434                           PRODL equ 0FF3h ;# 
   435  0000                     # 7440 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   436                           PRODH equ 0FF4h ;# 
   437  0000                     # 7447 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   438                           TABLAT equ 0FF5h ;# 
   439  0000                     # 7456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   440                           TBLPTR equ 0FF6h ;# 
   441  0000                     # 7463 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   442                           TBLPTRL equ 0FF6h ;# 
   443  0000                     # 7470 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   444                           TBLPTRH equ 0FF7h ;# 
   445  0000                     # 7477 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   446                           TBLPTRU equ 0FF8h ;# 
   447  0000                     # 7486 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   448                           PCLAT equ 0FF9h ;# 
   449  0000                     # 7493 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   450                           PC equ 0FF9h ;# 
   451  0000                     # 7500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   452                           PCL equ 0FF9h ;# 
   453  0000                     # 7507 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   454                           PCLATH equ 0FFAh ;# 
   455  0000                     # 7514 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   456                           PCLATU equ 0FFBh ;# 
   457  0000                     # 7521 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   458                           STKPTR equ 0FFCh ;# 
   459  0000                     # 7595 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   460                           TOS equ 0FFDh ;# 
   461  0000                     # 7602 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   462                           TOSL equ 0FFDh ;# 
   463  0000                     # 7609 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   464                           TOSH equ 0FFEh ;# 
   465  0000                     # 7616 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic18f4431.h"
   466                           TOSU equ 0FFFh ;# 
   467  0000                     	FNCALL	_main,_calculatePWM
   468                           	FNCALL	_main,_init_I2C
   469                           	FNCALL	_main,_init_ISR
   470                           	FNCALL	_main,_init_PWM
   471                           	FNCALL	_main,_init_QEI
   472                           	FNCALL	_main,_init_TMR1
   473                           	FNCALL	_main,_init_UART
   474                           	FNCALL	_main,_init_VNHIO
   475                           	FNCALL	_main,_int2char
   476                           	FNCALL	_main,_write_PWM
   477                           	FNCALL	_int2char,___lwdiv
   478                           	FNCALL	_int2char,___lwmod
   479                           	FNCALL	_init_PWM,_write_PWM
   480                           	FNCALL	_calculatePWM,___aldiv
   481                           	FNCALL	_calculatePWM,___lmul
   482                           	FNCALL	_calculatePWM,___wmul
   483                           	FNROOT	_main
   484                           	FNCALL	intlevel2,_ISR_high
   485                           	global	intlevel2
   486                           	FNROOT	intlevel2
   487                           	global	_ref_pos
   488                           psect	idataCOMRAM,class=CODE,space=0,delta=1,noexec
   489                           global __pidataCOMRAM
   490                           __pidataCOMRAM:
   491  000912                     	file	"main.c"
   492                           	line	54
   493                           
   494                           ;initializer for _input
   495                           	dw	(03FEh)&0ffffh
   496  000912  03FE               	line	53
   497                           
   498                           ;initializer for _ref_pos
   499                           	dw	(014B4h)&0ffffh
   500  000914  14B4               	global	_PID
   501                           	global	_velocity
   502                           	global	_volt
   503                           	global	_suma_error
   504                           	global	_string_pos
   505                           	global	_error_ant
   506                           	global	_error
   507                           	global	_i2cData
   508                           	global	_cursor
   509                           	global	_GPREG
   510                           	global	int2char@string
   511                           	global	_pos
   512                           psect	nvCOMRAM,class=COMRAM,space=1,noexec
   513                           global __pnvCOMRAM
   514                           __pnvCOMRAM:
   515  000059                     	global	_pos
   516                           _pos:
   517  000059                            ds      2
   518  000059                     	global	_MAXCNTH
   519                           _MAXCNTH	set	0xF65
   520  0000                     	global	_MAXCNTL
   521                           _MAXCNTL	set	0xF64
   522  0000                     	global	_POSCNTL
   523                           _POSCNTL	set	0xF66
   524  0000                     	global	_POSCNTH
   525                           _POSCNTH	set	0xF67
   526  0000                     	global	_TRISC4
   527                           _TRISC4	set	0x7CA4
   528  0000                     	global	_TRISC5
   529                           _TRISC5	set	0x7CA5
   530  0000                     	global	_TRISC6
   531                           _TRISC6	set	0x7CA6
   532  0000                     	global	_TRISA5
   533                           _TRISA5	set	0x7C95
   534  0000                     	global	_TRISA4
   535                           _TRISA4	set	0x7C94
   536  0000                     	global	_LATC2
   537                           _LATC2	set	0x7C5A
   538  0000                     	global	_TRISC2
   539                           _TRISC2	set	0x7CA2
   540  0000                     	global	_TRISA1
   541                           _TRISA1	set	0x7C91
   542  0000                     	global	_TRISA0
   543                           _TRISA0	set	0x7C90
   544  0000                     	global	_LATA1
   545                           _LATA1	set	0x7C49
   546  0000                     	global	_LATA0
   547                           _LATA0	set	0x7C48
   548  0000                     	global	_TMR1
   549                           _TMR1	set	0xFCE
   550  0000                     	global	_SSPCON
   551                           _SSPCON	set	0xFC6
   552  0000                     	global	_SPBRG
   553                           _SPBRG	set	0xFAF
   554  0000                     	global	_BAUDCON
   555                           _BAUDCON	set	0xFAA
   556  0000                     	global	_RCSTA
   557                           _RCSTA	set	0xFAB
   558  0000                     	global	_TXSTA
   559                           _TXSTA	set	0xFAC
   560  0000                     	global	_QEICON
   561                           _QEICON	set	0xFB6
   562  0000                     	global	_CCPR1L
   563                           _CCPR1L	set	0xFBE
   564  0000                     	global	_CCP1CONbits
   565                           _CCP1CONbits	set	0xFBD
   566  0000                     	global	_PR2
   567                           _PR2	set	0xFCB
   568  0000                     	global	_T2CON
   569                           _T2CON	set	0xFCA
   570  0000                     	global	_CCP1CON
   571                           _CCP1CON	set	0xFBD
   572  0000                     	global	_ANSEL1
   573                           _ANSEL1	set	0xFB9
   574  0000                     	global	_ANSEL0
   575                           _ANSEL0	set	0xFB8
   576  0000                     	global	_T1CON
   577                           _T1CON	set	0xFCD
   578  0000                     	global	_OSCCON
   579                           _OSCCON	set	0xFD3
   580  0000                     	global	_TXREG
   581                           _TXREG	set	0xFAD
   582  0000                     	global	_SSPADD
   583                           _SSPADD	set	0xFC8
   584  0000                     	global	_SSPBUF
   585                           _SSPBUF	set	0xFC9
   586  0000                     	global	_IPEN
   587                           _IPEN	set	0x7E87
   588  0000                     	global	_TXIP
   589                           _TXIP	set	0x7CFC
   590  0000                     	global	_SSPIP
   591                           _SSPIP	set	0x7CFB
   592  0000                     	global	_TMR1IP
   593                           _TMR1IP	set	0x7CF8
   594  0000                     	global	_TXIF
   595                           _TXIF	set	0x7CF4
   596  0000                     	global	_TXIE
   597                           _TXIE	set	0x7CEC
   598  0000                     	global	_TMR1ON
   599                           _TMR1ON	set	0x7E68
   600  0000                     	global	_TMR1IF
   601                           _TMR1IF	set	0x7CF0
   602  0000                     	global	_TMR1IE
   603                           _TMR1IE	set	0x7CE8
   604  0000                     	global	_BF
   605                           _BF	set	0x7E38
   606  0000                     	global	_CKP
   607                           _CKP	set	0x7E34
   608  0000                     	global	_WCOL
   609                           _WCOL	set	0x7E37
   610  0000                     	global	_SSPOV
   611                           _SSPOV	set	0x7E36
   612  0000                     	global	_SSPIF
   613                           _SSPIF	set	0x7CF3
   614  0000                     	global	_SSPIE
   615                           _SSPIE	set	0x7CEB
   616  0000                     	global	_GIE
   617                           _GIE	set	0x7F97
   618  0000                     ; #config settings
   619                           global __CFG_OSC$RC
   620                           __CFG_OSC$RC equ 0x0
   621  0000                     global __CFG_FCMEN$ON
   622                           __CFG_FCMEN$ON equ 0x0
   623  0000                     global __CFG_IESO$ON
   624                           __CFG_IESO$ON equ 0x0
   625  0000                     global __CFG_PWRTEN$OFF
   626                           __CFG_PWRTEN$OFF equ 0x0
   627  0000                     global __CFG_BOREN$ON
   628                           __CFG_BOREN$ON equ 0x0
   629  0000                     global __CFG_WDTEN$OFF
   630                           __CFG_WDTEN$OFF equ 0x0
   631  0000                     global __CFG_WDPS$32768
   632                           __CFG_WDPS$32768 equ 0x0
   633  0000                     global __CFG_WINEN$OFF
   634                           __CFG_WINEN$OFF equ 0x0
   635  0000                     global __CFG_PWMPIN$OFF
   636                           __CFG_PWMPIN$OFF equ 0x0
   637  0000                     global __CFG_LPOL$HIGH
   638                           __CFG_LPOL$HIGH equ 0x0
   639  0000                     global __CFG_HPOL$HIGH
   640                           __CFG_HPOL$HIGH equ 0x0
   641  0000                     global __CFG_T1OSCMX$ON
   642                           __CFG_T1OSCMX$ON equ 0x0
   643  0000                     global __CFG_FLTAMX$RC1
   644                           __CFG_FLTAMX$RC1 equ 0x0
   645  0000                     global __CFG_SSPMX$RD1
   646                           __CFG_SSPMX$RD1 equ 0x0
   647  0000                     global __CFG_PWM4MX$RB5
   648                           __CFG_PWM4MX$RB5 equ 0x0
   649  0000                     global __CFG_EXCLKMX$RC3
   650                           __CFG_EXCLKMX$RC3 equ 0x0
   651  0000                     global __CFG_MCLRE$ON
   652                           __CFG_MCLRE$ON equ 0x0
   653  0000                     global __CFG_STVREN$ON
   654                           __CFG_STVREN$ON equ 0x0
   655  0000                     global __CFG_LVP$OFF
   656                           __CFG_LVP$OFF equ 0x0
   657  0000                     global __CFG_CP0$OFF
   658                           __CFG_CP0$OFF equ 0x0
   659  0000                     global __CFG_CP1$OFF
   660                           __CFG_CP1$OFF equ 0x0
   661  0000                     global __CFG_CP2$OFF
   662                           __CFG_CP2$OFF equ 0x0
   663  0000                     global __CFG_CP3$OFF
   664                           __CFG_CP3$OFF equ 0x0
   665  0000                     global __CFG_CPB$OFF
   666                           __CFG_CPB$OFF equ 0x0
   667  0000                     global __CFG_CPD$OFF
   668                           __CFG_CPD$OFF equ 0x0
   669  0000                     global __CFG_WRT0$OFF
   670                           __CFG_WRT0$OFF equ 0x0
   671  0000                     global __CFG_WRT1$OFF
   672                           __CFG_WRT1$OFF equ 0x0
   673  0000                     global __CFG_WRT2$OFF
   674                           __CFG_WRT2$OFF equ 0x0
   675  0000                     global __CFG_WRT3$OFF
   676                           __CFG_WRT3$OFF equ 0x0
   677  0000                     global __CFG_WRTC$OFF
   678                           __CFG_WRTC$OFF equ 0x0
   679  0000                     global __CFG_WRTB$OFF
   680                           __CFG_WRTB$OFF equ 0x0
   681  0000                     global __CFG_WRTD$OFF
   682                           __CFG_WRTD$OFF equ 0x0
   683  0000                     global __CFG_EBTR0$OFF
   684                           __CFG_EBTR0$OFF equ 0x0
   685  0000                     global __CFG_EBTR1$OFF
   686                           __CFG_EBTR1$OFF equ 0x0
   687  0000                     global __CFG_EBTR2$OFF
   688                           __CFG_EBTR2$OFF equ 0x0
   689  0000                     global __CFG_EBTR3$OFF
   690                           __CFG_EBTR3$OFF equ 0x0
   691  0000                     global __CFG_EBTRB$OFF
   692                           __CFG_EBTRB$OFF equ 0x0
   693  0000                     	file	"C:\Users\MarioVL\AppData\Local\Temp\sbto."
   694                           	line	#
   695                           psect	cinit,class=CODE,delta=1,reloc=2
   696                           global __pcinit
   697                           __pcinit:
   698  0007F0                     global start_initialization
   699                           start_initialization:
   700  0007F0                     
   701                           global __initialization
   702                           __initialization:
   703  0007F0                     psect	bssCOMRAM,class=COMRAM,space=1,noexec
   704                           global __pbssCOMRAM
   705                           __pbssCOMRAM:
   706  00002C                     	global	_PID
   707                           _PID:
   708  00002C                            ds      12
   709  00002C                     	global	_velocity
   710                           _velocity:
   711  000038                            ds      4
   712  000038                     	global	_volt
   713                           _volt:
   714  00003C                            ds      4
   715  00003C                     	global	_suma_error
   716                           _suma_error:
   717  000040                            ds      4
   718  000040                     	global	_string_pos
   719                           _string_pos:
   720  000044                            ds      2
   721  000044                     	global	_pos_ant
   722                           	global	_pos_ant
   723                           _pos_ant:
   724  000046                            ds      2
   725  000046                     	global	_error_ant
   726                           _error_ant:
   727  000048                            ds      2
   728  000048                     	global	_error
   729                           _error:
   730  00004A                            ds      2
   731  00004A                     	global	_i2cData
   732                           _i2cData:
   733  00004C                            ds      1
   734  00004C                     	global	_cursor
   735                           _cursor:
   736  00004D                            ds      1
   737  00004D                     	global	_pos_degree
   738                           	global	_pos_degree
   739                           _pos_degree:
   740  00004E                            ds      1
   741  00004E                     	global	_GPREG
   742                           _GPREG:
   743  00004F                            ds      1
   744  00004F                     int2char@string:
   745  000050                            ds      5
   746  000050                     psect	dataCOMRAM,class=COMRAM,space=1,noexec
   747                           global __pdataCOMRAM
   748                           __pdataCOMRAM:
   749  000055                     	file	"main.c"
   750                           	line	54
   751                           	global	_input
   752                           	global	_input
   753                           _input:
   754  000055                            ds      2
   755  000055                     psect	dataCOMRAM
   756                           	file	"main.c"
   757                           	line	53
   758                           	global	_ref_pos
   759                           _ref_pos:
   760  000057                            ds      2
   761  000057                     	file	"C:\Users\MarioVL\AppData\Local\Temp\sbto."
   762                           	line	#
   763                           psect	cinit
   764                           ; Initialize objects allocated to COMRAM (4 bytes)
   765                           	global __pidataCOMRAM
   766                           	; load TBLPTR registers with __pidataCOMRAM
   767                           	movlw	low (__pidataCOMRAM)
   768  0007F0  0E12               	movwf	tblptrl
   769  0007F2  6EF6               	movlw	high(__pidataCOMRAM)
   770  0007F4  0E09               	movwf	tblptrh
   771  0007F6  6EF7               	movlw	low highword(__pidataCOMRAM)
   772  0007F8  0E00               	movwf	tblptru
   773  0007FA  6EF8               	lfsr	0,__pdataCOMRAM
   774  0007FC  EE00  F055         	lfsr	1,4
   775  000800  EE10 F004          	copy_data0:
   776  000804                     	tblrd	*+
   777  000804  0009               	movff	tablat, postinc0
   778  000806  CFF5 FFEE          	movf	postdec1,w
   779  00080A  50E5               	movf	fsr1l,w
   780  00080C  50E1               	bnz	copy_data0
   781  00080E  E1FA               	line	#
   782                           ; Clear objects allocated to COMRAM (41 bytes)
   783                           	global __pbssCOMRAM
   784                           lfsr	0,__pbssCOMRAM
   785  000810  EE00  F02C         movlw	41
   786  000814  0E29               clear_0:
   787  000816                     clrf	postinc0,c
   788  000816  6AEE               decf	wreg
   789  000818  06E8               bnz	clear_0
   790  00081A  E1FD               psect cinit,class=CODE,delta=1
   791                           global end_of_initialization,__end_of__initialization
   792                           
   793                           ;End of C runtime variable initialization code
   794                           
   795                           end_of_initialization:
   796  00081C                     __end_of__initialization:
   797  00081C                     	bcf int$flags,0,c ;clear compiler interrupt flag (level 1)
   798  00081C  905B               	bcf int$flags,1,c ;clear compiler interrupt flag (level 2)
   799  00081E  925B               movlb 0
   800  000820  0100               goto _main	;jump to C main() function
   801  000822  EF9F  F002         psect	cstackBANK0,class=BANK0,space=1,noexec
   802                           global __pcstackBANK0
   803                           __pcstackBANK0:
   804  000060                     ?_write_PWM:	; 1 bytes @ 0x0
   805  000060                     	global	write_PWM@dutyCycle
   806                           write_PWM@dutyCycle:	; 2 bytes @ 0x0
   807  000060                     	ds   2
   808  000060                     	global	main@counter
   809                           main@counter:	; 1 bytes @ 0x2
   810  000062                     	ds   1
   811  000062                     psect	cstackCOMRAM,class=COMRAM,space=1,noexec
   812                           global __pcstackCOMRAM
   813                           __pcstackCOMRAM:
   814  000001                     ?_init_VNHIO:	; 1 bytes @ 0x0
   815  000001                     ?_init_I2C:	; 1 bytes @ 0x0
   816  000001                     ?_init_TMR1:	; 1 bytes @ 0x0
   817  000001                     ?_init_PWM:	; 1 bytes @ 0x0
   818  000001                     ?_init_QEI:	; 1 bytes @ 0x0
   819  000001                     ?_init_UART:	; 1 bytes @ 0x0
   820  000001                     ?_init_ISR:	; 1 bytes @ 0x0
   821  000001                     ?_ISR_high:	; 1 bytes @ 0x0
   822  000001                     ??_ISR_high:	; 1 bytes @ 0x0
   823  000001                     ?_main:	; 1 bytes @ 0x0
   824  000001                     calculatePWM@setpoint:	; 1 bytes @ 0x0
   825  000001                     	ds   4
   826  000001                     ??_init_VNHIO:	; 1 bytes @ 0x4
   827  000005                     ??_init_I2C:	; 1 bytes @ 0x4
   828  000005                     ??_init_TMR1:	; 1 bytes @ 0x4
   829  000005                     ??_init_QEI:	; 1 bytes @ 0x4
   830  000005                     ??_init_UART:	; 1 bytes @ 0x4
   831  000005                     ??_init_ISR:	; 1 bytes @ 0x4
   832  000005                     	global	?___wmul
   833                           ?___wmul:	; 2 bytes @ 0x4
   834  000005                     	global	?___lwdiv
   835                           ?___lwdiv:	; 2 bytes @ 0x4
   836  000005                     	global	?___lwmod
   837                           ?___lwmod:	; 2 bytes @ 0x4
   838  000005                     	global	?___lmul
   839                           ?___lmul:	; 4 bytes @ 0x4
   840  000005                     	global	___wmul@multiplier
   841                           ___wmul@multiplier:	; 2 bytes @ 0x4
   842  000005                     	global	___lwdiv@dividend
   843                           ___lwdiv@dividend:	; 2 bytes @ 0x4
   844  000005                     	global	___lwmod@dividend
   845                           ___lwmod@dividend:	; 2 bytes @ 0x4
   846  000005                     	global	___lmul@multiplier
   847                           ___lmul@multiplier:	; 4 bytes @ 0x4
   848  000005                     	ds   2
   849  000005                     	global	___wmul@multiplicand
   850                           ___wmul@multiplicand:	; 2 bytes @ 0x6
   851  000007                     	global	___lwdiv@divisor
   852                           ___lwdiv@divisor:	; 2 bytes @ 0x6
   853  000007                     	global	___lwmod@divisor
   854                           ___lwmod@divisor:	; 2 bytes @ 0x6
   855  000007                     	ds   2
   856  000007                     ??___wmul:	; 1 bytes @ 0x8
   857  000009                     ??___lwdiv:	; 1 bytes @ 0x8
   858  000009                     ??___lwmod:	; 1 bytes @ 0x8
   859  000009                     	global	___lwdiv@counter
   860                           ___lwdiv@counter:	; 1 bytes @ 0x8
   861  000009                     	global	___lwmod@counter
   862                           ___lwmod@counter:	; 1 bytes @ 0x8
   863  000009                     	global	___wmul@product
   864                           ___wmul@product:	; 2 bytes @ 0x8
   865  000009                     	global	___lmul@multiplicand
   866                           ___lmul@multiplicand:	; 4 bytes @ 0x8
   867  000009                     	ds   1
   868  000009                     	global	___lwdiv@quotient
   869                           ___lwdiv@quotient:	; 2 bytes @ 0x9
   870  00000A                     	ds   2
   871  00000A                     	global	?_int2char
   872                           ?_int2char:	; 2 bytes @ 0xB
   873  00000C                     	global	int2char@number
   874                           int2char@number:	; 2 bytes @ 0xB
   875  00000C                     	ds   1
   876  00000C                     ??___lmul:	; 1 bytes @ 0xC
   877  00000D                     	global	___lmul@product
   878                           ___lmul@product:	; 4 bytes @ 0xC
   879  00000D                     	ds   1
   880  00000D                     ??_int2char:	; 1 bytes @ 0xD
   881  00000E                     	global	int2char@num
   882                           int2char@num:	; 2 bytes @ 0xD
   883  00000E                     	ds   2
   884  00000E                     	global	int2char@digit
   885                           int2char@digit:	; 1 bytes @ 0xF
   886  000010                     	ds   1
   887  000010                     	global	?___aldiv
   888                           ?___aldiv:	; 4 bytes @ 0x10
   889  000011                     	global	___aldiv@dividend
   890                           ___aldiv@dividend:	; 4 bytes @ 0x10
   891  000011                     	ds   4
   892  000011                     	global	___aldiv@divisor
   893                           ___aldiv@divisor:	; 4 bytes @ 0x14
   894  000015                     	ds   4
   895  000015                     ??___aldiv:	; 1 bytes @ 0x18
   896  000019                     	global	___aldiv@counter
   897                           ___aldiv@counter:	; 1 bytes @ 0x18
   898  000019                     	ds   1
   899  000019                     	global	___aldiv@sign
   900                           ___aldiv@sign:	; 1 bytes @ 0x19
   901  00001A                     	ds   1
   902  00001A                     	global	___aldiv@quotient
   903                           ___aldiv@quotient:	; 4 bytes @ 0x1A
   904  00001B                     	ds   4
   905  00001B                     	global	?_calculatePWM
   906                           ?_calculatePWM:	; 4 bytes @ 0x1E
   907  00001F                     	ds   4
   908  00001F                     ??_calculatePWM:	; 1 bytes @ 0x22
   909  000023                     	ds   8
   910  000023                     ??_write_PWM:	; 1 bytes @ 0x2A
   911  00002B                     	ds   1
   912  00002B                     ??_init_PWM:	; 1 bytes @ 0x2B
   913  00002C                     ??_main:	; 1 bytes @ 0x2B
   914  00002C                     ;!
   915                           ;!Data Sizes:
   916                           ;!    Strings     0
   917                           ;!    Constant    0
   918                           ;!    Data        4
   919                           ;!    BSS         41
   920                           ;!    Persistent  2
   921                           ;!    Stack       0
   922                           ;!
   923                           ;!Auto Spaces:
   924                           ;!    Space          Size  Autos    Used
   925                           ;!    COMRAM           94     43      90
   926                           ;!    BANK0           160      3       3
   927                           ;!    BANK1           256      0       0
   928                           ;!    BANK2           244      0       0
   929                           
   930                           ;!
   931                           ;!Pointer List with Targets:
   932                           ;!
   933                           ;!    sp__int2char	PTR unsigned char  size(2) Largest target is 5
   934                           ;!		 -> int2char@string(COMRAM[5]), 
   935                           ;!
   936                           ;!    string_pos	PTR unsigned char  size(2) Largest target is 5
   937                           ;!		 -> NULL(NULL[0]), int2char@string(COMRAM[5]), 
   938                           ;!
   939                           
   940                           
   941                           ;!
   942                           ;!Critical Paths under _main in COMRAM
   943                           ;!
   944                           ;!    _main->_write_PWM
   945                           ;!    _int2char->___lwdiv
   946                           ;!    _init_PWM->_write_PWM
   947                           ;!    _write_PWM->_calculatePWM
   948                           ;!    _calculatePWM->___aldiv
   949                           ;!    ___aldiv->___lmul
   950                           ;!
   951                           ;!Critical Paths under _ISR_high in COMRAM
   952                           ;!
   953                           ;!    None.
   954                           ;!
   955                           ;!Critical Paths under _main in BANK0
   956                           ;!
   957                           ;!    _main->_write_PWM
   958                           ;!    _init_PWM->_write_PWM
   959                           ;!
   960                           ;!Critical Paths under _ISR_high in BANK0
   961                           ;!
   962                           ;!    None.
   963                           ;!
   964                           ;!Critical Paths under _main in BANK1
   965                           ;!
   966                           ;!    None.
   967                           ;!
   968                           ;!Critical Paths under _ISR_high in BANK1
   969                           ;!
   970                           ;!    None.
   971                           ;!
   972                           ;!Critical Paths under _main in BANK2
   973                           ;!
   974                           ;!    None.
   975                           ;!
   976                           ;!Critical Paths under _ISR_high in BANK2
   977                           ;!
   978                           ;!    None.
   979                           
   980 ;;
   981 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   982 ;;
   983                           
   984                           ;!
   985                           ;!Call Graph Tables:
   986                           ;!
   987                           ;! ---------------------------------------------------------------------------------
   988                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   989                           ;! ---------------------------------------------------------------------------------
   990                           ;! (0) _main                                                 1     1      0    4156
   991                           ;!                                              2 BANK0      1     1      0
   992                           ;!                       _calculatePWM
   993                           ;!                           _init_I2C
   994                           ;!                           _init_ISR
   995                           ;!                           _init_PWM
   996                           ;!                           _init_QEI
   997                           ;!                          _init_TMR1
   998                           ;!                          _init_UART
   999                           ;!                         _init_VNHIO
  1000                           ;!                           _int2char
  1001                           ;!                          _write_PWM
  1002                           ;! ---------------------------------------------------------------------------------
  1003                           ;! (1) _int2char                                             5     3      2    1090
  1004                           ;!                                             11 COMRAM     5     3      2
  1005                           ;!                            ___lwdiv
  1006                           ;!                            ___lwmod
  1007                           ;! ---------------------------------------------------------------------------------
  1008                           ;! (2) ___lwmod                                              5     1      4     412
  1009                           ;!                                              4 COMRAM     5     1      4
  1010                           ;! ---------------------------------------------------------------------------------
  1011                           ;! (2) ___lwdiv                                              7     3      4     421
  1012                           ;!                                              4 COMRAM     7     3      4
  1013                           ;! ---------------------------------------------------------------------------------
  1014                           ;! (1) _init_VNHIO                                           0     0      0       0
  1015                           ;! ---------------------------------------------------------------------------------
  1016                           ;! (1) _init_UART                                            0     0      0       0
  1017                           ;! ---------------------------------------------------------------------------------
  1018                           ;! (1) _init_TMR1                                            0     0      0       0
  1019                           ;! ---------------------------------------------------------------------------------
  1020                           ;! (1) _init_QEI                                             0     0      0       0
  1021                           ;! ---------------------------------------------------------------------------------
  1022                           ;! (1) _init_PWM                                             0     0      0     245
  1023                           ;!                          _write_PWM
  1024                           ;! ---------------------------------------------------------------------------------
  1025                           ;! (1) _write_PWM                                            3     1      2     245
  1026                           ;!                                             42 COMRAM     1     1      0
  1027                           ;!                                              0 BANK0      2     0      2
  1028                           ;!                       _calculatePWM (ARG)
  1029                           ;! ---------------------------------------------------------------------------------
  1030                           ;! (1) _init_ISR                                             0     0      0       0
  1031                           ;! ---------------------------------------------------------------------------------
  1032                           ;! (1) _init_I2C                                             0     0      0       0
  1033                           ;! ---------------------------------------------------------------------------------
  1034                           ;! (1) _calculatePWM                                        13     9      4    2573
  1035                           ;!                                             30 COMRAM    12     8      4
  1036                           ;!                            ___aldiv
  1037                           ;!                             ___lmul
  1038                           ;!                             ___wmul
  1039                           ;! ---------------------------------------------------------------------------------
  1040                           ;! (2) ___wmul                                               6     2      4     412
  1041                           ;!                                              4 COMRAM     6     2      4
  1042                           ;! ---------------------------------------------------------------------------------
  1043                           ;! (2) ___lmul                                              12     4      8    1176
  1044                           ;!                                              4 COMRAM    12     4      8
  1045                           ;! ---------------------------------------------------------------------------------
  1046                           ;! (2) ___aldiv                                             14     6      8     985
  1047                           ;!                                             16 COMRAM    14     6      8
  1048                           ;!                             ___lmul (ARG)
  1049                           ;! ---------------------------------------------------------------------------------
  1050                           ;! Estimated maximum stack depth 2
  1051                           ;! ---------------------------------------------------------------------------------
  1052                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1053                           ;! ---------------------------------------------------------------------------------
  1054                           ;! (3) _ISR_high                                             4     4      0       0
  1055                           ;!                                              0 COMRAM     4     4      0
  1056                           ;! ---------------------------------------------------------------------------------
  1057                           ;! Estimated maximum stack depth 3
  1058                           ;! ---------------------------------------------------------------------------------
  1059                           ;!
  1060                           ;! Call Graph Graphs:
  1061                           ;!
  1062                           ;! _main (ROOT)
  1063                           ;!   _calculatePWM
  1064                           ;!     ___aldiv
  1065                           ;!       ___lmul (ARG)
  1066                           ;!     ___lmul
  1067                           ;!     ___wmul
  1068                           ;!   _init_I2C
  1069                           ;!   _init_ISR
  1070                           ;!   _init_PWM
  1071                           ;!     _write_PWM
  1072                           ;!       _calculatePWM (ARG)
  1073                           ;!         ___aldiv
  1074                           ;!           ___lmul (ARG)
  1075                           ;!         ___lmul
  1076                           ;!         ___wmul
  1077                           ;!   _init_QEI
  1078                           ;!   _init_TMR1
  1079                           ;!   _init_UART
  1080                           ;!   _init_VNHIO
  1081                           ;!   _int2char
  1082                           ;!     ___lwdiv
  1083                           ;!     ___lwmod
  1084                           ;!   _write_PWM
  1085                           ;!     _calculatePWM (ARG)
  1086                           ;!       ___aldiv
  1087                           ;!         ___lmul (ARG)
  1088                           ;!       ___lmul
  1089                           ;!       ___wmul
  1090                           ;!
  1091                           ;! _ISR_high (ROOT)
  1092                           ;!
  1093                           
  1094                           ;! Address spaces:
  1095                           
  1096                           ;!Name               Size   Autos  Total    Cost      Usage
  1097                           ;!BIGRAM             2F3      0       0      10        0.0%
  1098                           ;!EEDATA             100      0       0       0        0.0%
  1099                           ;!BITBANK1           100      0       0       6        0.0%
  1100                           ;!BANK1              100      0       0       7        0.0%
  1101                           ;!BITBANK2            F4      0       0       8        0.0%
  1102                           ;!BANK2               F4      0       0       9        0.0%
  1103                           ;!BITBANK0            A0      0       0       3        0.0%
  1104                           ;!BANK0               A0      3       3       4        1.9%
  1105                           ;!BITCOMRAM           5E      0       0       0        0.0%
  1106                           ;!COMRAM              5E     2B      5A       1       95.7%
  1107                           ;!BITSFR_5             0      0       0     200        0.0%
  1108                           ;!SFR_5                0      0       0     200        0.0%
  1109                           ;!BITSFR_4             0      0       0     200        0.0%
  1110                           ;!SFR_4                0      0       0     200        0.0%
  1111                           ;!BITSFR_3             0      0       0     200        0.0%
  1112                           ;!SFR_3                0      0       0     200        0.0%
  1113                           ;!BITSFR_2             0      0       0     200        0.0%
  1114                           ;!SFR_2                0      0       0     200        0.0%
  1115                           ;!BITSFR_1             0      0       0     200        0.0%
  1116                           ;!SFR_1                0      0       0     200        0.0%
  1117                           ;!BITSFR               0      0       0     200        0.0%
  1118                           ;!SFR                  0      0       0     200        0.0%
  1119                           ;!STACK                0      0       0       2        0.0%
  1120                           ;!NULL                 0      0       0       0        0.0%
  1121                           ;!ABS                  0      0      5D       5        0.0%
  1122                           ;!DATA                 0      0      5D      11        0.0%
  1123                           ;!CODE                 0      0       0       0        0.0%
  1124                           
  1125                           	global	_main
  1126                           
  1127 ;; *************** function _main *****************
  1128 ;; Defined at:
  1129 ;;		line 128 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;  counter         1    2[BANK0 ] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1143 ;;      Params:         0       0       0       0
  1144 ;;      Locals:         0       1       0       0
  1145 ;;      Temps:          0       0       0       0
  1146 ;;      Totals:         0       1       0       0
  1147 ;;Total ram usage:        1 bytes
  1148 ;; Hardware stack levels required when called:    3
  1149 ;; This function calls:
  1150 ;;		_calculatePWM
  1151 ;;		_init_I2C
  1152 ;;		_init_ISR
  1153 ;;		_init_PWM
  1154 ;;		_init_QEI
  1155 ;;		_init_TMR1
  1156 ;;		_init_UART
  1157 ;;		_init_VNHIO
  1158 ;;		_int2char
  1159 ;;		_write_PWM
  1160 ;; This function is called by:
  1161 ;;		Startup code after reset
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           psect	text0,class=CODE,space=0,reloc=2,group=0
  1165                           	file	"main.c"
  1166                           	line	128
  1167                           global __ptext0
  1168                           __ptext0:
  1169  00053E                     psect	text0
  1170                           	file	"main.c"
  1171                           	line	128
  1172                           	global	__size_of_main
  1173                           	__size_of_main	equ	__end_of_main-_main
  1174  0000                     	
  1175                           _main:
  1176  00053E                     ;incstack = 0
  1177                           	opt	stack 28
  1178                           	line	130
  1179                           	
  1180                           l1549:
  1181  00053E                     ;main.c: 130:     OSCCON = 0x70;
  1182                           	movlw	low(070h)
  1183  00053E  0E70               	movwf	((c:4051)),c	;volatile
  1184  000540  6ED3               	line	132
  1185                           ;main.c: 132:     PID.Kp = 5310;
  1186                           	movlw	low(014BEh)
  1187  000542  0EBE               	movwf	((c:_PID)),c
  1188  000544  6E2C               	movlw	high(014BEh)
  1189  000546  0E14               	movwf	((c:_PID+1)),c
  1190  000548  6E2D               	movlw	low highword(014BEh)
  1191  00054A  0E00               	movwf	((c:_PID+2)),c
  1192  00054C  6E2E               	movlw	high highword(014BEh)
  1193  00054E  0E00               	movwf	((c:_PID+3)),c
  1194  000550  6E2F               	line	133
  1195                           ;main.c: 133:     PID.Ki = 2655;
  1196                           	movlw	low(0A5Fh)
  1197  000552  0E5F               	movwf	(0+((c:_PID)+04h)),c
  1198  000554  6E30               	movlw	high(0A5Fh)
  1199  000556  0E0A               	movwf	(1+((c:_PID)+04h)),c
  1200  000558  6E31               	movlw	low highword(0A5Fh)
  1201  00055A  0E00               	movwf	(2+((c:_PID)+04h)),c
  1202  00055C  6E32               	movlw	high highword(0A5Fh)
  1203  00055E  0E00               	movwf	(3+((c:_PID)+04h)),c
  1204  000560  6E33               	line	134
  1205                           ;main.c: 134:     PID.Kd = 2664;
  1206                           	movlw	low(0A68h)
  1207  000562  0E68               	movwf	(0+((c:_PID)+08h)),c
  1208  000564  6E34               	movlw	high(0A68h)
  1209  000566  0E0A               	movwf	(1+((c:_PID)+08h)),c
  1210  000568  6E35               	movlw	low highword(0A68h)
  1211  00056A  0E00               	movwf	(2+((c:_PID)+08h)),c
  1212  00056C  6E36               	movlw	high highword(0A68h)
  1213  00056E  0E00               	movwf	(3+((c:_PID)+08h)),c
  1214  000570  6E37               	line	136
  1215                           	
  1216                           l1551:
  1217  000572                     ;main.c: 136:     init_VNHIO();
  1218                           	call	_init_VNHIO	;wreg free
  1219  000572  EC72  F004         	line	137
  1220                           	
  1221                           l1553:
  1222  000576                     ;main.c: 137:     init_I2C();
  1223                           	call	_init_I2C	;wreg free
  1224  000576  EC82  F004         	line	138
  1225                           	
  1226                           l1555:
  1227  00057A                     ;main.c: 138:     init_TMR1();
  1228                           	call	_init_TMR1	;wreg free
  1229  00057A  EC7B  F004         	line	139
  1230                           	
  1231                           l1557:
  1232  00057E                     ;main.c: 139:     init_PWM();
  1233                           	call	_init_PWM	;wreg free
  1234  00057E  EC4D  F004         	line	140
  1235                           	
  1236                           l1559:
  1237  000582                     ;main.c: 140:     init_QEI();
  1238                           	call	_init_QEI	;wreg free
  1239  000582  EC3C  F004         	line	141
  1240                           	
  1241                           l1561:
  1242  000586                     ;main.c: 141:     init_UART();
  1243                           	call	_init_UART	;wreg free
  1244  000586  EC5C  F004         	line	142
  1245                           	
  1246                           l1563:
  1247  00058A                     ;main.c: 142:     init_ISR();
  1248                           	call	_init_ISR	;wreg free
  1249  00058A  EC67  F004         	line	143
  1250                           	
  1251                           l1565:
  1252  00058E                     ;main.c: 143:     GPREG.DIRCTRL = 1;
  1253                           	bsf	((c:_GPREG)),c,0
  1254  00058E  804F               	line	145
  1255                           	
  1256                           l1567:
  1257  000590                     ;main.c: 145:     uint8_t counter = 0;
  1258                           	movlw	low(0)
  1259  000590  0E00               	movlb	0	; () banked
  1260  000592  0100               	movwf	((main@counter))&0ffh
  1261  000594  6F62               	goto	l1569
  1262  000596  EFCD  F002         	line	147
  1263                           ;main.c: 147:     while(1)
  1264                           	
  1265                           l171:; BSR set to: 0
  1266  00059A                     
  1267                           	line	149
  1268                           	
  1269                           l1569:
  1270  00059A                     ;main.c: 148:     {;main.c: 149:         if(1 == GPREG.STCTRL)
  1271                           	btfss	((c:_GPREG)),c,1
  1272  00059A  A24F               	goto	u701
  1273  00059C  EFD2  F002         	goto	u700
  1274  0005A0  EFD4  F002         u701:
  1275  0005A4                     	goto	l1569
  1276  0005A4  EFCD  F002         u700:
  1277  0005A8                     	line	151
  1278                           	
  1279                           l1571:
  1280  0005A8                     ;main.c: 150:         {;main.c: 151:             write_PWM(calculatePWM(ref_pos));
  1281                           	movf	((c:_ref_pos)),c,w
  1282  0005A8  5057               	
  1283                           	call	_calculatePWM
  1284  0005AA  ECB1  F000         	movff	0+?_calculatePWM,(write_PWM@dutyCycle)
  1285  0005AE  C01F  F060         	movff	1+?_calculatePWM,(write_PWM@dutyCycle+1)
  1286  0005B2  C020  F061         	call	_write_PWM	;wreg free
  1287  0005B6  EC28  F004         	line	153
  1288                           	
  1289                           l1573:
  1290  0005BA                     ;main.c: 153:             if(1 == GPREG.DIRCTRL)
  1291                           	btfss	((c:_GPREG)),c,0
  1292  0005BA  A04F               	goto	u711
  1293  0005BC  EFE2  F002         	goto	u710
  1294  0005C0  EFE4  F002         u711:
  1295  0005C4                     	goto	l173
  1296  0005C4  EFE8  F002         u710:
  1297  0005C8                     	line	156
  1298                           	
  1299                           l1575:
  1300  0005C8                     ;main.c: 154:             {;main.c: 156:                 LATA0 = 0;
  1301                           	bcf	c:(31816/8),(31816)&7	;volatile
  1302  0005C8  9089               	line	157
  1303                           ;main.c: 157:                 LATA1 = 1;
  1304                           	bsf	c:(31817/8),(31817)&7	;volatile
  1305  0005CA  8289               	line	158
  1306                           ;main.c: 158:             } else {
  1307                           	goto	l1577
  1308  0005CC  EFEC  F002         	
  1309                           l173:
  1310  0005D0                     	line	160
  1311                           ;main.c: 160:                 LATA0 = 1;
  1312                           	bsf	c:(31816/8),(31816)&7	;volatile
  1313  0005D0  8089               	line	161
  1314                           ;main.c: 161:                 LATA1 = 0;
  1315                           	bcf	c:(31817/8),(31817)&7	;volatile
  1316  0005D2  9289               	goto	l1577
  1317  0005D4  EFEC  F002         	line	162
  1318                           ;main.c: 162:             }
  1319                           	
  1320                           l174:
  1321  0005D8                     	line	164
  1322                           	
  1323                           l1577:
  1324  0005D8                     ;main.c: 164:             string_pos = int2char(pos);
  1325                           	movff	(c:_pos),(c:int2char@number)
  1326  0005D8  C059  F00C         	movff	(c:_pos+1),(c:int2char@number+1)
  1327  0005DC  C05A  F00D         	call	_int2char	;wreg free
  1328  0005E0  EC45  F003         	movff	0+?_int2char,(c:_string_pos)
  1329  0005E4  C00C  F044         	movff	1+?_int2char,(c:_string_pos+1)
  1330  0005E8  C00D  F045         	line	165
  1331                           	
  1332                           l1579:
  1333  0005EC                     ;main.c: 165:             TXIE = 1;
  1334                           	bsf	c:(31980/8),(31980)&7	;volatile
  1335  0005EC  889D               	line	167
  1336                           	
  1337                           l1581:
  1338  0005EE                     ;main.c: 167:             GPREG.STCTRL = 0;
  1339                           	bcf	((c:_GPREG)),c,1
  1340  0005EE  924F               	line	168
  1341                           	
  1342                           l1583:
  1343  0005F0                     ;main.c: 168:             TMR1ON = 1;
  1344                           	bsf	c:(32360/8),(32360)&7	;volatile
  1345  0005F0  80CD               	goto	l1569
  1346  0005F2  EFCD  F002         	line	169
  1347                           ;main.c: 169:         }
  1348                           	
  1349                           l172:
  1350  0005F6                     	goto	l1569
  1351  0005F6  EFCD  F002         	line	170
  1352                           ;main.c: 170:     }
  1353                           	
  1354                           l175:
  1355  0005FA                     	goto	l1569
  1356  0005FA  EFCD  F002         	
  1357                           l176:
  1358  0005FE                     	line	172
  1359                           	
  1360                           l177:
  1361  0005FE                     	global	start
  1362                           	goto	start
  1363  0005FE  EFAF  F000         	opt stack 0
  1364                           GLOBAL	__end_of_main
  1365                           	__end_of_main:
  1366  000602                     	signat	_main,89
  1367                           	global	_int2char
  1368                           
  1369 ;; *************** function _int2char *****************
  1370 ;; Defined at:
  1371 ;;		line 298 in file "main.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  number          2   11[COMRAM] unsigned int 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  digit           1   15[COMRAM] char 
  1376 ;;  num             2   13[COMRAM] unsigned int 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  2   11[COMRAM] PTR unsigned char 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1386 ;;      Params:         2       0       0       0
  1387 ;;      Locals:         3       0       0       0
  1388 ;;      Temps:          0       0       0       0
  1389 ;;      Totals:         5       0       0       0
  1390 ;;Total ram usage:        5 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    2
  1393 ;; This function calls:
  1394 ;;		___lwdiv
  1395 ;;		___lwmod
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           psect	text1,class=CODE,space=0,reloc=2,group=0
  1401                           	line	298
  1402                           global __ptext1
  1403                           __ptext1:
  1404  00068A                     psect	text1
  1405                           	file	"main.c"
  1406                           	line	298
  1407                           	global	__size_of_int2char
  1408                           	__size_of_int2char	equ	__end_of_int2char-_int2char
  1409  0000                     	
  1410                           _int2char:
  1411  00068A                     ;incstack = 0
  1412                           	opt	stack 28
  1413                           	line	301
  1414                           	
  1415                           l1533:
  1416  00068A                     ;main.c: 298: uint8_t * int2char(uint16_t number);main.c: 299: {;main.c: 300:     static
                                  uint8_t string[5];;main.c: 301:     uint16_t num = number;
  1417                           	movff	(c:int2char@number),(c:int2char@num)
  1418  00068A  C00C  F00E         	movff	(c:int2char@number+1),(c:int2char@num+1)
  1419  00068E  C00D  F00F         	line	303
  1420                           	
  1421                           l1535:
  1422  000692                     ;main.c: 303:     for(int8_t digit = 4; 0 <= digit; digit--)
  1423                           	movlw	low(04h)
  1424  000692  0E04               	movwf	((c:int2char@digit)),c
  1425  000694  6E10               	goto	l1543
  1426  000696  EF73  F003         	
  1427                           l213:
  1428  00069A                     	line	305
  1429                           	
  1430                           l1537:
  1431  00069A                     ;main.c: 304:     {;main.c: 305:         string[digit] = 0x30 + num%10;
  1432                           	movf	((c:int2char@digit)),c,w
  1433  00069A  5010               	mullw	01h
  1434  00069C  0D01               	movlw	low(int2char@string)
  1435  00069E  0E50               	addwf	(prodl),c,w
  1436  0006A0  24F3               	movwf	c:fsr2l
  1437  0006A2  6ED9               	movlw	high(int2char@string)
  1438  0006A4  0E00               	addwfc	prod+1,w
  1439  0006A6  20F4               	movwf	1+c:fsr2l
  1440  0006A8  6EDA               	movff	(c:int2char@num),(c:___lwmod@dividend)
  1441  0006AA  C00E  F005         	movff	(c:int2char@num+1),(c:___lwmod@dividend+1)
  1442  0006AE  C00F  F006         	movlw	high(0Ah)
  1443  0006B2  0E00               	movwf	((c:___lwmod@divisor+1)),c
  1444  0006B4  6E08               	movlw	low(0Ah)
  1445  0006B6  0E0A               	movwf	((c:___lwmod@divisor)),c
  1446  0006B8  6E07               	call	___lwmod	;wreg free
  1447  0006BA  EC83  F003         	movf	(0+?___lwmod),c,w
  1448  0006BE  5005               	addlw	low(030h)
  1449  0006C0  0F30               	movwf	indf2,c
  1450  0006C2  6EDF               
  1451                           	line	306
  1452                           	
  1453                           l1539:
  1454  0006C4                     ;main.c: 306:         num = num/10;
  1455                           	movff	(c:int2char@num),(c:___lwdiv@dividend)
  1456  0006C4  C00E  F005         	movff	(c:int2char@num+1),(c:___lwdiv@dividend+1)
  1457  0006C8  C00F  F006         	movlw	high(0Ah)
  1458  0006CC  0E00               	movwf	((c:___lwdiv@divisor+1)),c
  1459  0006CE  6E08               	movlw	low(0Ah)
  1460  0006D0  0E0A               	movwf	((c:___lwdiv@divisor)),c
  1461  0006D2  6E07               	call	___lwdiv	;wreg free
  1462  0006D4  EC01  F003         	movff	0+?___lwdiv,(c:int2char@num)
  1463  0006D8  C005  F00E         	movff	1+?___lwdiv,(c:int2char@num+1)
  1464  0006DC  C006  F00F         	line	307
  1465                           	
  1466                           l1541:
  1467  0006E0                     ;main.c: 307:     }
  1468                           	decf	((c:int2char@digit)),c
  1469  0006E0  0610               	goto	l1543
  1470  0006E2  EF73  F003         	
  1471                           l212:
  1472  0006E6                     	
  1473                           l1543:
  1474  0006E6                     	btfsc	((c:int2char@digit)),c,7
  1475  0006E6  BE10               	goto	u690
  1476  0006E8  EF7A  F003         	goto	u691
  1477  0006EC  EF78  F003         
  1478                           u691:
  1479  0006F0                     	goto	l1537
  1480  0006F0  EF4D  F003         u690:
  1481  0006F4                     	goto	l1545
  1482  0006F4  EF7C  F003         	
  1483                           l214:
  1484  0006F8                     	line	309
  1485                           	
  1486                           l1545:
  1487  0006F8                     ;main.c: 309:     return string;
  1488                           		movlw	low(int2char@string)
  1489  0006F8  0E50               	movwf	((c:?_int2char)),c
  1490  0006FA  6E0C               	movlw	high(int2char@string)
  1491  0006FC  0E00               	movwf	((c:?_int2char+1)),c
  1492  0006FE  6E0D               
  1493                           	goto	l215
  1494  000700  EF82  F003         	
  1495                           l1547:
  1496  000704                     	line	310
  1497                           	
  1498                           l215:
  1499  000704                     	return	;funcret
  1500  000704  0012               	opt stack 0
  1501                           GLOBAL	__end_of_int2char
  1502                           	__end_of_int2char:
  1503  000706                     	signat	_int2char,4218
  1504                           	global	___lwmod
  1505                           
  1506 ;; *************** function ___lwmod *****************
  1507 ;; Defined at:
  1508 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;  dividend        2    4[COMRAM] unsigned int 
  1511 ;;  divisor         2    6[COMRAM] unsigned int 
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;  counter         1    8[COMRAM] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  2    4[COMRAM] unsigned int 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1523 ;;      Params:         4       0       0       0
  1524 ;;      Locals:         1       0       0       0
  1525 ;;      Temps:          0       0       0       0
  1526 ;;      Totals:         5       0       0       0
  1527 ;;Total ram usage:        5 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    1
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_int2char
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           psect	text2,class=CODE,space=0,reloc=2,group=1
  1537                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  1538                           	line	7
  1539                           global __ptext2
  1540                           __ptext2:
  1541  000706                     psect	text2
  1542                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwmod.c"
  1543                           	line	7
  1544                           	global	__size_of___lwmod
  1545                           	__size_of___lwmod	equ	__end_of___lwmod-___lwmod
  1546  0000                     	
  1547                           ___lwmod:
  1548  000706                     ;incstack = 0
  1549                           	opt	stack 28
  1550                           	line	12
  1551                           	
  1552                           l1447:
  1553  000706                     	movf	((c:___lwmod@divisor)),c,w
  1554  000706  5007               iorwf	((c:___lwmod@divisor+1)),c,w
  1555  000708  1008               	btfsc	status,2
  1556  00070A  B4D8               	goto	u641
  1557  00070C  EF8A  F003         	goto	u640
  1558  000710  EF8C  F003         
  1559                           u641:
  1560  000714                     	goto	l719
  1561  000714  EFBA  F003         u640:
  1562  000718                     	line	13
  1563                           	
  1564                           l1449:
  1565  000718                     	movlw	low(01h)
  1566  000718  0E01               	movwf	((c:___lwmod@counter)),c
  1567  00071A  6E09               	line	14
  1568                           	goto	l1453
  1569  00071C  EF96  F003         	
  1570                           l721:
  1571  000720                     	line	15
  1572                           	
  1573                           l1451:
  1574  000720                     	bcf	status,0
  1575  000720  90D8               	rlcf	((c:___lwmod@divisor)),c
  1576  000722  3607               	rlcf	((c:___lwmod@divisor+1)),c
  1577  000724  3608               	line	16
  1578                           	incf	((c:___lwmod@counter)),c
  1579  000726  2A09               	goto	l1453
  1580  000728  EF96  F003         	line	17
  1581                           	
  1582                           l720:
  1583  00072C                     	line	14
  1584                           	
  1585                           l1453:
  1586  00072C                     	
  1587                           	btfss	((c:___lwmod@divisor+1)),c,(15)&7
  1588  00072C  AE08               	goto	u651
  1589  00072E  EF9B  F003         	goto	u650
  1590  000732  EF9D  F003         u651:
  1591  000736                     	goto	l1451
  1592  000736  EF90  F003         u650:
  1593  00073A                     	goto	l1455
  1594  00073A  EFA1  F003         	
  1595                           l722:
  1596  00073E                     	goto	l1455
  1597  00073E  EFA1  F003         	line	18
  1598                           	
  1599                           l723:
  1600  000742                     	line	19
  1601                           	
  1602                           l1455:
  1603  000742                     		movf	((c:___lwmod@divisor)),c,w
  1604  000742  5007               	subwf	((c:___lwmod@dividend)),c,w
  1605  000744  5C05               	movf	((c:___lwmod@divisor+1)),c,w
  1606  000746  5008               	subwfb	((c:___lwmod@dividend+1)),c,w
  1607  000748  5806               	btfss	status,0
  1608  00074A  A0D8               	goto	u661
  1609  00074C  EFAA  F003         	goto	u660
  1610  000750  EFAC  F003         
  1611                           u661:
  1612  000754                     	goto	l1459
  1613  000754  EFB2  F003         u660:
  1614  000758                     	line	20
  1615                           	
  1616                           l1457:
  1617  000758                     	movf	((c:___lwmod@divisor)),c,w
  1618  000758  5007               	subwf	((c:___lwmod@dividend)),c
  1619  00075A  5E05               	movf	((c:___lwmod@divisor+1)),c,w
  1620  00075C  5008               	subwfb	((c:___lwmod@dividend+1)),c
  1621  00075E  5A06               
  1622                           	goto	l1459
  1623  000760  EFB2  F003         	
  1624                           l724:
  1625  000764                     	line	21
  1626                           	
  1627                           l1459:
  1628  000764                     	bcf	status,0
  1629  000764  90D8               	rrcf	((c:___lwmod@divisor+1)),c
  1630  000766  3208               	rrcf	((c:___lwmod@divisor)),c
  1631  000768  3207               	line	22
  1632                           	
  1633                           l1461:
  1634  00076A                     	decfsz	((c:___lwmod@counter)),c
  1635  00076A  2E09               	
  1636                           	goto	l1455
  1637  00076C  EFA1  F003         	goto	l719
  1638  000770  EFBA  F003         	
  1639                           l725:
  1640  000774                     	line	23
  1641                           	
  1642                           l719:
  1643  000774                     	line	24
  1644                           	movff	(c:___lwmod@dividend),(c:?___lwmod)
  1645  000774  C005  F005         	movff	(c:___lwmod@dividend+1),(c:?___lwmod+1)
  1646  000778  C006  F006         	line	25
  1647                           	
  1648                           l726:
  1649  00077C                     	return	;funcret
  1650  00077C  0012               	opt stack 0
  1651                           GLOBAL	__end_of___lwmod
  1652                           	__end_of___lwmod:
  1653  00077E                     	signat	___lwmod,8314
  1654                           	global	___lwdiv
  1655                           
  1656 ;; *************** function ___lwdiv *****************
  1657 ;; Defined at:
  1658 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  dividend        2    4[COMRAM] unsigned int 
  1661 ;;  divisor         2    6[COMRAM] unsigned int 
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  quotient        2    9[COMRAM] unsigned int 
  1664 ;;  counter         1    8[COMRAM] unsigned char 
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  2    4[COMRAM] unsigned int 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1674 ;;      Params:         4       0       0       0
  1675 ;;      Locals:         3       0       0       0
  1676 ;;      Temps:          0       0       0       0
  1677 ;;      Totals:         7       0       0       0
  1678 ;;Total ram usage:        7 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_int2char
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           psect	text3,class=CODE,space=0,reloc=2,group=1
  1688                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  1689                           	line	7
  1690                           global __ptext3
  1691                           __ptext3:
  1692  000602                     psect	text3
  1693                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\lwdiv.c"
  1694                           	line	7
  1695                           	global	__size_of___lwdiv
  1696                           	__size_of___lwdiv	equ	__end_of___lwdiv-___lwdiv
  1697  0000                     	
  1698                           ___lwdiv:
  1699  000602                     ;incstack = 0
  1700                           	opt	stack 28
  1701                           	line	13
  1702                           	
  1703                           l1425:
  1704  000602                     	movlw	high(0)
  1705  000602  0E00               	movwf	((c:___lwdiv@quotient+1)),c
  1706  000604  6E0B               	movlw	low(0)
  1707  000606  0E00               	movwf	((c:___lwdiv@quotient)),c
  1708  000608  6E0A               	line	14
  1709                           	
  1710                           l1427:
  1711  00060A                     	movf	((c:___lwdiv@divisor)),c,w
  1712  00060A  5007               iorwf	((c:___lwdiv@divisor+1)),c,w
  1713  00060C  1008               	btfsc	status,2
  1714  00060E  B4D8               	goto	u611
  1715  000610  EF0C  F003         	goto	u610
  1716  000614  EF0E  F003         
  1717                           u611:
  1718  000618                     	goto	l709
  1719  000618  EF40  F003         u610:
  1720  00061C                     	line	15
  1721                           	
  1722                           l1429:
  1723  00061C                     	movlw	low(01h)
  1724  00061C  0E01               	movwf	((c:___lwdiv@counter)),c
  1725  00061E  6E09               	line	16
  1726                           	goto	l1433
  1727  000620  EF18  F003         	
  1728                           l711:
  1729  000624                     	line	17
  1730                           	
  1731                           l1431:
  1732  000624                     	bcf	status,0
  1733  000624  90D8               	rlcf	((c:___lwdiv@divisor)),c
  1734  000626  3607               	rlcf	((c:___lwdiv@divisor+1)),c
  1735  000628  3608               	line	18
  1736                           	incf	((c:___lwdiv@counter)),c
  1737  00062A  2A09               	goto	l1433
  1738  00062C  EF18  F003         	line	19
  1739                           	
  1740                           l710:
  1741  000630                     	line	16
  1742                           	
  1743                           l1433:
  1744  000630                     	
  1745                           	btfss	((c:___lwdiv@divisor+1)),c,(15)&7
  1746  000630  AE08               	goto	u621
  1747  000632  EF1D  F003         	goto	u620
  1748  000636  EF1F  F003         u621:
  1749  00063A                     	goto	l1431
  1750  00063A  EF12  F003         u620:
  1751  00063E                     	goto	l1435
  1752  00063E  EF23  F003         	
  1753                           l712:
  1754  000642                     	goto	l1435
  1755  000642  EF23  F003         	line	20
  1756                           	
  1757                           l713:
  1758  000646                     	line	21
  1759                           	
  1760                           l1435:
  1761  000646                     	bcf	status,0
  1762  000646  90D8               	rlcf	((c:___lwdiv@quotient)),c
  1763  000648  360A               	rlcf	((c:___lwdiv@quotient+1)),c
  1764  00064A  360B               	line	22
  1765                           	
  1766                           l1437:
  1767  00064C                     		movf	((c:___lwdiv@divisor)),c,w
  1768  00064C  5007               	subwf	((c:___lwdiv@dividend)),c,w
  1769  00064E  5C05               	movf	((c:___lwdiv@divisor+1)),c,w
  1770  000650  5008               	subwfb	((c:___lwdiv@dividend+1)),c,w
  1771  000652  5806               	btfss	status,0
  1772  000654  A0D8               	goto	u631
  1773  000656  EF2F  F003         	goto	u630
  1774  00065A  EF31  F003         
  1775                           u631:
  1776  00065E                     	goto	l1443
  1777  00065E  EF38  F003         u630:
  1778  000662                     	line	23
  1779                           	
  1780                           l1439:
  1781  000662                     	movf	((c:___lwdiv@divisor)),c,w
  1782  000662  5007               	subwf	((c:___lwdiv@dividend)),c
  1783  000664  5E05               	movf	((c:___lwdiv@divisor+1)),c,w
  1784  000666  5008               	subwfb	((c:___lwdiv@dividend+1)),c
  1785  000668  5A06               
  1786                           	line	24
  1787                           	
  1788                           l1441:
  1789  00066A                     	bsf	(0+(0/8)+(c:___lwdiv@quotient)),c,(0)&7
  1790  00066A  800A               	goto	l1443
  1791  00066C  EF38  F003         	line	25
  1792                           	
  1793                           l714:
  1794  000670                     	line	26
  1795                           	
  1796                           l1443:
  1797  000670                     	bcf	status,0
  1798  000670  90D8               	rrcf	((c:___lwdiv@divisor+1)),c
  1799  000672  3208               	rrcf	((c:___lwdiv@divisor)),c
  1800  000674  3207               	line	27
  1801                           	
  1802                           l1445:
  1803  000676                     	decfsz	((c:___lwdiv@counter)),c
  1804  000676  2E09               	
  1805                           	goto	l1435
  1806  000678  EF23  F003         	goto	l709
  1807  00067C  EF40  F003         	
  1808                           l715:
  1809  000680                     	line	28
  1810                           	
  1811                           l709:
  1812  000680                     	line	29
  1813                           	movff	(c:___lwdiv@quotient),(c:?___lwdiv)
  1814  000680  C00A  F005         	movff	(c:___lwdiv@quotient+1),(c:?___lwdiv+1)
  1815  000684  C00B  F006         	line	30
  1816                           	
  1817                           l716:
  1818  000688                     	return	;funcret
  1819  000688  0012               	opt stack 0
  1820                           GLOBAL	__end_of___lwdiv
  1821                           	__end_of___lwdiv:
  1822  00068A                     	signat	___lwdiv,8314
  1823                           	global	_init_VNHIO
  1824                           
  1825 ;; *************** function _init_VNHIO *****************
  1826 ;; Defined at:
  1827 ;;		line 215 in file "main.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, status,2
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1841 ;;      Params:         0       0       0       0
  1842 ;;      Locals:         0       0       0       0
  1843 ;;      Temps:          0       0       0       0
  1844 ;;      Totals:         0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           psect	text4,class=CODE,space=0,reloc=2,group=0
  1855                           	file	"main.c"
  1856                           	line	215
  1857                           global __ptext4
  1858                           __ptext4:
  1859  0008E4                     psect	text4
  1860                           	file	"main.c"
  1861                           	line	215
  1862                           	global	__size_of_init_VNHIO
  1863                           	__size_of_init_VNHIO	equ	__end_of_init_VNHIO-_init_VNHIO
  1864  0000                     	
  1865                           _init_VNHIO:
  1866  0008E4                     ;incstack = 0
  1867                           	opt	stack 29
  1868                           	line	217
  1869                           	
  1870                           l1463:
  1871  0008E4                     ;main.c: 217:     ANSEL0 = 0;
  1872                           	movlw	low(0)
  1873  0008E4  0E00               	movwf	((c:4024)),c	;volatile
  1874  0008E6  6EB8               	line	218
  1875                           ;main.c: 218:     ANSEL1 = 0;
  1876                           	movlw	low(0)
  1877  0008E8  0E00               	movwf	((c:4025)),c	;volatile
  1878  0008EA  6EB9               	line	219
  1879                           	
  1880                           l1465:
  1881  0008EC                     ;main.c: 219:     TRISA0 = 0;
  1882                           	bcf	c:(31888/8),(31888)&7	;volatile
  1883  0008EC  9092               	line	220
  1884                           	
  1885                           l1467:
  1886  0008EE                     ;main.c: 220:     TRISA1 = 0;
  1887                           	bcf	c:(31889/8),(31889)&7	;volatile
  1888  0008EE  9292               	line	221
  1889                           	
  1890                           l1469:
  1891  0008F0                     ;main.c: 221:     LATA0 = 0;
  1892                           	bcf	c:(31816/8),(31816)&7	;volatile
  1893  0008F0  9089               	line	222
  1894                           	
  1895                           l1471:
  1896  0008F2                     ;main.c: 222:     LATA1 = 1;
  1897                           	bsf	c:(31817/8),(31817)&7	;volatile
  1898  0008F2  8289               	line	223
  1899                           	
  1900                           l189:
  1901  0008F4                     	return	;funcret
  1902  0008F4  0012               	opt stack 0
  1903                           GLOBAL	__end_of_init_VNHIO
  1904                           	__end_of_init_VNHIO:
  1905  0008F6                     	signat	_init_VNHIO,89
  1906                           	global	_init_UART
  1907                           
  1908 ;; *************** function _init_UART *****************
  1909 ;; Defined at:
  1910 ;;		line 259 in file "main.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, status,2
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1924 ;;      Params:         0       0       0       0
  1925 ;;      Locals:         0       0       0       0
  1926 ;;      Temps:          0       0       0       0
  1927 ;;      Totals:         0       0       0       0
  1928 ;;Total ram usage:        0 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    1
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_main
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           psect	text5,class=CODE,space=0,reloc=2,group=0
  1938                           	line	259
  1939                           global __ptext5
  1940                           __ptext5:
  1941  0008B8                     psect	text5
  1942                           	file	"main.c"
  1943                           	line	259
  1944                           	global	__size_of_init_UART
  1945                           	__size_of_init_UART	equ	__end_of_init_UART-_init_UART
  1946  0000                     	
  1947                           _init_UART:
  1948  0008B8                     ;incstack = 0
  1949                           	opt	stack 29
  1950                           	line	261
  1951                           	
  1952                           l1491:
  1953  0008B8                     ;main.c: 261:     GPREG.TXCTRL = 0;
  1954                           	bcf	((c:_GPREG)),c,6
  1955  0008B8  9C4F               	line	262
  1956                           ;main.c: 262:     TRISC6 = 0;
  1957                           	bcf	c:(31910/8),(31910)&7	;volatile
  1958  0008BA  9C94               	line	263
  1959                           	
  1960                           l1493:
  1961  0008BC                     ;main.c: 263:     TXSTA = 0x20;
  1962                           	movlw	low(020h)
  1963  0008BC  0E20               	movwf	((c:4012)),c	;volatile
  1964  0008BE  6EAC               	line	264
  1965                           ;main.c: 264:     RCSTA = 0x90;
  1966                           	movlw	low(090h)
  1967  0008C0  0E90               	movwf	((c:4011)),c	;volatile
  1968  0008C2  6EAB               	line	265
  1969                           ;main.c: 265:     BAUDCON = 0x0;
  1970                           	movlw	low(0)
  1971  0008C4  0E00               	movwf	((c:4010)),c	;volatile
  1972  0008C6  6EAA               	line	266
  1973                           ;main.c: 266:     SPBRG = 12;
  1974                           	movlw	low(0Ch)
  1975  0008C8  0E0C               	movwf	((c:4015)),c	;volatile
  1976  0008CA  6EAF               	line	267
  1977                           	
  1978                           l201:
  1979  0008CC                     	return	;funcret
  1980  0008CC  0012               	opt stack 0
  1981                           GLOBAL	__end_of_init_UART
  1982                           	__end_of_init_UART:
  1983  0008CE                     	signat	_init_UART,89
  1984                           	global	_init_TMR1
  1985                           
  1986 ;; *************** function _init_TMR1 *****************
  1987 ;; Defined at:
  1988 ;;		line 208 in file "main.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;		None
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, status,2
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2002 ;;      Params:         0       0       0       0
  2003 ;;      Locals:         0       0       0       0
  2004 ;;      Temps:          0       0       0       0
  2005 ;;      Totals:         0       0       0       0
  2006 ;;Total ram usage:        0 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    1
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           psect	text6,class=CODE,space=0,reloc=2,group=0
  2016                           	line	208
  2017                           global __ptext6
  2018                           __ptext6:
  2019  0008F6                     psect	text6
  2020                           	file	"main.c"
  2021                           	line	208
  2022                           	global	__size_of_init_TMR1
  2023                           	__size_of_init_TMR1	equ	__end_of_init_TMR1-_init_TMR1
  2024  0000                     	
  2025                           _init_TMR1:
  2026  0008F6                     ;incstack = 0
  2027                           	opt	stack 29
  2028                           	line	211
  2029                           	
  2030                           l1477:
  2031  0008F6                     ;main.c: 211:     T1CON = 0xF9;
  2032                           	movlw	low(0F9h)
  2033  0008F6  0EF9               	movwf	((c:4045)),c	;volatile
  2034  0008F8  6ECD               	line	212
  2035                           ;main.c: 212:     TMR1 =65485;
  2036                           	movlw	high(0FFCDh)
  2037  0008FA  0EFF               	movwf	((c:4046+1)),c	;volatile
  2038  0008FC  6ECF               	movlw	low(0FFCDh)
  2039  0008FE  0ECD               	movwf	((c:4046)),c	;volatile
  2040  000900  6ECE               	line	213
  2041                           	
  2042                           l186:
  2043  000902                     	return	;funcret
  2044  000902  0012               	opt stack 0
  2045                           GLOBAL	__end_of_init_TMR1
  2046                           	__end_of_init_TMR1:
  2047  000904                     	signat	_init_TMR1,89
  2048                           	global	_init_QEI
  2049                           
  2050 ;; *************** function _init_QEI *****************
  2051 ;; Defined at:
  2052 ;;		line 243 in file "main.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2066 ;;      Params:         0       0       0       0
  2067 ;;      Locals:         0       0       0       0
  2068 ;;      Temps:          0       0       0       0
  2069 ;;      Totals:         0       0       0       0
  2070 ;;Total ram usage:        0 bytes
  2071 ;; Hardware stack levels used:    1
  2072 ;; Hardware stack levels required when called:    1
  2073 ;; This function calls:
  2074 ;;		Nothing
  2075 ;; This function is called by:
  2076 ;;		_main
  2077 ;; This function uses a non-reentrant model
  2078 ;;
  2079                           psect	text7,class=CODE,space=0,reloc=2,group=0
  2080                           	line	243
  2081                           global __ptext7
  2082                           __ptext7:
  2083  000878                     psect	text7
  2084                           	file	"main.c"
  2085                           	line	243
  2086                           	global	__size_of_init_QEI
  2087                           	__size_of_init_QEI	equ	__end_of_init_QEI-_init_QEI
  2088  0000                     	
  2089                           _init_QEI:
  2090  000878                     ;incstack = 0
  2091                           	opt	stack 29
  2092                           	line	245
  2093                           	
  2094                           l1487:
  2095  000878                     ;main.c: 245:     TRISA4 = 1;
  2096                           	bsf	c:(31892/8),(31892)&7	;volatile
  2097  000878  8892               	line	246
  2098                           ;main.c: 246:     TRISA5 = 1;
  2099                           	bsf	c:(31893/8),(31893)&7	;volatile
  2100  00087A  8A92               	line	248
  2101                           	
  2102                           l1489:
  2103  00087C                     ;main.c: 248:     POSCNTL = 6300;
  2104                           	movlw	low(09Ch)
  2105  00087C  0E9C               	movwf	((c:3942)),c	;volatile
  2106  00087E  6E66               	line	249
  2107                           ;main.c: 249:     POSCNTH = 6300>>8;
  2108                           	movlw	low(018h)
  2109  000880  0E18               	movwf	((c:3943)),c	;volatile
  2110  000882  6E67               	line	250
  2111                           ;main.c: 250:     pos = 6300;
  2112                           	movlw	high(0189Ch)
  2113  000884  0E18               	movwf	((c:_pos+1)),c
  2114  000886  6E5A               	movlw	low(0189Ch)
  2115  000888  0E9C               	movwf	((c:_pos)),c
  2116  00088A  6E59               	line	252
  2117                           ;main.c: 252:     MAXCNTL = 8400;
  2118                           	movlw	low(0D0h)
  2119  00088C  0ED0               	movwf	((c:3940)),c	;volatile
  2120  00088E  6E64               	line	253
  2121                           ;main.c: 253:     MAXCNTH = 8400>>8;
  2122                           	movlw	low(020h)
  2123  000890  0E20               	movwf	((c:3941)),c	;volatile
  2124  000892  6E65               	line	255
  2125                           ;main.c: 255:     QEICON = 0x98;
  2126                           	movlw	low(098h)
  2127  000894  0E98               	movwf	((c:4022)),c	;volatile
  2128  000896  6EB6               	line	257
  2129                           	
  2130                           l198:
  2131  000898                     	return	;funcret
  2132  000898  0012               	opt stack 0
  2133                           GLOBAL	__end_of_init_QEI
  2134                           	__end_of_init_QEI:
  2135  00089A                     	signat	_init_QEI,89
  2136                           	global	_init_PWM
  2137                           
  2138 ;; *************** function _init_PWM *****************
  2139 ;; Defined at:
  2140 ;;		line 225 in file "main.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;		None
  2143 ;; Auto vars:     Size  Location     Type
  2144 ;;		None
  2145 ;; Return value:  Size  Location     Type
  2146 ;;                  1    wreg      void 
  2147 ;; Registers used:
  2148 ;;		wreg, status,2, status,0, cstack
  2149 ;; Tracked objects:
  2150 ;;		On entry : 0/0
  2151 ;;		On exit  : 0/0
  2152 ;;		Unchanged: 0/0
  2153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2154 ;;      Params:         0       0       0       0
  2155 ;;      Locals:         0       0       0       0
  2156 ;;      Temps:          0       0       0       0
  2157 ;;      Totals:         0       0       0       0
  2158 ;;Total ram usage:        0 bytes
  2159 ;; Hardware stack levels used:    1
  2160 ;; Hardware stack levels required when called:    2
  2161 ;; This function calls:
  2162 ;;		_write_PWM
  2163 ;; This function is called by:
  2164 ;;		_main
  2165 ;; This function uses a non-reentrant model
  2166 ;;
  2167                           psect	text8,class=CODE,space=0,reloc=2,group=0
  2168                           	line	225
  2169                           global __ptext8
  2170                           __ptext8:
  2171  00089A                     psect	text8
  2172                           	file	"main.c"
  2173                           	line	225
  2174                           	global	__size_of_init_PWM
  2175                           	__size_of_init_PWM	equ	__end_of_init_PWM-_init_PWM
  2176  0000                     	
  2177                           _init_PWM:
  2178  00089A                     ;incstack = 0
  2179                           	opt	stack 28
  2180                           	line	227
  2181                           	
  2182                           l1479:
  2183  00089A                     ;main.c: 227:     TRISC2 = 0;
  2184                           	bcf	c:(31906/8),(31906)&7	;volatile
  2185  00089A  9494               	line	228
  2186                           ;main.c: 228:     LATC2 = 0;
  2187                           	bcf	c:(31834/8),(31834)&7	;volatile
  2188  00089C  948B               	line	230
  2189                           	
  2190                           l1481:
  2191  00089E                     ;main.c: 230:     CCP1CON = 0xF;
  2192                           	movlw	low(0Fh)
  2193  00089E  0E0F               	movwf	((c:4029)),c	;volatile
  2194  0008A0  6EBD               	line	231
  2195                           ;main.c: 231:     T2CON = 0x4;
  2196                           	movlw	low(04h)
  2197  0008A2  0E04               	movwf	((c:4042)),c	;volatile
  2198  0008A4  6ECA               	line	232
  2199                           	
  2200                           l1483:
  2201  0008A6                     ;main.c: 232:     PR2 = 255u;
  2202                           	setf	((c:4043)),c	;volatile
  2203  0008A6  68CB               	line	233
  2204                           	
  2205                           l1485:
  2206  0008A8                     ;main.c: 233:     write_PWM(0);
  2207                           	movlw	high(0)
  2208  0008A8  0E00               	movlb	0	; () banked
  2209  0008AA  0100               	movwf	((write_PWM@dutyCycle+1))&0ffh
  2210  0008AC  6F61               	movlw	low(0)
  2211  0008AE  0E00               	movwf	((write_PWM@dutyCycle))&0ffh
  2212  0008B0  6F60               	call	_write_PWM	;wreg free
  2213  0008B2  EC28  F004         	line	234
  2214                           	
  2215                           l192:
  2216  0008B6                     	return	;funcret
  2217  0008B6  0012               	opt stack 0
  2218                           GLOBAL	__end_of_init_PWM
  2219                           	__end_of_init_PWM:
  2220  0008B8                     	signat	_init_PWM,89
  2221                           	global	_write_PWM
  2222                           
  2223 ;; *************** function _write_PWM *****************
  2224 ;; Defined at:
  2225 ;;		line 236 in file "main.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;  dutyCycle       2    0[BANK0 ] unsigned int 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;		None
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  1    wreg      void 
  2232 ;; Registers used:
  2233 ;;		wreg, status,2, status,0
  2234 ;; Tracked objects:
  2235 ;;		On entry : 0/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2239 ;;      Params:         0       2       0       0
  2240 ;;      Locals:         0       0       0       0
  2241 ;;      Temps:          1       0       0       0
  2242 ;;      Totals:         1       2       0       0
  2243 ;;Total ram usage:        3 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; Hardware stack levels required when called:    1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_main
  2250 ;;		_init_PWM
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           psect	text9,class=CODE,space=0,reloc=2,group=0
  2254                           	line	236
  2255                           global __ptext9
  2256                           __ptext9:
  2257  000850                     psect	text9
  2258                           	file	"main.c"
  2259                           	line	236
  2260                           	global	__size_of_write_PWM
  2261                           	__size_of_write_PWM	equ	__end_of_write_PWM-_write_PWM
  2262  0000                     	
  2263                           _write_PWM:
  2264  000850                     ;incstack = 0
  2265                           	opt	stack 29
  2266                           	line	238
  2267                           	
  2268                           l1359:
  2269  000850                     ;main.c: 236: void write_PWM(uint16_t dutyCycle);main.c: 237: {;main.c: 238:     CCP1CON
                                 bits.DC1B = dutyCycle % 4u;
  2270                           	movff	(write_PWM@dutyCycle),??_write_PWM+0+0
  2271  000850  C060  F02B         	movlw	03h
  2272  000854  0E03               	andwf	(??_write_PWM+0+0),c
  2273  000856  162B               	swapf	(??_write_PWM+0+0),c
  2274  000858  3A2B               	movf	((c:4029)),c,w	;volatile
  2275  00085A  50BD               	xorwf	(??_write_PWM+0+0),c,w
  2276  00085C  182B               	andlw	not (((1<<2)-1)<<4)
  2277  00085E  0BCF               	xorwf	(??_write_PWM+0+0),c,w
  2278  000860  182B               	movwf	((c:4029)),c	;volatile
  2279  000862  6EBD               	line	239
  2280                           	
  2281                           l1361:
  2282  000864                     ;main.c: 239:     dutyCycle >>= 2;
  2283                           	movlb	0	; () banked
  2284  000864  0100               	bcf	status,0
  2285  000866  90D8               	rrcf	((write_PWM@dutyCycle+1))&0ffh
  2286  000868  3361               	rrcf	((write_PWM@dutyCycle))&0ffh
  2287  00086A  3360               	bcf	status,0
  2288  00086C  90D8               	rrcf	((write_PWM@dutyCycle+1))&0ffh
  2289  00086E  3361               	rrcf	((write_PWM@dutyCycle))&0ffh
  2290  000870  3360               	line	240
  2291                           	
  2292                           l1363:; BSR set to: 0
  2293  000872                     
  2294                           ;main.c: 240:     CCPR1L = (uint8_t) dutyCycle;
  2295                           	movff	(write_PWM@dutyCycle),(c:4030)	;volatile
  2296  000872  C060  FFBE         	line	241
  2297                           	
  2298                           l195:; BSR set to: 0
  2299  000876                     
  2300                           	return	;funcret
  2301  000876  0012               	opt stack 0
  2302                           GLOBAL	__end_of_write_PWM
  2303                           	__end_of_write_PWM:
  2304  000878                     	signat	_write_PWM,4217
  2305                           	global	_init_ISR
  2306                           
  2307 ;; *************** function _init_ISR *****************
  2308 ;; Defined at:
  2309 ;;		line 278 in file "main.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;		None
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;		None
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		None
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 0/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2323 ;;      Params:         0       0       0       0
  2324 ;;      Locals:         0       0       0       0
  2325 ;;      Temps:          0       0       0       0
  2326 ;;      Totals:         0       0       0       0
  2327 ;;Total ram usage:        0 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    1
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_main
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           psect	text10,class=CODE,space=0,reloc=2,group=0
  2337                           	line	278
  2338                           global __ptext10
  2339                           __ptext10:
  2340  0008CE                     psect	text10
  2341                           	file	"main.c"
  2342                           	line	278
  2343                           	global	__size_of_init_ISR
  2344                           	__size_of_init_ISR	equ	__end_of_init_ISR-_init_ISR
  2345  0000                     	
  2346                           _init_ISR:; BSR set to: 0
  2347  0008CE                     
  2348                           ;incstack = 0
  2349                           	opt	stack 29
  2350                           	line	281
  2351                           	
  2352                           l1495:
  2353  0008CE                     ;main.c: 281:     TMR1IF = 0;
  2354                           	bcf	c:(31984/8),(31984)&7	;volatile
  2355  0008CE  909E               	line	282
  2356                           ;main.c: 282:     TMR1IE = 1;
  2357                           	bsf	c:(31976/8),(31976)&7	;volatile
  2358  0008D0  809D               	line	283
  2359                           ;main.c: 283:     TMR1IP = 1;
  2360                           	bsf	c:(31992/8),(31992)&7	;volatile
  2361  0008D2  809F               	line	286
  2362                           ;main.c: 286:     SSPIE = 1;
  2363                           	bsf	c:(31979/8),(31979)&7	;volatile
  2364  0008D4  869D               	line	287
  2365                           ;main.c: 287:     SSPIP = 1;
  2366                           	bsf	c:(31995/8),(31995)&7	;volatile
  2367  0008D6  869F               	line	290
  2368                           ;main.c: 290:     TXIE = 0;
  2369                           	bcf	c:(31980/8),(31980)&7	;volatile
  2370  0008D8  989D               	line	291
  2371                           ;main.c: 291:     TXIP = 1;
  2372                           	bsf	c:(31996/8),(31996)&7	;volatile
  2373  0008DA  889F               	line	292
  2374                           ;main.c: 292:     TXIF = 0;
  2375                           	bcf	c:(31988/8),(31988)&7	;volatile
  2376  0008DC  989E               	line	294
  2377                           ;main.c: 294:     IPEN=1;
  2378                           	bsf	c:(32391/8),(32391)&7	;volatile
  2379  0008DE  8ED0               	line	295
  2380                           ;main.c: 295:     GIE = 1;
  2381                           	bsf	c:(32663/8),(32663)&7	;volatile
  2382  0008E0  8EF2               	line	296
  2383                           	
  2384                           l207:
  2385  0008E2                     	return	;funcret
  2386  0008E2  0012               	opt stack 0
  2387                           GLOBAL	__end_of_init_ISR
  2388                           	__end_of_init_ISR:
  2389  0008E4                     	signat	_init_ISR,89
  2390                           	global	_init_I2C
  2391                           
  2392 ;; *************** function _init_I2C *****************
  2393 ;; Defined at:
  2394 ;;		line 269 in file "main.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;		None
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2408 ;;      Params:         0       0       0       0
  2409 ;;      Locals:         0       0       0       0
  2410 ;;      Temps:          0       0       0       0
  2411 ;;      Totals:         0       0       0       0
  2412 ;;Total ram usage:        0 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    1
  2415 ;; This function calls:
  2416 ;;		Nothing
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           psect	text11,class=CODE,space=0,reloc=2,group=0
  2422                           	line	269
  2423                           global __ptext11
  2424                           __ptext11:
  2425  000904                     psect	text11
  2426                           	file	"main.c"
  2427                           	line	269
  2428                           	global	__size_of_init_I2C
  2429                           	__size_of_init_I2C	equ	__end_of_init_I2C-_init_I2C
  2430  0000                     	
  2431                           _init_I2C:
  2432  000904                     ;incstack = 0
  2433                           	opt	stack 29
  2434                           	line	271
  2435                           	
  2436                           l1473:
  2437  000904                     ;main.c: 271:     TRISC5 = 1;
  2438                           	bsf	c:(31909/8),(31909)&7	;volatile
  2439  000904  8A94               	line	272
  2440                           ;main.c: 272:     TRISC4 = 1;
  2441                           	bsf	c:(31908/8),(31908)&7	;volatile
  2442  000906  8894               	line	273
  2443                           	
  2444                           l1475:
  2445  000908                     ;main.c: 273:     SSPCON =0b00110110;
  2446                           	movlw	low(036h)
  2447  000908  0E36               	movwf	((c:4038)),c	;volatile
  2448  00090A  6EC6               	line	275
  2449                           ;main.c: 275:     SSPADD = 0x46;
  2450                           	movlw	low(046h)
  2451  00090C  0E46               	movwf	((c:4040)),c	;volatile
  2452  00090E  6EC8               	line	276
  2453                           	
  2454                           l204:
  2455  000910                     	return	;funcret
  2456  000910  0012               	opt stack 0
  2457                           GLOBAL	__end_of_init_I2C
  2458                           	__end_of_init_I2C:
  2459  000912                     	signat	_init_I2C,89
  2460                           	global	_calculatePWM
  2461                           
  2462 ;; *************** function _calculatePWM *****************
  2463 ;; Defined at:
  2464 ;;		line 174 in file "main.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  setpoint        1    wreg     char 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;  setpoint        1    0[COMRAM] char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  4   30[COMRAM] long 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2478 ;;      Params:         4       0       0       0
  2479 ;;      Locals:         0       0       0       0
  2480 ;;      Temps:          8       0       0       0
  2481 ;;      Totals:        12       0       0       0
  2482 ;;Total ram usage:       12 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    2
  2485 ;; This function calls:
  2486 ;;		___aldiv
  2487 ;;		___lmul
  2488 ;;		___wmul
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           psect	text12,class=CODE,space=0,reloc=2,group=0
  2494                           	line	174
  2495                           global __ptext12
  2496                           __ptext12:
  2497  000162                     psect	text12
  2498                           	file	"main.c"
  2499                           	line	174
  2500                           	global	__size_of_calculatePWM
  2501                           	__size_of_calculatePWM	equ	__end_of_calculatePWM-_calculatePWM
  2502  0000                     	
  2503                           _calculatePWM:
  2504  000162                     ;incstack = 0
  2505                           	opt	stack 28
  2506                           	line	177
  2507                           	
  2508                           l1497:
  2509  000162                     ;main.c: 174: int32_t calculatePWM(int8_t setpoint);main.c: 175: {;main.c: 177:     pos 
                                 = POSCNTH;
  2510                           	movff	(c:3943),(c:_pos)	;volatile
  2511  000162  CF67 F059          	clrf	((c:_pos+1)),c
  2512  000166  6A5A               	line	178
  2513                           	
  2514                           l1499:
  2515  000168                     ;main.c: 178:     pos <<= 8;
  2516                           	movf	((c:_pos)),c,w
  2517  000168  5059               	movwf	((c:_pos+1)),c
  2518  00016A  6E5A               	clrf	((c:_pos)),c
  2519  00016C  6A59               	line	179
  2520                           	
  2521                           l1501:
  2522  00016E                     ;main.c: 179:     pos |= POSCNTL;
  2523                           	movf	((c:3942)),c,w	;volatile
  2524  00016E  5066               	iorwf	((c:_pos)),c
  2525  000170  1259               	line	181
  2526                           	
  2527                           l1503:
  2528  000172                     ;main.c: 181:     error = (ref_pos - pos);
  2529                           	movff	(c:_pos),??_calculatePWM+0+0
  2530  000172  C059  F023         	movff	(c:_pos+1),??_calculatePWM+0+0+1
  2531  000176  C05A  F024         	comf	(??_calculatePWM+0+0),c
  2532  00017A  1E23               	comf	(??_calculatePWM+0+1),c
  2533  00017C  1E24               	infsnz	(??_calculatePWM+0+0),c
  2534  00017E  4A23               	incf	(??_calculatePWM+0+1),c
  2535  000180  2A24               	movf	((c:_ref_pos)),c,w
  2536  000182  5057               	addwf	(??_calculatePWM+0+0),c,w
  2537  000184  2423               	movwf	((c:_error)),c
  2538  000186  6E4A               	movf	((c:_ref_pos+1)),c,w
  2539  000188  5058               	addwfc	(??_calculatePWM+0+1),c,w
  2540  00018A  2024               	movwf	1+((c:_error)),c
  2541  00018C  6E4B               	line	182
  2542                           	
  2543                           l1505:
  2544  00018E                     ;main.c: 182:     suma_error += 50*error;
  2545                           	movff	(c:_error),(c:___wmul@multiplier)
  2546  00018E  C04A  F005         	movff	(c:_error+1),(c:___wmul@multiplier+1)
  2547  000192  C04B  F006         	movlw	high(032h)
  2548  000196  0E00               	movwf	((c:___wmul@multiplicand+1)),c
  2549  000198  6E08               	movlw	low(032h)
  2550  00019A  0E32               	movwf	((c:___wmul@multiplicand)),c
  2551  00019C  6E07               	call	___wmul	;wreg free
  2552  00019E  EC13  F004         	movff	0+?___wmul,??_calculatePWM+0+0
  2553  0001A2  C005  F023         	movff	1+?___wmul,??_calculatePWM+0+0+1
  2554  0001A6  C006  F024         	movlw	0
  2555  0001AA  0E00               	btfsc	(??_calculatePWM+0+0+1)&0ffh,c,7
  2556  0001AC  BE24               	movlw	255
  2557  0001AE  0EFF               	movwf	(??_calculatePWM+0+0+2)&0ffh,c
  2558  0001B0  6E25               	movwf	(??_calculatePWM+0+0+3)&0ffh,c
  2559  0001B2  6E26               	movf	(??_calculatePWM+0+0),c,w
  2560  0001B4  5023               	addwf	((c:_suma_error)),c
  2561  0001B6  2640               	movf	(??_calculatePWM+0+1),c,w
  2562  0001B8  5024               	addwfc	((c:_suma_error+1)),c
  2563  0001BA  2241               	movf	(??_calculatePWM+0+2),c,w
  2564  0001BC  5025               	addwfc	((c:_suma_error+2)),c
  2565  0001BE  2242               	movf	(??_calculatePWM+0+3),c,w
  2566  0001C0  5026               	addwfc	((c:_suma_error+3)),c
  2567  0001C2  2243               
  2568                           	line	183
  2569                           	
  2570                           l1507:
  2571  0001C4                     ;main.c: 183:     suma_error /= 1000;
  2572                           	movff	(c:_suma_error),(c:___aldiv@dividend)
  2573  0001C4  C040  F011         	movff	(c:_suma_error+1),(c:___aldiv@dividend+1)
  2574  0001C8  C041  F012         	movff	(c:_suma_error+2),(c:___aldiv@dividend+2)
  2575  0001CC  C042  F013         	movff	(c:_suma_error+3),(c:___aldiv@dividend+3)
  2576  0001D0  C043  F014         	movlw	low(03E8h)
  2577  0001D4  0EE8               	movwf	((c:___aldiv@divisor)),c
  2578  0001D6  6E15               	movlw	high(03E8h)
  2579  0001D8  0E03               	movwf	((c:___aldiv@divisor+1)),c
  2580  0001DA  6E16               	movlw	low highword(03E8h)
  2581  0001DC  0E00               	movwf	((c:___aldiv@divisor+2)),c
  2582  0001DE  6E17               	movlw	high highword(03E8h)
  2583  0001E0  0E00               	movwf	((c:___aldiv@divisor+3)),c
  2584  0001E2  6E18               	call	___aldiv	;wreg free
  2585  0001E4  EC05  F002         	movff	0+?___aldiv,(c:_suma_error)
  2586  0001E8  C011  F040         	movff	1+?___aldiv,(c:_suma_error+1)
  2587  0001EC  C012  F041         	movff	2+?___aldiv,(c:_suma_error+2)
  2588  0001F0  C013  F042         	movff	3+?___aldiv,(c:_suma_error+3)
  2589  0001F4  C014  F043         	
  2590                           	line	184
  2591                           	
  2592                           l1509:
  2593  0001F8                     ;main.c: 184:     velocity = (int32_t)(error - error_ant)*20;
  2594                           	movff	(c:_error_ant),??_calculatePWM+0+0
  2595  0001F8  C048  F023         	movff	(c:_error_ant+1),??_calculatePWM+0+0+1
  2596  0001FC  C049  F024         	comf	(??_calculatePWM+0+0),c
  2597  000200  1E23               	comf	(??_calculatePWM+0+1),c
  2598  000202  1E24               	infsnz	(??_calculatePWM+0+0),c
  2599  000204  4A23               	incf	(??_calculatePWM+0+1),c
  2600  000206  2A24               	movf	((c:_error)),c,w
  2601  000208  504A               	addwf	(??_calculatePWM+0+0),c
  2602  00020A  2623               	movf	((c:_error+1)),c,w
  2603  00020C  504B               	addwfc	(??_calculatePWM+0+1),c
  2604  00020E  2224               	movff	??_calculatePWM+0+0,(c:___lmul@multiplier)
  2605  000210  C023  F005         	movff	??_calculatePWM+0+1,(c:___lmul@multiplier+1)
  2606  000214  C024  F006         	movlw	0
  2607  000218  0E00               	btfsc	((c:___lmul@multiplier+1)),c,7
  2608  00021A  BE06               	movlw	-1
  2609  00021C  0EFF               	movwf	((c:___lmul@multiplier+2)),c
  2610  00021E  6E07               	movwf	((c:___lmul@multiplier+3)),c
  2611  000220  6E08               	movlw	low(014h)
  2612  000222  0E14               	movwf	((c:___lmul@multiplicand)),c
  2613  000224  6E09               	movlw	high(014h)
  2614  000226  0E00               	movwf	((c:___lmul@multiplicand+1)),c
  2615  000228  6E0A               	movlw	low highword(014h)
  2616  00022A  0E00               	movwf	((c:___lmul@multiplicand+2)),c
  2617  00022C  6E0B               	movlw	high highword(014h)
  2618  00022E  0E00               	movwf	((c:___lmul@multiplicand+3)),c
  2619  000230  6E0C               	call	___lmul	;wreg free
  2620  000232  ECBF  F003         	movff	0+?___lmul,(c:_velocity)
  2621  000236  C005  F038         	movff	1+?___lmul,(c:_velocity+1)
  2622  00023A  C006  F039         	movff	2+?___lmul,(c:_velocity+2)
  2623  00023E  C007  F03A         	movff	3+?___lmul,(c:_velocity+3)
  2624  000242  C008  F03B         	
  2625                           	line	185
  2626                           	
  2627                           l1511:
  2628  000246                     ;main.c: 185:     volt = (PID.Kp * error) + (PID.Ki * suma_error) + (PID.Kd*velocity);
  2629                           	movff	(c:_error),(c:___lmul@multiplier)
  2630  000246  C04A  F005         	movff	(c:_error+1),(c:___lmul@multiplier+1)
  2631  00024A  C04B  F006         	movlw	0
  2632  00024E  0E00               	btfsc	((c:___lmul@multiplier+1)),c,7
  2633  000250  BE06               	movlw	-1
  2634  000252  0EFF               	movwf	((c:___lmul@multiplier+2)),c
  2635  000254  6E07               	movwf	((c:___lmul@multiplier+3)),c
  2636  000256  6E08               	movff	(c:_PID),(c:___lmul@multiplicand)
  2637  000258  C02C  F009         	movff	(c:_PID+1),(c:___lmul@multiplicand+1)
  2638  00025C  C02D  F00A         	movff	(c:_PID+2),(c:___lmul@multiplicand+2)
  2639  000260  C02E  F00B         	movff	(c:_PID+3),(c:___lmul@multiplicand+3)
  2640  000264  C02F  F00C         	call	___lmul	;wreg free
  2641  000268  ECBF  F003         	movff	0+?___lmul,??_calculatePWM+0+0
  2642  00026C  C005  F023         	movff	1+?___lmul,??_calculatePWM+0+0+1
  2643  000270  C006  F024         	movff	2+?___lmul,??_calculatePWM+0+0+2
  2644  000274  C007  F025         	movff	3+?___lmul,??_calculatePWM+0+0+3
  2645  000278  C008  F026         	
  2646                           	movff	0+((c:_PID)+04h),(c:___lmul@multiplier)
  2647  00027C  C030  F005         	movff	1+((c:_PID)+04h),(c:___lmul@multiplier+1)
  2648  000280  C031  F006         	movff	2+((c:_PID)+04h),(c:___lmul@multiplier+2)
  2649  000284  C032  F007         	movff	3+((c:_PID)+04h),(c:___lmul@multiplier+3)
  2650  000288  C033  F008         	movff	(c:_suma_error),(c:___lmul@multiplicand)
  2651  00028C  C040  F009         	movff	(c:_suma_error+1),(c:___lmul@multiplicand+1)
  2652  000290  C041  F00A         	movff	(c:_suma_error+2),(c:___lmul@multiplicand+2)
  2653  000294  C042  F00B         	movff	(c:_suma_error+3),(c:___lmul@multiplicand+3)
  2654  000298  C043  F00C         	call	___lmul	;wreg free
  2655  00029C  ECBF  F003         	movf	(0+?___lmul),c,w
  2656  0002A0  5005               	addwf	(??_calculatePWM+0+0),c,w
  2657  0002A2  2423               	movwf	(??_calculatePWM+4+0)&0ffh,c
  2658  0002A4  6E27               	movf	(1+?___lmul),c,w
  2659  0002A6  5006               	addwfc	(??_calculatePWM+0+1),c,w
  2660  0002A8  2024               	movwf	1+(??_calculatePWM+4+0)&0ffh,c
  2661  0002AA  6E28               	
  2662                           	movf	(2+?___lmul),c,w
  2663  0002AC  5007               	addwfc	(??_calculatePWM+0+2),c,w
  2664  0002AE  2025               	movwf	2+(??_calculatePWM+4+0)&0ffh,c
  2665  0002B0  6E29               	
  2666                           	movf	(3+?___lmul),c,w
  2667  0002B2  5008               	addwfc	(??_calculatePWM+0+3),c,w
  2668  0002B4  2026               	movwf	3+(??_calculatePWM+4+0)&0ffh,c
  2669  0002B6  6E2A               	movff	0+((c:_PID)+08h),(c:___lmul@multiplier)
  2670  0002B8  C034  F005         	movff	1+((c:_PID)+08h),(c:___lmul@multiplier+1)
  2671  0002BC  C035  F006         	movff	2+((c:_PID)+08h),(c:___lmul@multiplier+2)
  2672  0002C0  C036  F007         	movff	3+((c:_PID)+08h),(c:___lmul@multiplier+3)
  2673  0002C4  C037  F008         	movff	(c:_velocity),(c:___lmul@multiplicand)
  2674  0002C8  C038  F009         	movff	(c:_velocity+1),(c:___lmul@multiplicand+1)
  2675  0002CC  C039  F00A         	movff	(c:_velocity+2),(c:___lmul@multiplicand+2)
  2676  0002D0  C03A  F00B         	movff	(c:_velocity+3),(c:___lmul@multiplicand+3)
  2677  0002D4  C03B  F00C         	call	___lmul	;wreg free
  2678  0002D8  ECBF  F003         	movf	(0+?___lmul),c,w
  2679  0002DC  5005               	addwf	(??_calculatePWM+4+0),c,w
  2680  0002DE  2427               	movwf	((c:_volt)),c
  2681  0002E0  6E3C               	movf	(1+?___lmul),c,w
  2682  0002E2  5006               	addwfc	(??_calculatePWM+4+1),c,w
  2683  0002E4  2028               	movwf	1+((c:_volt)),c
  2684  0002E6  6E3D               	
  2685                           	movf	(2+?___lmul),c,w
  2686  0002E8  5007               	addwfc	(??_calculatePWM+4+2),c,w
  2687  0002EA  2029               	movwf	2+((c:_volt)),c
  2688  0002EC  6E3E               	
  2689                           	movf	(3+?___lmul),c,w
  2690  0002EE  5008               	addwfc	(??_calculatePWM+4+3),c,w
  2691  0002F0  202A               	movwf	3+((c:_volt)),c
  2692  0002F2  6E3F               	line	186
  2693                           	
  2694                           l1513:
  2695  0002F4                     ;main.c: 186:     volt /= 100;
  2696                           	movff	(c:_volt),(c:___aldiv@dividend)
  2697  0002F4  C03C  F011         	movff	(c:_volt+1),(c:___aldiv@dividend+1)
  2698  0002F8  C03D  F012         	movff	(c:_volt+2),(c:___aldiv@dividend+2)
  2699  0002FC  C03E  F013         	movff	(c:_volt+3),(c:___aldiv@dividend+3)
  2700  000300  C03F  F014         	movlw	low(064h)
  2701  000304  0E64               	movwf	((c:___aldiv@divisor)),c
  2702  000306  6E15               	movlw	high(064h)
  2703  000308  0E00               	movwf	((c:___aldiv@divisor+1)),c
  2704  00030A  6E16               	movlw	low highword(064h)
  2705  00030C  0E00               	movwf	((c:___aldiv@divisor+2)),c
  2706  00030E  6E17               	movlw	high highword(064h)
  2707  000310  0E00               	movwf	((c:___aldiv@divisor+3)),c
  2708  000312  6E18               	call	___aldiv	;wreg free
  2709  000314  EC05  F002         	movff	0+?___aldiv,(c:_volt)
  2710  000318  C011  F03C         	movff	1+?___aldiv,(c:_volt+1)
  2711  00031C  C012  F03D         	movff	2+?___aldiv,(c:_volt+2)
  2712  000320  C013  F03E         	movff	3+?___aldiv,(c:_volt+3)
  2713  000324  C014  F03F         	
  2714                           	line	187
  2715                           	
  2716                           l1515:
  2717  000328                     ;main.c: 187:     error_ant = error;
  2718                           	movff	(c:_error),(c:_error_ant)
  2719  000328  C04A  F048         	movff	(c:_error+1),(c:_error_ant+1)
  2720  00032C  C04B  F049         	line	189
  2721                           	
  2722                           l1517:
  2723  000330                     ;main.c: 189:     if(volt < 0)
  2724                           	btfsc	((c:_volt+3)),c,7
  2725  000330  BE3F               	goto	u670
  2726  000332  EF9F  F001         	goto	u671
  2727  000336  EF9D  F001         
  2728                           u671:
  2729  00033A                     	goto	l180
  2730  00033A  EFB0  F001         u670:
  2731  00033E                     	line	191
  2732                           	
  2733                           l1519:
  2734  00033E                     ;main.c: 190:     {;main.c: 191:         GPREG.DIRCTRL = 0;
  2735                           	bcf	((c:_GPREG)),c,0
  2736  00033E  904F               	line	192
  2737                           	
  2738                           l1521:
  2739  000340                     ;main.c: 192:         volt = ~volt;
  2740                           	comf	((c:_volt)),c,w
  2741  000340  1C3C               
  2742                           	movwf	((c:_volt)),c
  2743  000342  6E3C               	comf	((c:_volt+1)),c,w
  2744  000344  1C3D               	movwf	1+((c:_volt)),c
  2745  000346  6E3D               	
  2746                           	comf	((c:_volt+2)),c,w
  2747  000348  1C3E               	movwf	2+((c:_volt)),c
  2748  00034A  6E3E               	
  2749                           	comf	((c:_volt+3)),c,w
  2750  00034C  1C3F               	movwf	3+((c:_volt)),c
  2751  00034E  6E3F               	
  2752                           	line	193
  2753                           ;main.c: 193:         volt++;
  2754                           	movlw	low(01h)
  2755  000350  0E01               	addwf	((c:_volt)),c
  2756  000352  263C               	movlw	0
  2757  000354  0E00               	addwfc	((c:_volt+1)),c
  2758  000356  223D               	addwfc	((c:_volt+2)),c
  2759  000358  223E               	addwfc	((c:_volt+3)),c
  2760  00035A  223F               	line	194
  2761                           ;main.c: 194:     } else {
  2762                           	goto	l1523
  2763  00035C  EFB3  F001         	
  2764                           l180:
  2765  000360                     	line	195
  2766                           ;main.c: 195:         GPREG.DIRCTRL = 1;
  2767                           	bsf	((c:_GPREG)),c,0
  2768  000360  804F               	goto	l1523
  2769  000362  EFB3  F001         	line	196
  2770                           ;main.c: 196:     }
  2771                           	
  2772                           l181:
  2773  000366                     	line	198
  2774                           	
  2775                           l1523:
  2776  000366                     ;main.c: 198:     if(volt > 6300)
  2777                           	btfsc	((c:_volt+3)),c,7
  2778  000366  BE3F               	goto	u681
  2779  000368  EFC2  F001         	movf	((c:_volt+3)),c,w
  2780  00036C  503F               	iorwf	((c:_volt+2)),c,w
  2781  00036E  103E               	bnz	u680
  2782  000370  E10B               	movlw	157
  2783  000372  0E9D               	subwf	 ((c:_volt)),c,w
  2784  000374  5C3C               	movlw	24
  2785  000376  0E18               	subwfb	((c:_volt+1)),c,w
  2786  000378  583D               	btfss	status,0
  2787  00037A  A0D8               	goto	u681
  2788  00037C  EFC2  F001         	goto	u680
  2789  000380  EFC4  F001         
  2790                           u681:
  2791  000384                     	goto	l1527
  2792  000384  EFCE  F001         u680:
  2793  000388                     	line	200
  2794                           	
  2795                           l1525:
  2796  000388                     ;main.c: 199:     {;main.c: 200:         volt = 6300;
  2797                           	movlw	low(0189Ch)
  2798  000388  0E9C               	movwf	((c:_volt)),c
  2799  00038A  6E3C               	movlw	high(0189Ch)
  2800  00038C  0E18               	movwf	((c:_volt+1)),c
  2801  00038E  6E3D               	movlw	low highword(0189Ch)
  2802  000390  0E00               	movwf	((c:_volt+2)),c
  2803  000392  6E3E               	movlw	high highword(0189Ch)
  2804  000394  0E00               	movwf	((c:_volt+3)),c
  2805  000396  6E3F               	goto	l1527
  2806  000398  EFCE  F001         	line	201
  2807                           ;main.c: 201:     }
  2808                           	
  2809                           l182:
  2810  00039C                     	line	203
  2811                           	
  2812                           l1527:
  2813  00039C                     ;main.c: 203:     volt = (volt*1022)/6300;
  2814                           	movff	(c:_volt),(c:___lmul@multiplier)
  2815  00039C  C03C  F005         	movff	(c:_volt+1),(c:___lmul@multiplier+1)
  2816  0003A0  C03D  F006         	movff	(c:_volt+2),(c:___lmul@multiplier+2)
  2817  0003A4  C03E  F007         	movff	(c:_volt+3),(c:___lmul@multiplier+3)
  2818  0003A8  C03F  F008         	movlw	low(03FEh)
  2819  0003AC  0EFE               	movwf	((c:___lmul@multiplicand)),c
  2820  0003AE  6E09               	movlw	high(03FEh)
  2821  0003B0  0E03               	movwf	((c:___lmul@multiplicand+1)),c
  2822  0003B2  6E0A               	movlw	low highword(03FEh)
  2823  0003B4  0E00               	movwf	((c:___lmul@multiplicand+2)),c
  2824  0003B6  6E0B               	movlw	high highword(03FEh)
  2825  0003B8  0E00               	movwf	((c:___lmul@multiplicand+3)),c
  2826  0003BA  6E0C               	call	___lmul	;wreg free
  2827  0003BC  ECBF  F003         	movff	0+?___lmul,(c:___aldiv@dividend)
  2828  0003C0  C005  F011         	movff	1+?___lmul,(c:___aldiv@dividend+1)
  2829  0003C4  C006  F012         	movff	2+?___lmul,(c:___aldiv@dividend+2)
  2830  0003C8  C007  F013         	movff	3+?___lmul,(c:___aldiv@dividend+3)
  2831  0003CC  C008  F014         	
  2832                           	movlw	low(0189Ch)
  2833  0003D0  0E9C               	movwf	((c:___aldiv@divisor)),c
  2834  0003D2  6E15               	movlw	high(0189Ch)
  2835  0003D4  0E18               	movwf	((c:___aldiv@divisor+1)),c
  2836  0003D6  6E16               	movlw	low highword(0189Ch)
  2837  0003D8  0E00               	movwf	((c:___aldiv@divisor+2)),c
  2838  0003DA  6E17               	movlw	high highword(0189Ch)
  2839  0003DC  0E00               	movwf	((c:___aldiv@divisor+3)),c
  2840  0003DE  6E18               	call	___aldiv	;wreg free
  2841  0003E0  EC05  F002         	movff	0+?___aldiv,(c:_volt)
  2842  0003E4  C011  F03C         	movff	1+?___aldiv,(c:_volt+1)
  2843  0003E8  C012  F03D         	movff	2+?___aldiv,(c:_volt+2)
  2844  0003EC  C013  F03E         	movff	3+?___aldiv,(c:_volt+3)
  2845  0003F0  C014  F03F         	
  2846                           	line	205
  2847                           	
  2848                           l1529:
  2849  0003F4                     ;main.c: 205:     return volt;
  2850                           	movff	(c:_volt),(c:?_calculatePWM)
  2851  0003F4  C03C  F01F         	movff	(c:_volt+1),(c:?_calculatePWM+1)
  2852  0003F8  C03D  F020         	movff	(c:_volt+2),(c:?_calculatePWM+2)
  2853  0003FC  C03E  F021         	movff	(c:_volt+3),(c:?_calculatePWM+3)
  2854  000400  C03F  F022         	goto	l183
  2855  000404  EF04  F002         	
  2856                           l1531:
  2857  000408                     	line	206
  2858                           	
  2859                           l183:
  2860  000408                     	return	;funcret
  2861  000408  0012               	opt stack 0
  2862                           GLOBAL	__end_of_calculatePWM
  2863                           	__end_of_calculatePWM:
  2864  00040A                     	signat	_calculatePWM,4220
  2865                           	global	___wmul
  2866                           
  2867 ;; *************** function ___wmul *****************
  2868 ;; Defined at:
  2869 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  multiplier      2    4[COMRAM] unsigned int 
  2872 ;;  multiplicand    2    6[COMRAM] unsigned int 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  product         2    8[COMRAM] unsigned int 
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  2    4[COMRAM] unsigned int 
  2877 ;; Registers used:
  2878 ;;		wreg, status,2, status,0, prodl, prodh
  2879 ;; Tracked objects:
  2880 ;;		On entry : 0/0
  2881 ;;		On exit  : 0/0
  2882 ;;		Unchanged: 0/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2884 ;;      Params:         4       0       0       0
  2885 ;;      Locals:         2       0       0       0
  2886 ;;      Temps:          0       0       0       0
  2887 ;;      Totals:         6       0       0       0
  2888 ;;Total ram usage:        6 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:    1
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_calculatePWM
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           psect	text13,class=CODE,space=0,reloc=2,group=1
  2898                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  2899                           	line	15
  2900                           global __ptext13
  2901                           __ptext13:
  2902  000826                     psect	text13
  2903                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  2904                           	line	15
  2905                           	global	__size_of___wmul
  2906                           	__size_of___wmul	equ	__end_of___wmul-___wmul
  2907  0000                     	
  2908                           ___wmul:
  2909  000826                     ;incstack = 0
  2910                           	opt	stack 28
  2911                           	line	37
  2912                           	
  2913                           l1365:
  2914  000826                     	movf	((c:___wmul@multiplier)),c,w
  2915  000826  5005               	mulwf	((c:___wmul@multiplicand)),c
  2916  000828  0207               	movff	prodl,(c:___wmul@product)
  2917  00082A  CFF3 F009          	movff	prodh,(c:___wmul@product+1)
  2918  00082E  CFF4 F00A          	line	38
  2919                           	movf	((c:___wmul@multiplier)),c,w
  2920  000832  5005               	mulwf	(0+((c:___wmul@multiplicand)+01h)),c
  2921  000834  0208               	movf	(prodl),c,w
  2922  000836  50F3               	addwf	((c:___wmul@product+1)),c
  2923  000838  260A               
  2924                           	line	39
  2925                           	movf	(0+((c:___wmul@multiplier)+01h)),c,w
  2926  00083A  5006               	mulwf	((c:___wmul@multiplicand)),c
  2927  00083C  0207               	movf	(prodl),c,w
  2928  00083E  50F3               	addwf	((c:___wmul@product+1)),c
  2929  000840  260A               
  2930                           	line	52
  2931                           	
  2932                           l1367:
  2933  000842                     	movff	(c:___wmul@product),(c:?___wmul)
  2934  000842  C009  F005         	movff	(c:___wmul@product+1),(c:?___wmul+1)
  2935  000846  C00A  F006         	goto	l218
  2936  00084A  EF27  F004         	
  2937                           l1369:
  2938  00084E                     	line	53
  2939                           	
  2940                           l218:
  2941  00084E                     	return	;funcret
  2942  00084E  0012               	opt stack 0
  2943                           GLOBAL	__end_of___wmul
  2944                           	__end_of___wmul:
  2945  000850                     	signat	___wmul,8314
  2946                           	global	___lmul
  2947                           
  2948 ;; *************** function ___lmul *****************
  2949 ;; Defined at:
  2950 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  multiplier      4    4[COMRAM] unsigned long 
  2953 ;;  multiplicand    4    8[COMRAM] unsigned long 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  product         4   12[COMRAM] unsigned long 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  4    4[COMRAM] unsigned long 
  2958 ;; Registers used:
  2959 ;;		wreg, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2965 ;;      Params:         8       0       0       0
  2966 ;;      Locals:         4       0       0       0
  2967 ;;      Temps:          0       0       0       0
  2968 ;;      Totals:        12       0       0       0
  2969 ;;Total ram usage:       12 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    1
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_calculatePWM
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           psect	text14,class=CODE,space=0,reloc=2,group=1
  2979                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  2980                           	line	15
  2981                           global __ptext14
  2982                           __ptext14:
  2983  00077E                     psect	text14
  2984                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  2985                           	line	15
  2986                           	global	__size_of___lmul
  2987                           	__size_of___lmul	equ	__end_of___lmul-___lmul
  2988  0000                     	
  2989                           ___lmul:
  2990  00077E                     ;incstack = 0
  2991                           	opt	stack 28
  2992                           	line	119
  2993                           	
  2994                           l1371:
  2995  00077E                     	movlw	low(0)
  2996  00077E  0E00               	movwf	((c:___lmul@product)),c
  2997  000780  6E0D               	movlw	high(0)
  2998  000782  0E00               	movwf	((c:___lmul@product+1)),c
  2999  000784  6E0E               	movlw	low highword(0)
  3000  000786  0E00               	movwf	((c:___lmul@product+2)),c
  3001  000788  6E0F               	movlw	high highword(0)
  3002  00078A  0E00               	movwf	((c:___lmul@product+3)),c
  3003  00078C  6E10               	goto	l1373
  3004  00078E  EFC9  F003         	line	120
  3005                           	
  3006                           l227:
  3007  000792                     	line	121
  3008                           	
  3009                           l1373:
  3010  000792                     	
  3011                           	btfss	((c:___lmul@multiplier)),c,(0)&7
  3012  000792  A005               	goto	u531
  3013  000794  EFCE  F003         	goto	u530
  3014  000798  EFD0  F003         u531:
  3015  00079C                     	goto	l1377
  3016  00079C  EFDA  F003         u530:
  3017  0007A0                     	line	122
  3018                           	
  3019                           l1375:
  3020  0007A0                     	movf	((c:___lmul@multiplicand)),c,w
  3021  0007A0  5009               	addwf	((c:___lmul@product)),c
  3022  0007A2  260D               	movf	((c:___lmul@multiplicand+1)),c,w
  3023  0007A4  500A               	addwfc	((c:___lmul@product+1)),c
  3024  0007A6  220E               	movf	((c:___lmul@multiplicand+2)),c,w
  3025  0007A8  500B               	addwfc	((c:___lmul@product+2)),c
  3026  0007AA  220F               	movf	((c:___lmul@multiplicand+3)),c,w
  3027  0007AC  500C               	addwfc	((c:___lmul@product+3)),c
  3028  0007AE  2210               	goto	l1377
  3029  0007B0  EFDA  F003         	
  3030                           l228:
  3031  0007B4                     	line	123
  3032                           	
  3033                           l1377:
  3034  0007B4                     	bcf	status,0
  3035  0007B4  90D8               	rlcf	((c:___lmul@multiplicand)),c
  3036  0007B6  3609               	rlcf	((c:___lmul@multiplicand+1)),c
  3037  0007B8  360A               	rlcf	((c:___lmul@multiplicand+2)),c
  3038  0007BA  360B               	rlcf	((c:___lmul@multiplicand+3)),c
  3039  0007BC  360C               	line	124
  3040                           	
  3041                           l1379:
  3042  0007BE                     	bcf	status,0
  3043  0007BE  90D8               	rrcf	((c:___lmul@multiplier+3)),c
  3044  0007C0  3208               	rrcf	((c:___lmul@multiplier+2)),c
  3045  0007C2  3207               	rrcf	((c:___lmul@multiplier+1)),c
  3046  0007C4  3206               	rrcf	((c:___lmul@multiplier)),c
  3047  0007C6  3205               	line	125
  3048                           	movf	((c:___lmul@multiplier)),c,w
  3049  0007C8  5005               iorwf	((c:___lmul@multiplier+1)),c,w
  3050  0007CA  1006               iorwf	((c:___lmul@multiplier+2)),c,w
  3051  0007CC  1007               iorwf	((c:___lmul@multiplier+3)),c,w
  3052  0007CE  1008               	btfss	status,2
  3053  0007D0  A4D8               	goto	u541
  3054  0007D2  EFED  F003         	goto	u540
  3055  0007D6  EFEF  F003         
  3056                           u541:
  3057  0007DA                     	goto	l1373
  3058  0007DA  EFC9  F003         u540:
  3059  0007DE                     	
  3060                           l229:
  3061  0007DE                     	line	128
  3062                           	movff	(c:___lmul@product),(c:?___lmul)
  3063  0007DE  C00D  F005         	movff	(c:___lmul@product+1),(c:?___lmul+1)
  3064  0007E2  C00E  F006         	movff	(c:___lmul@product+2),(c:?___lmul+2)
  3065  0007E6  C00F  F007         	movff	(c:___lmul@product+3),(c:?___lmul+3)
  3066  0007EA  C010  F008         	line	129
  3067                           	
  3068                           l230:
  3069  0007EE                     	return	;funcret
  3070  0007EE  0012               	opt stack 0
  3071                           GLOBAL	__end_of___lmul
  3072                           	__end_of___lmul:
  3073  0007F0                     	signat	___lmul,8316
  3074                           	global	___aldiv
  3075                           
  3076 ;; *************** function ___aldiv *****************
  3077 ;; Defined at:
  3078 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  dividend        4   16[COMRAM] long 
  3081 ;;  divisor         4   20[COMRAM] long 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  quotient        4   26[COMRAM] long 
  3084 ;;  sign            1   25[COMRAM] unsigned char 
  3085 ;;  counter         1   24[COMRAM] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  4   16[COMRAM] long 
  3088 ;; Registers used:
  3089 ;;		wreg, status,2, status,0
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3095 ;;      Params:         8       0       0       0
  3096 ;;      Locals:         6       0       0       0
  3097 ;;      Temps:          0       0       0       0
  3098 ;;      Totals:        14       0       0       0
  3099 ;;Total ram usage:       14 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    1
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_calculatePWM
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           psect	text15,class=CODE,space=0,reloc=2,group=1
  3109                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  3110                           	line	7
  3111                           global __ptext15
  3112                           __ptext15:
  3113  00040A                     psect	text15
  3114                           	file	"C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
  3115                           	line	7
  3116                           	global	__size_of___aldiv
  3117                           	__size_of___aldiv	equ	__end_of___aldiv-___aldiv
  3118  0000                     	
  3119                           ___aldiv:
  3120  00040A                     ;incstack = 0
  3121                           	opt	stack 28
  3122                           	line	13
  3123                           	
  3124                           l1381:
  3125  00040A                     	movlw	low(0)
  3126  00040A  0E00               	movwf	((c:___aldiv@sign)),c
  3127  00040C  6E1A               	line	14
  3128                           	
  3129                           l1383:
  3130  00040E                     	btfsc	((c:___aldiv@divisor+3)),c,7
  3131  00040E  BE18               	goto	u550
  3132  000410  EF0E  F002         	goto	u551
  3133  000414  EF0C  F002         
  3134                           u551:
  3135  000418                     	goto	l1389
  3136  000418  EF1A  F002         u550:
  3137  00041C                     	line	15
  3138                           	
  3139                           l1385:
  3140  00041C                     	comf	((c:___aldiv@divisor+3)),c
  3141  00041C  1E18               	comf	((c:___aldiv@divisor+2)),c
  3142  00041E  1E17               	comf	((c:___aldiv@divisor+1)),c
  3143  000420  1E16               	negf	((c:___aldiv@divisor)),c
  3144  000422  6C15               	movlw	0
  3145  000424  0E00               	addwfc	((c:___aldiv@divisor+1)),c
  3146  000426  2216               	addwfc	((c:___aldiv@divisor+2)),c
  3147  000428  2217               	addwfc	((c:___aldiv@divisor+3)),c
  3148  00042A  2218               	line	16
  3149                           	
  3150                           l1387:
  3151  00042C                     	movlw	low(01h)
  3152  00042C  0E01               	movwf	((c:___aldiv@sign)),c
  3153  00042E  6E1A               	goto	l1389
  3154  000430  EF1A  F002         	line	17
  3155                           	
  3156                           l287:
  3157  000434                     	line	18
  3158                           	
  3159                           l1389:
  3160  000434                     	btfsc	((c:___aldiv@dividend+3)),c,7
  3161  000434  BE14               	goto	u560
  3162  000436  EF21  F002         	goto	u561
  3163  00043A  EF1F  F002         
  3164                           u561:
  3165  00043E                     	goto	l1395
  3166  00043E  EF2D  F002         u560:
  3167  000442                     	line	19
  3168                           	
  3169                           l1391:
  3170  000442                     	comf	((c:___aldiv@dividend+3)),c
  3171  000442  1E14               	comf	((c:___aldiv@dividend+2)),c
  3172  000444  1E13               	comf	((c:___aldiv@dividend+1)),c
  3173  000446  1E12               	negf	((c:___aldiv@dividend)),c
  3174  000448  6C11               	movlw	0
  3175  00044A  0E00               	addwfc	((c:___aldiv@dividend+1)),c
  3176  00044C  2212               	addwfc	((c:___aldiv@dividend+2)),c
  3177  00044E  2213               	addwfc	((c:___aldiv@dividend+3)),c
  3178  000450  2214               	line	20
  3179                           	
  3180                           l1393:
  3181  000452                     	movlw	(01h)&0ffh
  3182  000452  0E01               	xorwf	((c:___aldiv@sign)),c
  3183  000454  1A1A               	goto	l1395
  3184  000456  EF2D  F002         	line	21
  3185                           	
  3186                           l288:
  3187  00045A                     	line	22
  3188                           	
  3189                           l1395:
  3190  00045A                     	movlw	low(0)
  3191  00045A  0E00               	movwf	((c:___aldiv@quotient)),c
  3192  00045C  6E1B               	movlw	high(0)
  3193  00045E  0E00               	movwf	((c:___aldiv@quotient+1)),c
  3194  000460  6E1C               	movlw	low highword(0)
  3195  000462  0E00               	movwf	((c:___aldiv@quotient+2)),c
  3196  000464  6E1D               	movlw	high highword(0)
  3197  000466  0E00               	movwf	((c:___aldiv@quotient+3)),c
  3198  000468  6E1E               	line	23
  3199                           	
  3200                           l1397:
  3201  00046A                     	movf	((c:___aldiv@divisor)),c,w
  3202  00046A  5015               iorwf	((c:___aldiv@divisor+1)),c,w
  3203  00046C  1016               iorwf	((c:___aldiv@divisor+2)),c,w
  3204  00046E  1017               iorwf	((c:___aldiv@divisor+3)),c,w
  3205  000470  1018               	btfsc	status,2
  3206  000472  B4D8               	goto	u571
  3207  000474  EF3E  F002         	goto	u570
  3208  000478  EF40  F002         
  3209                           u571:
  3210  00047C                     	goto	l1417
  3211  00047C  EF82  F002         u570:
  3212  000480                     	line	24
  3213                           	
  3214                           l1399:
  3215  000480                     	movlw	low(01h)
  3216  000480  0E01               	movwf	((c:___aldiv@counter)),c
  3217  000482  6E19               	line	25
  3218                           	goto	l1403
  3219  000484  EF4C  F002         	
  3220                           l291:
  3221  000488                     	line	26
  3222                           	
  3223                           l1401:
  3224  000488                     	bcf	status,0
  3225  000488  90D8               	rlcf	((c:___aldiv@divisor)),c
  3226  00048A  3615               	rlcf	((c:___aldiv@divisor+1)),c
  3227  00048C  3616               	rlcf	((c:___aldiv@divisor+2)),c
  3228  00048E  3617               	rlcf	((c:___aldiv@divisor+3)),c
  3229  000490  3618               	line	27
  3230                           	incf	((c:___aldiv@counter)),c
  3231  000492  2A19               	goto	l1403
  3232  000494  EF4C  F002         	line	28
  3233                           	
  3234                           l290:
  3235  000498                     	line	25
  3236                           	
  3237                           l1403:
  3238  000498                     	
  3239                           	btfss	((c:___aldiv@divisor+3)),c,(31)&7
  3240  000498  AE18               	goto	u581
  3241  00049A  EF51  F002         	goto	u580
  3242  00049E  EF53  F002         u581:
  3243  0004A2                     	goto	l1401
  3244  0004A2  EF44  F002         u580:
  3245  0004A6                     	goto	l1405
  3246  0004A6  EF57  F002         	
  3247                           l292:
  3248  0004AA                     	goto	l1405
  3249  0004AA  EF57  F002         	line	29
  3250                           	
  3251                           l293:
  3252  0004AE                     	line	30
  3253                           	
  3254                           l1405:
  3255  0004AE                     	bcf	status,0
  3256  0004AE  90D8               	rlcf	((c:___aldiv@quotient)),c
  3257  0004B0  361B               	rlcf	((c:___aldiv@quotient+1)),c
  3258  0004B2  361C               	rlcf	((c:___aldiv@quotient+2)),c
  3259  0004B4  361D               	rlcf	((c:___aldiv@quotient+3)),c
  3260  0004B6  361E               	line	31
  3261                           	
  3262                           l1407:
  3263  0004B8                     		movf	((c:___aldiv@divisor)),c,w
  3264  0004B8  5015               	subwf	((c:___aldiv@dividend)),c,w
  3265  0004BA  5C11               	movf	((c:___aldiv@divisor+1)),c,w
  3266  0004BC  5016               	subwfb	((c:___aldiv@dividend+1)),c,w
  3267  0004BE  5812               	movf	((c:___aldiv@divisor+2)),c,w
  3268  0004C0  5017               	subwfb	((c:___aldiv@dividend+2)),c,w
  3269  0004C2  5813               	movf	((c:___aldiv@divisor+3)),c,w
  3270  0004C4  5018               	subwfb	((c:___aldiv@dividend+3)),c,w
  3271  0004C6  5814               	btfss	status,0
  3272  0004C8  A0D8               	goto	u591
  3273  0004CA  EF69  F002         	goto	u590
  3274  0004CE  EF6B  F002         
  3275                           u591:
  3276  0004D2                     	goto	l1413
  3277  0004D2  EF76  F002         u590:
  3278  0004D6                     	line	32
  3279                           	
  3280                           l1409:
  3281  0004D6                     	movf	((c:___aldiv@divisor)),c,w
  3282  0004D6  5015               	subwf	((c:___aldiv@dividend)),c
  3283  0004D8  5E11               	movf	((c:___aldiv@divisor+1)),c,w
  3284  0004DA  5016               	subwfb	((c:___aldiv@dividend+1)),c
  3285  0004DC  5A12               	movf	((c:___aldiv@divisor+2)),c,w
  3286  0004DE  5017               	subwfb	((c:___aldiv@dividend+2)),c
  3287  0004E0  5A13               	movf	((c:___aldiv@divisor+3)),c,w
  3288  0004E2  5018               	subwfb	((c:___aldiv@dividend+3)),c
  3289  0004E4  5A14               	line	33
  3290                           	
  3291                           l1411:
  3292  0004E6                     	bsf	(0+(0/8)+(c:___aldiv@quotient)),c,(0)&7
  3293  0004E6  801B               	goto	l1413
  3294  0004E8  EF76  F002         	line	34
  3295                           	
  3296                           l294:
  3297  0004EC                     	line	35
  3298                           	
  3299                           l1413:
  3300  0004EC                     	bcf	status,0
  3301  0004EC  90D8               	rrcf	((c:___aldiv@divisor+3)),c
  3302  0004EE  3218               	rrcf	((c:___aldiv@divisor+2)),c
  3303  0004F0  3217               	rrcf	((c:___aldiv@divisor+1)),c
  3304  0004F2  3216               	rrcf	((c:___aldiv@divisor)),c
  3305  0004F4  3215               	line	36
  3306                           	
  3307                           l1415:
  3308  0004F6                     	decfsz	((c:___aldiv@counter)),c
  3309  0004F6  2E19               	
  3310                           	goto	l1405
  3311  0004F8  EF57  F002         	goto	l1417
  3312  0004FC  EF82  F002         	
  3313                           l295:
  3314  000500                     	goto	l1417
  3315  000500  EF82  F002         	line	37
  3316                           	
  3317                           l289:
  3318  000504                     	line	38
  3319                           	
  3320                           l1417:
  3321  000504                     	movf	((c:___aldiv@sign)),c,w
  3322  000504  501A               	btfsc	status,2
  3323  000506  B4D8               	goto	u601
  3324  000508  EF88  F002         	goto	u600
  3325  00050C  EF8A  F002         u601:
  3326  000510                     	goto	l1421
  3327  000510  EF94  F002         u600:
  3328  000514                     	line	39
  3329                           	
  3330                           l1419:
  3331  000514                     	comf	((c:___aldiv@quotient+3)),c
  3332  000514  1E1E               	comf	((c:___aldiv@quotient+2)),c
  3333  000516  1E1D               	comf	((c:___aldiv@quotient+1)),c
  3334  000518  1E1C               	negf	((c:___aldiv@quotient)),c
  3335  00051A  6C1B               	movlw	0
  3336  00051C  0E00               	addwfc	((c:___aldiv@quotient+1)),c
  3337  00051E  221C               	addwfc	((c:___aldiv@quotient+2)),c
  3338  000520  221D               	addwfc	((c:___aldiv@quotient+3)),c
  3339  000522  221E               	goto	l1421
  3340  000524  EF94  F002         	
  3341                           l296:
  3342  000528                     	line	40
  3343                           	
  3344                           l1421:
  3345  000528                     	movff	(c:___aldiv@quotient),(c:?___aldiv)
  3346  000528  C01B  F011         	movff	(c:___aldiv@quotient+1),(c:?___aldiv+1)
  3347  00052C  C01C  F012         	movff	(c:___aldiv@quotient+2),(c:?___aldiv+2)
  3348  000530  C01D  F013         	movff	(c:___aldiv@quotient+3),(c:?___aldiv+3)
  3349  000534  C01E  F014         	goto	l297
  3350  000538  EF9E  F002         	
  3351                           l1423:
  3352  00053C                     	line	41
  3353                           	
  3354                           l297:
  3355  00053C                     	return	;funcret
  3356  00053C  0012               	opt stack 0
  3357                           GLOBAL	__end_of___aldiv
  3358                           	__end_of___aldiv:
  3359  00053E                     	signat	___aldiv,8316
  3360                           	global	_ISR_high
  3361                           
  3362 ;; *************** function _ISR_high *****************
  3363 ;; Defined at:
  3364 ;;		line 69 in file "main.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  1    wreg      void 
  3371 ;; Registers used:
  3372 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3378 ;;      Params:         0       0       0       0
  3379 ;;      Locals:         0       0       0       0
  3380 ;;      Temps:          4       0       0       0
  3381 ;;      Totals:         4       0       0       0
  3382 ;;Total ram usage:        4 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		Interrupt level 2
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           psect	intcode,class=CODE,space=0,reloc=2
  3391                           global __pintcode
  3392                           __pintcode:
  3393  000008                     psect	intcode
  3394                           	file	"main.c"
  3395                           	line	69
  3396                           	global	__size_of_ISR_high
  3397                           	__size_of_ISR_high	equ	__end_of_ISR_high-_ISR_high
  3398  0000                     	
  3399                           _ISR_high:
  3400  000008                     ;incstack = 0
  3401                           	opt	stack 28
  3402                           	bsf int$flags,1,c ;set compiler interrupt flag (level 2)
  3403  000008  825B               	movff	fsr2l+0,??_ISR_high+2
  3404  00000A  CFD9 F003          	movff	fsr2h+0,??_ISR_high+3
  3405  00000E  CFDA F004          	line	72
  3406                           	
  3407                           i2l1081:
  3408  000012                     ;main.c: 72:      if(SSPIE == 1 && SSPIF == 1)
  3409                           	btfss	c:(31979/8),(31979)&7	;volatile
  3410  000012  A69D               	goto	i2u18_41
  3411  000014  EF0E  F000         	goto	i2u18_40
  3412  000018  EF10  F000         i2u18_41:
  3413  00001C                     	goto	i2l155
  3414  00001C  EF55  F000         i2u18_40:
  3415  000020                     	
  3416                           i2l1083:
  3417  000020                     	btfss	c:(31987/8),(31987)&7	;volatile
  3418  000020  A69E               	goto	i2u19_41
  3419  000022  EF15  F000         	goto	i2u19_40
  3420  000026  EF17  F000         i2u19_41:
  3421  00002A                     	goto	i2l155
  3422  00002A  EF55  F000         i2u19_40:
  3423  00002E                     	line	75
  3424                           	
  3425                           i2l1085:
  3426  00002E                     ;main.c: 73:     {;main.c: 75:         if(SSPOV == 1 || WCOL == 1)
  3427                           	btfsc	c:(32310/8),(32310)&7	;volatile
  3428  00002E  BCC6               	goto	i2u20_41
  3429  000030  EF1C  F000         	goto	i2u20_40
  3430  000034  EF1E  F000         i2u20_41:
  3431  000038                     	goto	i2l158
  3432  000038  EF25  F000         i2u20_40:
  3433  00003C                     	
  3434                           i2l1087:
  3435  00003C                     	btfss	c:(32311/8),(32311)&7	;volatile
  3436  00003C  AEC6               	goto	i2u21_41
  3437  00003E  EF23  F000         	goto	i2u21_40
  3438  000042  EF25  F000         i2u21_41:
  3439  000046                     	goto	i2l1089
  3440  000046  EF2C  F000         i2u21_40:
  3441  00004A                     	
  3442                           i2l158:
  3443  00004A                     	line	77
  3444                           ;main.c: 76:         {;main.c: 77:             i2cData = SSPBUF;
  3445                           	movff	(c:4041),(c:_i2cData)	;volatile
  3446  00004A  CFC9 F04C          	line	78
  3447                           ;main.c: 78:             SSPOV = 0;
  3448                           	bcf	c:(32310/8),(32310)&7	;volatile
  3449  00004E  9CC6               	line	79
  3450                           ;main.c: 79:             WCOL = 0;
  3451                           	bcf	c:(32311/8),(32311)&7	;volatile
  3452  000050  9EC6               	line	80
  3453                           ;main.c: 80:             CKP = 1;
  3454                           	bsf	c:(32308/8),(32308)&7	;volatile
  3455  000052  88C6               	goto	i2l1089
  3456  000054  EF2C  F000         	line	81
  3457                           ;main.c: 81:         }
  3458                           	
  3459                           i2l156:
  3460  000058                     	line	83
  3461                           	
  3462                           i2l1089:
  3463  000058                     ;main.c: 83:         if(SSPBUF == SSPADD)
  3464                           	movf	((c:4040)),c,w	;volatile
  3465  000058  50C8               xorwf	((c:4041)),c,w	;volatile
  3466  00005A  18C9               	btfss	status,2
  3467  00005C  A4D8               	goto	i2u22_41
  3468  00005E  EF33  F000         	goto	i2u22_40
  3469  000062  EF35  F000         
  3470                           i2u22_41:
  3471  000066                     	goto	i2l159
  3472  000066  EF38  F000         i2u22_40:
  3473  00006A                     	line	86
  3474                           	
  3475                           i2l1091:
  3476  00006A                     ;main.c: 84:         {;main.c: 86:            GPREG.I2CADD = 1;
  3477                           	bsf	((c:_GPREG)),c,3
  3478  00006A  864F               	line	87
  3479                           ;main.c: 87:            BF = 0;
  3480                           	bcf	c:(32312/8),(32312)&7	;volatile
  3481  00006C  90C7               	line	88
  3482                           ;main.c: 88:            CKP = 1;
  3483                           	bsf	c:(32308/8),(32308)&7	;volatile
  3484  00006E  88C6               	line	89
  3485                           ;main.c: 89:         }
  3486                           	
  3487                           i2l159:
  3488  000070                     	line	91
  3489                           ;main.c: 91:         if(GPREG.I2CADD == 1 && 0 != SSPBUF && SSPBUF != SSPADD)
  3490                           	btfss	((c:_GPREG)),c,3
  3491  000070  A64F               	goto	i2u23_41
  3492  000072  EF3D  F000         	goto	i2u23_40
  3493  000076  EF3F  F000         i2u23_41:
  3494  00007A                     	goto	i2l160
  3495  00007A  EF54  F000         i2u23_40:
  3496  00007E                     	
  3497                           i2l1093:
  3498  00007E                     	movf	((c:4041)),c,w	;volatile
  3499  00007E  50C9               	btfsc	status,2
  3500  000080  B4D8               	goto	i2u24_41
  3501  000082  EF45  F000         	goto	i2u24_40
  3502  000086  EF47  F000         i2u24_41:
  3503  00008A                     	goto	i2l160
  3504  00008A  EF54  F000         i2u24_40:
  3505  00008E                     	
  3506                           i2l1095:
  3507  00008E                     	movf	((c:4040)),c,w	;volatile
  3508  00008E  50C8               xorwf	((c:4041)),c,w	;volatile
  3509  000090  18C9               	btfsc	status,2
  3510  000092  B4D8               	goto	i2u25_41
  3511  000094  EF4E  F000         	goto	i2u25_40
  3512  000098  EF50  F000         
  3513                           i2u25_41:
  3514  00009C                     	goto	i2l160
  3515  00009C  EF54  F000         i2u25_40:
  3516  0000A0                     	line	93
  3517                           	
  3518                           i2l1097:
  3519  0000A0                     ;main.c: 92:         {;main.c: 93:             i2cData = SSPBUF;
  3520                           	movff	(c:4041),(c:_i2cData)	;volatile
  3521  0000A0  CFC9 F04C          	line	94
  3522                           ;main.c: 94:             CKP = 1;
  3523                           	bsf	c:(32308/8),(32308)&7	;volatile
  3524  0000A4  88C6               	line	95
  3525                           ;main.c: 95:             GPREG.I2CADD = 0;
  3526                           	bcf	((c:_GPREG)),c,3
  3527  0000A6  964F               	line	96
  3528                           ;main.c: 96:         }
  3529                           	
  3530                           i2l160:
  3531  0000A8                     	line	98
  3532                           ;main.c: 98:         SSPIF = 0;
  3533                           	bcf	c:(31987/8),(31987)&7	;volatile
  3534  0000A8  969E               	line	99
  3535                           ;main.c: 99: }
  3536                           	
  3537                           i2l155:
  3538  0000AA                     	line	101
  3539                           ;main.c: 101:     if(1 == TMR1IE && 1 == TMR1IF)
  3540                           	btfss	c:(31976/8),(31976)&7	;volatile
  3541  0000AA  A09D               	goto	i2u26_41
  3542  0000AC  EF5A  F000         	goto	i2u26_40
  3543  0000B0  EF5C  F000         i2u26_41:
  3544  0000B4                     	goto	i2l1105
  3545  0000B4  EF6C  F000         i2u26_40:
  3546  0000B8                     	
  3547                           i2l1099:
  3548  0000B8                     	btfss	c:(31984/8),(31984)&7	;volatile
  3549  0000B8  A09E               	goto	i2u27_41
  3550  0000BA  EF61  F000         	goto	i2u27_40
  3551  0000BE  EF63  F000         i2u27_41:
  3552  0000C2                     	goto	i2l1105
  3553  0000C2  EF6C  F000         i2u27_40:
  3554  0000C6                     	line	103
  3555                           	
  3556                           i2l1101:
  3557  0000C6                     ;main.c: 102:     {;main.c: 103:         GPREG.STCTRL = 1;
  3558                           	bsf	((c:_GPREG)),c,1
  3559  0000C6  824F               	line	104
  3560                           ;main.c: 104:         TMR1IF = 0;
  3561                           	bcf	c:(31984/8),(31984)&7	;volatile
  3562  0000C8  909E               	line	105
  3563                           ;main.c: 105:         TMR1ON = 0;
  3564                           	bcf	c:(32360/8),(32360)&7	;volatile
  3565  0000CA  90CD               	line	106
  3566                           	
  3567                           i2l1103:
  3568  0000CC                     ;main.c: 106:         TMR1 = 65485;
  3569                           	movlw	high(0FFCDh)
  3570  0000CC  0EFF               	movwf	((c:4046+1)),c	;volatile
  3571  0000CE  6ECF               	movlw	low(0FFCDh)
  3572  0000D0  0ECD               	movwf	((c:4046)),c	;volatile
  3573  0000D2  6ECE               	goto	i2l1105
  3574  0000D4  EF6C  F000         	line	108
  3575                           ;main.c: 108:     }
  3576                           	
  3577                           i2l161:
  3578  0000D8                     	line	110
  3579                           	
  3580                           i2l1105:
  3581  0000D8                     ;main.c: 110:     if((1 == TXIE) && (1 == TXIF))
  3582                           	btfss	c:(31980/8),(31980)&7	;volatile
  3583  0000D8  A89D               	goto	i2u28_41
  3584  0000DA  EF71  F000         	goto	i2u28_40
  3585  0000DE  EF73  F000         i2u28_41:
  3586  0000E2                     	goto	i2l166
  3587  0000E2  EFA9  F000         i2u28_40:
  3588  0000E6                     	
  3589                           i2l1107:
  3590  0000E6                     	btfss	c:(31988/8),(31988)&7	;volatile
  3591  0000E6  A89E               	goto	i2u29_41
  3592  0000E8  EF78  F000         	goto	i2u29_40
  3593  0000EC  EF7A  F000         i2u29_41:
  3594  0000F0                     	goto	i2l166
  3595  0000F0  EFA9  F000         i2u29_40:
  3596  0000F4                     	line	112
  3597                           	
  3598                           i2l1109:
  3599  0000F4                     ;main.c: 111:     {;main.c: 112:         if(4 < cursor)
  3600                           		movf	((c:_cursor)),c,w
  3601  0000F4  504D               	xorlw	80h
  3602  0000F6  0A80               	addlw	-(80h^05h)
  3603  0000F8  0F7B               	btfss	status,0
  3604  0000FA  A0D8               	goto	i2u30_41
  3605  0000FC  EF82  F000         	goto	i2u30_40
  3606  000100  EF84  F000         
  3607                           i2u30_41:
  3608  000104                     	goto	i2l1113
  3609  000104  EF88  F000         i2u30_40:
  3610  000108                     	line	114
  3611                           	
  3612                           i2l1111:
  3613  000108                     ;main.c: 113:         {;main.c: 114:             TXREG = 0x2C;
  3614                           	movlw	low(02Ch)
  3615  000108  0E2C               	movwf	((c:4013)),c	;volatile
  3616  00010A  6EAD               	line	115
  3617                           ;main.c: 115:         } else {
  3618                           	goto	i2l1115
  3619  00010C  EF97  F000         	
  3620                           i2l163:
  3621  000110                     	line	116
  3622                           	
  3623                           i2l1113:
  3624  000110                     ;main.c: 116:             TXREG = *(string_pos + cursor);
  3625                           	movff	(c:_cursor),??_ISR_high+0+0
  3626  000110  C04D  F001         	clrf	(??_ISR_high+0+0+1)&0ffh,c
  3627  000114  6A02               	btfsc	(??_ISR_high+0+0)&0ffh,c,7
  3628  000116  BE01               	decf	(??_ISR_high+0+0+1)&0ffh,c
  3629  000118  0602               	movf	(??_ISR_high+0+0),c,w
  3630  00011A  5001               	addwf	((c:_string_pos)),c,w
  3631  00011C  2444               	movwf	c:fsr2l
  3632  00011E  6ED9               	movf	(??_ISR_high+0+1),c,w
  3633  000120  5002               	addwfc	((c:_string_pos+1)),c,w
  3634  000122  2045               	movwf	1+c:fsr2l
  3635  000124  6EDA               	movf	indf2,w
  3636  000126  50DF               	movwf	((c:4013)),c	;volatile
  3637  000128  6EAD               	goto	i2l1115
  3638  00012A  EF97  F000         	line	117
  3639                           ;main.c: 117:         }
  3640                           	
  3641                           i2l164:
  3642  00012E                     	line	118
  3643                           	
  3644                           i2l1115:
  3645  00012E                     ;main.c: 118:         cursor++;
  3646                           	incf	((c:_cursor)),c
  3647  00012E  2A4D               	line	119
  3648                           	
  3649                           i2l1117:
  3650  000130                     ;main.c: 119:         if(5 < cursor)
  3651                           		movf	((c:_cursor)),c,w
  3652  000130  504D               	xorlw	80h
  3653  000132  0A80               	addlw	-(80h^06h)
  3654  000134  0F7A               	btfss	status,0
  3655  000136  A0D8               	goto	i2u31_41
  3656  000138  EFA0  F000         	goto	i2u31_40
  3657  00013C  EFA2  F000         
  3658                           i2u31_41:
  3659  000140                     	goto	i2l166
  3660  000140  EFA9  F000         i2u31_40:
  3661  000144                     	line	121
  3662                           	
  3663                           i2l1119:
  3664  000144                     ;main.c: 120:         {;main.c: 121:             TXIE = 0;
  3665                           	bcf	c:(31980/8),(31980)&7	;volatile
  3666  000144  989D               	line	122
  3667                           	
  3668                           i2l1121:
  3669  000146                     ;main.c: 122:             cursor = 0;
  3670                           	movlw	low(0)
  3671  000146  0E00               	movwf	((c:_cursor)),c
  3672  000148  6E4D               	goto	i2l166
  3673  00014A  EFA9  F000         	line	123
  3674                           ;main.c: 123:         }
  3675                           	
  3676                           i2l165:
  3677  00014E                     	goto	i2l166
  3678  00014E  EFA9  F000         	line	124
  3679                           ;main.c: 124:     }
  3680                           	
  3681                           i2l162:
  3682  000152                     	line	126
  3683                           	
  3684                           i2l166:
  3685  000152                     	movff	??_ISR_high+3,fsr2h+0
  3686  000152  C004  FFDA         	movff	??_ISR_high+2,fsr2l+0
  3687  000156  C003  FFD9         	bcf int$flags,1,c ;clear compiler interrupt flag (level 2)
  3688  00015A  925B               	retfie f
  3689  00015C  0011               	opt stack 0
  3690                           GLOBAL	__end_of_ISR_high
  3691                           	__end_of_ISR_high:
  3692  00015E                     	signat	_ISR_high,89
  3693                           	GLOBAL	__activetblptr
  3694                           __activetblptr	EQU	0
  3695  0000                     	psect	intsave_regs,class=BIGRAM,space=1,noexec
  3696                           	PSECT	rparam,class=COMRAM,space=1,noexec
  3697                           	GLOBAL	__Lrparam
  3698                           	FNCONF	rparam,??,?
  3699                           	GLOBAL	___rparam_used
  3700                           	___rparam_used EQU 1
  3701  0000                     	GLOBAL	___param_bank
  3702                           	___param_bank EQU 0
  3703  0000                     GLOBAL	__Lparam, __Hparam
  3704                           GLOBAL	__Lrparam, __Hrparam
  3705                           __Lparam	EQU	__Lrparam
  3706  0000                     __Hparam	EQU	__Hrparam
  3707  0000                            psect   temp,common,ovrld,class=COMRAM,space=1
  3708                           	global	btemp
  3709                           btemp:
  3710  00005B                     	ds	1
  3711  00005B                     	global	int$flags
  3712                           	int$flags	set btemp
  3713  0000                     	global	wtemp8
  3714                           	wtemp8 set btemp+1
  3715  0000                     	global	ttemp5
  3716                           	ttemp5 set btemp+1
  3717  0000                     	global	ttemp6
  3718                           	ttemp6 set btemp+4
  3719  0000                     	global	ttemp7
  3720                           	ttemp7 set btemp+8
  3721  0000                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         41
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     43      90
    BANK0           160      3       3
    BANK1           256      0       0
    BANK2           244      0       0

Pointer List with Targets:

    sp__int2char	PTR unsigned char  size(2) Largest target is 5
		 -> int2char@string(COMRAM[5]), 

    string_pos	PTR unsigned char  size(2) Largest target is 5
		 -> NULL(NULL[0]), int2char@string(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_write_PWM
    _int2char->___lwdiv
    _init_PWM->_write_PWM
    _write_PWM->_calculatePWM
    _calculatePWM->___aldiv
    ___aldiv->___lmul

Critical Paths under _ISR_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_write_PWM
    _init_PWM->_write_PWM

Critical Paths under _ISR_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_high in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4156
                                              2 BANK0      1     1      0
                       _calculatePWM
                           _init_I2C
                           _init_ISR
                           _init_PWM
                           _init_QEI
                          _init_TMR1
                          _init_UART
                         _init_VNHIO
                           _int2char
                          _write_PWM
 ---------------------------------------------------------------------------------
 (1) _int2char                                             5     3      2    1090
                                             11 COMRAM     5     3      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     412
                                              4 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     421
                                              4 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _init_VNHIO                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TMR1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_QEI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_PWM                                             0     0      0     245
                          _write_PWM
 ---------------------------------------------------------------------------------
 (1) _write_PWM                                            3     1      2     245
                                             42 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                       _calculatePWM (ARG)
 ---------------------------------------------------------------------------------
 (1) _init_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_I2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calculatePWM                                        13     9      4    2573
                                             30 COMRAM    12     8      4
                            ___aldiv
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     412
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1176
                                              4 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     985
                                             16 COMRAM    14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_high                                             4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculatePWM
     ___aldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
   _init_I2C
   _init_ISR
   _init_PWM
     _write_PWM
       _calculatePWM (ARG)
         ___aldiv
           ___lmul (ARG)
         ___lmul
         ___wmul
   _init_QEI
   _init_TMR1
   _init_UART
   _init_VNHIO
   _int2char
     ___lwdiv
     ___lwmod
   _write_PWM
     _calculatePWM (ARG)
       ___aldiv
         ___lmul (ARG)
       ___lmul
       ___wmul

 _ISR_high (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      3       3       4        1.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2B      5A       1       95.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D       5        0.0%
DATA                 0      0      5D      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Nov 11 22:02:51 2018

                     _BF 007E38      ___wmul@multiplicand 0007             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$RC 000000                      l201 08CC                      l204 0910  
                    l212 06E6                      l213 069A                      l230 07EE  
                    l214 06F8                      l207 08E2                      l215 0704  
                    l218 084E                      l227 0792                      l171 059A  
                    l228 07B4                      l180 0360                      l172 05F6  
                    l229 07DE                      l181 0366                      l173 05D0  
                    l182 039C                      l174 05D8                      l183 0408  
                    l175 05FA                      l192 08B6                      l176 05FE  
                    l177 05FE                      l290 0498                      l186 0902  
                    l291 0488                      l195 0876                      l292 04AA  
                    l293 04AE                      l189 08F4                      l294 04EC  
                    l198 0898                      l710 0630                      l295 0500  
                    l287 0434                      l711 0624                      l296 0528  
                    l288 045A                      l712 0642                      l720 072C  
                    l297 053C                      l289 0504                      l713 0646  
                    l721 0720                      l714 0670                      l722 073E  
                    l715 0680                      l723 0742                      l716 0688  
                    l724 0764                      l709 0680                      l725 0774  
                    l726 077C                      l719 0774                      _CKP 007E34  
                    _GIE 007F97             __CFG_CPB$OFF 000000                      _PR2 000FCB  
                    _PID 002C                      u600 0514                      u601 0510  
                    u530 07A0                      u610 061C             __CFG_CPD$OFF 000000  
                    u531 079C                      u611 0618                      u540 07DE  
                    u620 063E                      u700 05A8                      u541 07DA  
                    u621 063A                      u701 05A4                      u550 041C  
                    u630 0662                      u710 05C8                      u551 0418  
                    u631 065E                      u711 05C4                      u560 0442  
                    u640 0718                      u561 043E                      u641 0714  
                    u570 0480                      u650 073A                      u571 047C  
                    u651 0736                      u580 04A6                      u660 0758  
                    u581 04A2                      u661 0754                      u590 04D6  
                    u670 033E                      u591 04D2                      u671 033A  
                    u680 0388                      u681 0384                      u690 06F4  
                    u691 06F0                      _pos 0059                      prod 000FF3  
                    wreg 000FE8             __CFG_IESO$ON 000000              int2char@num 000E  
           __CFG_LVP$OFF 000000                     l1401 0488                     l1411 04E6  
                   l1403 0498                     l1421 0528                     l1413 04EC  
                   l1405 04AE                     l1501 016E                     l1423 053C  
                   l1415 04F6                     l1407 04B8                     l1511 0246  
                   l1503 0172                     l1431 0624                     l1409 04D6  
                   l1417 0504                     l1521 0340                     l1513 02F4  
                   l1505 018E                     l1361 0864                     l1441 066A  
                   l1433 0630                     l1425 0602                     l1419 0514  
                   l1371 077E                     l1531 0408                     l1523 0366  
                   l1515 0328                     l1507 01C4                     l1363 0872  
                   l1443 0670                     l1435 0646                     l1427 060A  
                   l1451 0720                     l1381 040A                     l1373 0792  
                   l1365 0826                     l1525 0388                     l1517 0330  
                   l1509 01F8                     l1445 0676                     l1437 064C  
                   l1429 061C                     l1461 076A                     l1453 072C  
                   l1541 06E0                     l1533 068A                     l1391 0442  
                   l1383 040E                     l1375 07A0                     l1367 0842  
                   l1527 039C                     l1519 033E                     l1359 0850  
                   l1471 08F2                     l1463 08E4                     l1439 0662  
                   l1455 0742                     l1447 0706                     l1543 06E6  
                   l1535 0692                     l1551 0572                     l1393 0452  
                   l1385 041C                     l1377 07B4                     l1369 084E  
                   l1529 03F4                     l1473 0904                     l1481 089E  
                   l1465 08EC                     l1457 0758                     l1449 0718  
                   l1545 06F8                     l1537 069A                     l1561 0586  
                   l1553 0576                     l1395 045A                     l1387 042C  
                   l1379 07BE                     l1475 0908                     l1483 08A6  
                   l1491 08B8                     l1467 08EE                     l1459 0764  
                   l1547 0704                     l1539 06C4                     l1571 05A8  
                   l1563 058A                     l1555 057A                     l1397 046A  
                   l1389 0434                     l1485 08A8                     l1477 08F6  
                   l1493 08BC                     l1469 08F0                     l1581 05EE  
                   l1573 05BA                     l1565 058E                     l1557 057E  
                   l1549 053E                     l1399 0480                     l1495 08CE  
                   l1479 089A                     l1487 0878                     l1583 05F0  
                   l1575 05C8                     l1567 0590                     l1559 0582  
                   l1497 0162                     l1489 087C                     l1577 05D8  
                   l1569 059A                     l1499 0168                     l1579 05EC  
                   _IPEN 007E87              main@counter 0062                     _TMR1 000FCE  
                   _WCOL 007E37                     _TXIE 007CEC                     _TXIF 007CF4  
                   _TXIP 007CFC            __CFG_FCMEN$ON 000000                     _main 053E  
                   fsr2h 000FDA                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 005B                     _volt 003C  
          __CFG_BOREN$ON 000000                     prodh 000FF4                     prodl 000FF3  
                   start 015E            __CFG_MCLRE$ON 000000             ___param_bank 000000  
        __end_of___aldiv 053E                    ?_main 0001                    _T1CON 000FCD  
                  _T2CON 000FCA                    _LATA0 007C48                    _LATA1 007C49  
                  _LATC2 007C5A          __end_of___lwdiv 068A                    _GPREG 004F  
        __end_of___lwmod 077E                    i2l160 00A8                    i2l161 00D8  
                  i2l162 0152                    i2l163 0110                    i2l155 00AA  
                  i2l164 012E                    i2l156 0058                    i2l165 014E  
                  i2l166 0152                    i2l158 004A                    i2l159 0070  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _SSPIE 007CEB  
                  _SSPIF 007CF3                    _SSPIP 007CFB                    _SSPOV 007E36  
                  _TXREG 000FAD                    _TXSTA 000FAC            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000      ___lmul@multiplicand 0009  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000         __end_of_ISR_high 015E  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _error 004A                    _input 0055  
                  tablat 000FF5                    ttemp5 005C                    ttemp6 005F  
                  ttemp7 0063                    status 000FD8                    wtemp8 005C  
          int2char@digit 0010          __initialization 07F0           __CFG_HPOL$HIGH 000000  
           __end_of_main 0602           __CFG_LPOL$HIGH 000000                   ??_main 002C  
          __activetblptr 000000                   _CCPR1L 000FBE                   _ANSEL0 000FB8  
                 _ANSEL1 000FB9    __size_of_calculatePWM 02A8                   i2l1101 00C6  
                 i2l1111 0108                   i2l1103 00CC                   i2l1121 0146  
                 i2l1113 0110                   i2l1105 00D8                   i2l1115 012E  
                 i2l1107 00E6                   i2l1117 0130                   i2l1109 00F4  
                 i2l1119 0144                   i2l1081 0012                   i2l1091 006A  
                 i2l1083 0020                   i2l1093 007E                   i2l1085 002E  
                 i2l1095 008E                   i2l1087 003C                   i2l1097 00A0  
                 i2l1089 0058                   i2l1099 00B8           __CFG_WDTEN$OFF 000000  
                 _QEICON 000FB6                   _OSCCON 000FD3                   _TMR1IE 007CE8  
                 _TMR1IF 007CF0           __CFG_WINEN$OFF 000000                   _TMR1IP 007CF8  
                 _TMR1ON 007E68                   _SSPADD 000FC8                   _TRISA0 007C90  
                 _TRISA1 007C91                   _TRISA4 007C94                   _TRISA5 007C95  
                 _TRISC2 007CA2                   _TRISC4 007CA4                   _TRISC5 007CA5  
                 _TRISC6 007CA6                   _SSPBUF 000FC9                   _SSPCON 000FC6  
         __CFG_SSPMX$RD1 000000         __end_of_int2char 0706                   ___lmul 077E  
              ??___aldiv 0019                   ___wmul 0826           __CFG_STVREN$ON 000000  
       __end_of_init_I2C 0912                ??___lwdiv 0009                ??___lwmod 0009  
       __end_of_init_QEI 089A         __end_of_init_ISR 08E4         __end_of_init_PWM 08B8  
                 _cursor 004D                   clear_0 0816             __pdataCOMRAM 0055  
           _calculatePWM 0162                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 081C  
        __CFG_FLTAMX$RC1 000000            ___rparam_used 000001          __CFG_T1OSCMX$ON 000000  
         __pcstackCOMRAM 0001                ?_ISR_high 0001           int2char@number 000C  
         int2char@string 0050       __size_of_init_UART 0016       __size_of_init_TMR1 000E  
             __pnvCOMRAM 0059                  ?___lmul 0005                  ?___wmul 0005  
             ??_ISR_high 0001          __CFG_WDPS$32768 000000                  _CCP1CON 000FBD  
                _BAUDCON 000FAA           ___lmul@product 000D          __CFG_PWM4MX$RB5 000000  
                _MAXCNTH 000F65                  _MAXCNTL 000F64                  i2u20_40 003C  
                i2u20_41 0038                  i2u21_40 004A                  i2u21_41 0046  
                i2u30_40 0108                  i2u22_40 006A                  i2u30_41 0104  
                i2u22_41 0066                  i2u31_40 0144                  i2u23_40 007E  
                i2u31_41 0140                  i2u23_41 007A                  i2u24_40 008E  
                i2u24_41 008A                  i2u25_40 00A0                  i2u25_41 009C  
                i2u26_40 00B8                  i2u18_40 0020                  i2u26_41 00B4  
                i2u18_41 001C                  i2u27_40 00C6                  i2u19_40 002E  
                i2u27_41 00C2                  i2u19_41 002A                  i2u28_40 00E6  
                i2u28_41 00E2                  i2u29_40 00F4                  i2u29_41 00F0  
                _POSCNTH 000F67                  _POSCNTL 000F66                ?_int2char 000C  
        __CFG_PWMPIN$OFF 000000                ?_init_I2C 0001                ?_init_QEI 0001  
              ?_init_ISR 0001                ?_init_PWM 0001                  _i2cData 004C  
     __size_of_write_PWM 0028          __CFG_PWRTEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000               _init_VNHIO 08E4                  ___aldiv 040A  
        __size_of___lmul 0072          __size_of___wmul 002A                  ___lwdiv 0602  
                ___lwmod 0706                  __pcinit 07F0                  __ramtop 0300  
                __ptext0 053E                  __ptext1 068A                  __ptext2 0706  
                __ptext3 0602                  __ptext4 08E4                  __ptext5 08B8  
                __ptext6 08F6                  __ptext7 0878                  __ptext8 089A  
                __ptext9 0850        __end_of_init_UART 08CE        __end_of_init_TMR1 0904  
                _ref_pos 0057         ___aldiv@dividend 0011                  _pos_ant 0046  
             ??_int2char 000E     end_of_initialization 081C               ??_init_I2C 0005  
             ??_init_QEI 0005               ??_init_ISR 0005               ??_init_PWM 002C  
       ___aldiv@quotient 001B                  postdec1 000FE5                  postinc0 000FEE  
             _pos_degree 004E        __end_of_write_PWM 0878               _suma_error 0040  
            _CCP1CONbits 000FBD              ?_init_VNHIO 0001               _string_pos 0044  
       __CFG_EXCLKMX$RC3 000000           __end_of___lmul 07F0           __end_of___wmul 0850  
          __pidataCOMRAM 0912        __size_of_ISR_high 0156      start_initialization 07F0  
               ??___lmul 000D                 ??___wmul 0009       write_PWM@dutyCycle 0060  
            __pbssCOMRAM 002C            __pcstackBANK0 0060      __size_of_init_VNHIO 0012  
      __size_of_int2char 007C        __size_of_init_I2C 000E        __size_of_init_QEI 0022  
      __size_of_init_ISR 0016        __size_of_init_PWM 001E         ___lwdiv@dividend 0005  
              __pintcode 0008                 ?___aldiv 0011                 ?___lwdiv 0005  
               ?___lwmod 0005                _init_UART 08B8                _init_TMR1 08F6  
       ___lwdiv@quotient 000A                _error_ant 0048          ___aldiv@divisor 0015  
        ___aldiv@counter 0019           ___wmul@product 0009                 _ISR_high 0008  
      ___wmul@multiplier 0005            ?_calculatePWM 001F               ?_init_UART 0001  
             ?_init_TMR1 0001                _write_PWM 0850        ___lmul@multiplier 0005  
              copy_data0 0804                 __Hrparam 0000             ??_init_VNHIO 0005  
               __Lrparam 0000         __size_of___aldiv 0134         __size_of___lwdiv 0088  
       __size_of___lwmod 0078           ??_calculatePWM 0023          ___lwdiv@divisor 0007  
        ___lwdiv@counter 0009                 __ptext10 08CE                 __ptext11 0904  
               __ptext12 0162                 __ptext13 0826                 __ptext14 077E  
               __ptext15 040A               ?_write_PWM 0060       __end_of_init_VNHIO 08F6  
               _int2char 068A                 _init_I2C 0904                 _init_QEI 0878  
               _init_ISR 08CE                 _init_PWM 089A            __size_of_main 00C4  
               _velocity 0038                 int$flags 005B              ??_init_UART 0005  
            ??_init_TMR1 0005     calculatePWM@setpoint 0001                 intlevel2 0000  
       ___lwmod@dividend 0005          ___lwmod@divisor 0007          ___lwmod@counter 0009  
           ___aldiv@sign 001A              ??_write_PWM 002B     __end_of_calculatePWM 040A  
